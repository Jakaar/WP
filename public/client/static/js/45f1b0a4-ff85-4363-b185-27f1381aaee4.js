/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_jquery_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/jquery.min */ \"./resources/js/core/jquery.min.js\");\n/* harmony import */ var _core_jquery_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_core_jquery_min__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_popper_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/popper.min */ \"./resources/js/core/popper.min.js\");\n/* harmony import */ var _core_popper_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_core_popper_min__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core_bootstrap_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/bootstrap.min */ \"./resources/js/core/bootstrap.min.js\");\n/* harmony import */ var _core_bootstrap_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_core_bootstrap_min__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _plugins_perfect_scrollbar_jquery_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugins/perfect-scrollbar.jquery.min */ \"./resources/js/plugins/perfect-scrollbar.jquery.min.js\");\n/* harmony import */ var _plugins_perfect_scrollbar_jquery_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_plugins_perfect_scrollbar_jquery_min__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _plugins_bootstrap_switch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugins/bootstrap-switch */ \"./resources/js/plugins/bootstrap-switch.js\");\n/* harmony import */ var _plugins_bootstrap_switch__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_plugins_bootstrap_switch__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _plugins_nouislider_min__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/nouislider.min */ \"./resources/js/plugins/nouislider.min.js\");\n/* harmony import */ var _plugins_nouislider_min__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_plugins_nouislider_min__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _plugins_glide__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugins/glide */ \"./resources/js/plugins/glide.js\");\n/* harmony import */ var _plugins_glide__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_plugins_glide__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _plugins_choices_min__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugins/choices.min */ \"./resources/js/plugins/choices.min.js\");\n/* harmony import */ var _plugins_choices_min__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_plugins_choices_min__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _plugins_datetimepicker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugins/datetimepicker */ \"./resources/js/plugins/datetimepicker.js\");\n/* harmony import */ var _plugins_datetimepicker__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_plugins_datetimepicker__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _plugins_jasny_bootstrap_min__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugins/jasny-bootstrap.min */ \"./resources/js/plugins/jasny-bootstrap.min.js\");\n/* harmony import */ var _plugins_jasny_bootstrap_min__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_plugins_jasny_bootstrap_min__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _plugins_headroom_min__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugins/headroom.min */ \"./resources/js/plugins/headroom.min.js\");\n/* harmony import */ var _plugins_headroom_min__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_plugins_headroom_min__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _argon_design_system_min__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./argon-design-system.min */ \"./resources/js/argon-design-system.min.js\");\n/* harmony import */ var _argon_design_system_min__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_argon_design_system_min__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n // import './plugins/moment.min'\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC5qcz82ZDQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gJy4vY29yZS9qcXVlcnkubWluJ1xuaW1wb3J0IGpRdWVyeSBmcm9tICcuL2NvcmUvanF1ZXJ5Lm1pbidcbmltcG9ydCAnLi9jb3JlL3BvcHBlci5taW4nXG5pbXBvcnQgJy4vY29yZS9ib290c3RyYXAubWluJ1xuaW1wb3J0ICcuL3BsdWdpbnMvcGVyZmVjdC1zY3JvbGxiYXIuanF1ZXJ5Lm1pbidcbmltcG9ydCAnLi9wbHVnaW5zL2Jvb3RzdHJhcC1zd2l0Y2gnXG5pbXBvcnQgJy4vcGx1Z2lucy9ub3Vpc2xpZGVyLm1pbidcbmltcG9ydCAnLi9wbHVnaW5zL2dsaWRlJ1xuLy8gaW1wb3J0ICcuL3BsdWdpbnMvbW9tZW50Lm1pbidcbmltcG9ydCAnLi9wbHVnaW5zL2Nob2ljZXMubWluJ1xuaW1wb3J0ICcuL3BsdWdpbnMvZGF0ZXRpbWVwaWNrZXInXG5pbXBvcnQgJy4vcGx1Z2lucy9qYXNueS1ib290c3RyYXAubWluJ1xuaW1wb3J0ICcuL3BsdWdpbnMvaGVhZHJvb20ubWluJ1xuaW1wb3J0ICcuL2FyZ29uLWRlc2lnbi1zeXN0ZW0ubWluJ1xuIl0sIm5hbWVzIjpbIiQiLCJqUXVlcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/argon-design-system.min.js":
/*!*************************************************!*\
  !*** ./resources/js/argon-design-system.min.js ***!
  \*************************************************/
/***/ (() => {

eval("var big_image,\n    navbar_initialized,\n    didScroll,\n    transparent = !0,\n    transparentDemo = !0,\n    fixedTop = !1,\n    backgroundOrange = !1,\n    toggle_initialized = !1,\n    $datepicker = $(\".datepicker\"),\n    $collapse = $(\".navbar .collapse\"),\n    $html = $(\"html\"),\n    $tagsinput = $(\".tagsinput\");\n\nfunction up(e) {\n  document.getElementById(\"myNumber\").value = parseInt(document.getElementById(\"myNumber\").value) + 1, document.getElementById(\"myNumber\").value >= parseInt(e) && (document.getElementById(\"myNumber\").value = e);\n}\n\nfunction down(e) {\n  document.getElementById(\"myNumber\").value = parseInt(document.getElementById(\"myNumber\").value) - 1, document.getElementById(\"myNumber\").value <= parseInt(e) && (document.getElementById(\"myNumber\").value = e);\n}\n\nfunction debounce(l, a, o) {\n  var r;\n  return function () {\n    var e = this,\n        t = arguments;\n    clearTimeout(r), r = setTimeout(function () {\n      r = null, o || l.apply(e, t);\n    }, a), o && !r && l.apply(e, t);\n  };\n}\n\n-1 < navigator.platform.indexOf(\"Win\") ? ($(\".wrapper .login-page, .register-page, .card\").perfectScrollbar(), 0 != $(\".tab-content .table-responsive\").length && $(\".table-responsive\").each(function () {\n  new PerfectScrollbar($(this)[0]);\n}), $html.addClass(\"perfect-scrollbar-on\")) : $html.addClass(\"perfect-scrollbar-off\"), $(document).ready(function () {\n  $(\".dropdown-menu a.dropdown-toggle\").on(\"click\", function (e) {\n    var t = $(this),\n        l = $(this).offsetParent(\".dropdown-menu\");\n    return $(this).next().hasClass(\"show\") || $(this).parents(\".dropdown-menu\").first().find(\".show\").removeClass(\"show\"), $(this).next(\".dropdown-menu\").toggleClass(\"show\"), $(this).closest(\"a\").toggleClass(\"open\"), $(this).parents(\"a.dropdown-item.dropdown.show\").on(\"hidden.bs.dropdown\", function (e) {\n      $(\".dropdown-menu .show\").removeClass(\"show\");\n    }), l.parent().hasClass(\"navbar-nav\") || t.next().css({\n      top: t[0].offsetTop,\n      left: l.outerWidth() - 4\n    }), !1;\n  });\n  (e = $(\".form-control\")).length && e.on(\"focus blur\", function (e) {\n    $(this).parents(\".form-group\").toggleClass(\"focused\", \"focus\" === e.type);\n  }).trigger(\"blur\");\n  flatpickr(\".flatpickr\", {}), flatpickr(\".range\", {\n    mode: \"range\"\n  }), flatpickr(\".datetimepicker\", {\n    enableTime: !0,\n    dateFormat: \"Y-m-d H:i\"\n  }), $(\".headroom\")[0] && new Headroom(document.querySelector(\"#navbar-main\"), {\n    offset: 300,\n    tolerance: {\n      up: 30,\n      down: 30\n    }\n  }).init(), $(\"#choices-single-default\")[0] && new Choices(\"#choices-single-default\", {\n    search: !1\n  }), $(\"#choices-multiple-default\")[0] && new Choices(\"#choices-multiple-default\", {\n    search: !0,\n    delimiter: \",\",\n    editItems: !0,\n    removeItemButton: !0\n  }), $(\"#badges\")[0] && new Choices(\"#badges\", {\n    delimiter: \",\",\n    editItems: !0,\n    maxItems: 5,\n    removeButton: !0,\n    removeItemButton: !0\n  }), ArgonKit.initSliders(), $(function () {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  });\n  e = $('[data-toggle=\"popover\"]'), l = \"\", e.length && e.each(function () {\n    !function (e) {\n      e.data(\"color\") && (l = \"popover-\" + e.data(\"color\"));\n      var t = {\n        trigger: \"focus\",\n        template: '<div class=\"popover ' + l + '\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n      };\n      e.popover(t);\n    }($(this));\n  });\n  var e,\n      l,\n      t = $(\".back-to-top\");\n  $(window).scroll(function () {\n    300 < $(window).scrollTop() ? t.addClass(\"show\") : t.removeClass(\"show\");\n  }), t.on(\"click\", function (e) {\n    e.preventDefault(), $(\"html, body\").animate({\n      scrollTop: 0\n    }, \"300\");\n  });\n}), $(document).on(\"click\", \".card-rotate .btn-rotate\", function () {\n  var e = $(this).closest(\".rotating-card-container\");\n  e.hasClass(\"hover\") ? e.removeClass(\"hover\") : e.addClass(\"hover\");\n}), ArgonKit = {\n  misc: {\n    navbar_menu_visible: 0\n  },\n  checkScrollForTransparentNavbar: debounce(function () {\n    $(document).scrollTop() > scroll_distance ? transparent && (transparent = !1, $(\".navbar[color-on-scroll]\").removeClass(\"navbar-transparent\")) : transparent || (transparent = !0, $(\".navbar[color-on-scroll]\").addClass(\"navbar-transparent\"));\n  }, 17),\n  initSliders: function initSliders() {\n    var e = document.getElementById(\"sliderRegular\");\n    e && noUiSlider.create(e, {\n      start: 40,\n      connect: [!0, !1],\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n    var t = document.getElementById(\"sliderDouble\");\n    e && noUiSlider.create(t, {\n      start: [20, 60],\n      connect: !0,\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n  },\n  initGoogleMaps: function initGoogleMaps() {\n    var e = new google.maps.LatLng(40.748817, -73.985428),\n        t = {\n      zoom: 13,\n      center: e,\n      scrollwheel: !1,\n      styles: [{\n        featureType: \"administrative\",\n        elementType: \"labels.text.fill\",\n        stylers: [{\n          color: \"#444444\"\n        }]\n      }, {\n        featureType: \"landscape\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#f2f2f2\"\n        }]\n      }, {\n        featureType: \"poi\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"road\",\n        elementType: \"all\",\n        stylers: [{\n          saturation: -100\n        }, {\n          lightness: 45\n        }]\n      }, {\n        featureType: \"road.highway\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"simplified\"\n        }]\n      }, {\n        featureType: \"road.arterial\",\n        elementType: \"labels.icon\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"transit\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"water\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#C5CBF5\"\n        }, {\n          visibility: \"on\"\n        }]\n      }]\n    },\n        t = new google.maps.Map(document.getElementById(\"map-contactus-1\"), t);\n    new google.maps.Marker({\n      position: e,\n      title: \"Hello World!\"\n    }).setMap(t);\n  },\n  initGoogleMaps2: function initGoogleMaps2() {\n    var e = new google.maps.LatLng(40.748817, -73.985428),\n        t = {\n      zoom: 13,\n      center: e,\n      scrollwheel: !1,\n      styles: [{\n        featureType: \"administrative\",\n        elementType: \"labels.text.fill\",\n        stylers: [{\n          color: \"#444444\"\n        }]\n      }, {\n        featureType: \"landscape\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#f2f2f2\"\n        }]\n      }, {\n        featureType: \"poi\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"road\",\n        elementType: \"all\",\n        stylers: [{\n          saturation: -100\n        }, {\n          lightness: 45\n        }]\n      }, {\n        featureType: \"road.highway\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"simplified\"\n        }]\n      }, {\n        featureType: \"road.arterial\",\n        elementType: \"labels.icon\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"transit\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"water\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#C5CBF5\"\n        }, {\n          visibility: \"on\"\n        }]\n      }]\n    },\n        t = new google.maps.Map(document.getElementById(\"map-contactus-2\"), t);\n    new google.maps.Marker({\n      position: e,\n      title: \"Hello World!\"\n    }).setMap(t);\n  },\n  initGoogleMaps3: function initGoogleMaps3() {\n    var e = new google.maps.LatLng(40.748817, -73.985428),\n        t = {\n      zoom: 13,\n      center: e,\n      scrollwheel: !1,\n      styles: [{\n        featureType: \"administrative\",\n        elementType: \"labels.text.fill\",\n        stylers: [{\n          color: \"#444444\"\n        }]\n      }, {\n        featureType: \"landscape\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#f2f2f2\"\n        }]\n      }, {\n        featureType: \"poi\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"road\",\n        elementType: \"all\",\n        stylers: [{\n          saturation: -100\n        }, {\n          lightness: 45\n        }]\n      }, {\n        featureType: \"road.highway\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"simplified\"\n        }]\n      }, {\n        featureType: \"road.arterial\",\n        elementType: \"labels.icon\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"transit\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"water\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#C5CBF5\"\n        }, {\n          visibility: \"on\"\n        }]\n      }]\n    },\n        t = new google.maps.Map(document.getElementById(\"map-contactus-3\"), t);\n    new google.maps.Marker({\n      position: e,\n      title: \"Hello World!\"\n    }).setMap(t);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/argon-design-system.min.js\n");

/***/ }),

/***/ "./resources/js/core/bootstrap.min.js":
/*!********************************************!*\
  !*** ./resources/js/core/bootstrap.min.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n  * Bootstrap v4.3.1 (https://getbootstrap.com/)\n  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? e(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t, g, u) {\n  \"use strict\";\n\n  function i(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function s(t, e, n) {\n    return e && i(t.prototype, e), n && i(t, n), t;\n  }\n\n  function l(o) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = null != arguments[t] ? arguments[t] : {},\n          e = Object.keys(r);\n      \"function\" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(r).filter(function (t) {\n        return Object.getOwnPropertyDescriptor(r, t).enumerable;\n      }))), e.forEach(function (t) {\n        var e, n, i;\n        e = o, i = r[n = t], n in e ? Object.defineProperty(e, n, {\n          value: i,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[n] = i;\n      });\n    }\n\n    return o;\n  }\n\n  g = g && g.hasOwnProperty(\"default\") ? g[\"default\"] : g, u = u && u.hasOwnProperty(\"default\") ? u[\"default\"] : u;\n  var e = \"transitionend\";\n\n  function n(t) {\n    var e = this,\n        n = !1;\n    return g(this).one(_.TRANSITION_END, function () {\n      n = !0;\n    }), setTimeout(function () {\n      n || _.triggerTransitionEnd(e);\n    }, t), this;\n  }\n\n  var _ = {\n    TRANSITION_END: \"bsTransitionEnd\",\n    getUID: function getUID(t) {\n      for (; t += ~~(1e6 * Math.random()), document.getElementById(t);) {\n        ;\n      }\n\n      return t;\n    },\n    getSelectorFromElement: function getSelectorFromElement(t) {\n      var e = t.getAttribute(\"data-target\");\n\n      if (!e || \"#\" === e) {\n        var n = t.getAttribute(\"href\");\n        e = n && \"#\" !== n ? n.trim() : \"\";\n      }\n\n      try {\n        return document.querySelector(e) ? e : null;\n      } catch (t) {\n        return null;\n      }\n    },\n    getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {\n      if (!t) return 0;\n      var e = g(t).css(\"transition-duration\"),\n          n = g(t).css(\"transition-delay\"),\n          i = parseFloat(e),\n          o = parseFloat(n);\n      return i || o ? (e = e.split(\",\")[0], n = n.split(\",\")[0], 1e3 * (parseFloat(e) + parseFloat(n))) : 0;\n    },\n    reflow: function reflow(t) {\n      return t.offsetHeight;\n    },\n    triggerTransitionEnd: function triggerTransitionEnd(t) {\n      g(t).trigger(e);\n    },\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(e);\n    },\n    isElement: function isElement(t) {\n      return (t[0] || t).nodeType;\n    },\n    typeCheckConfig: function typeCheckConfig(t, e, n) {\n      for (var i in n) {\n        if (Object.prototype.hasOwnProperty.call(n, i)) {\n          var o = n[i],\n              r = e[i],\n              s = r && _.isElement(r) ? \"element\" : (a = r, {}.toString.call(a).match(/\\s([a-z]+)/i)[1].toLowerCase());\n          if (!new RegExp(o).test(s)) throw new Error(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + s + '\" but expected type \"' + o + '\".');\n        }\n      }\n\n      var a;\n    },\n    findShadowRoot: function findShadowRoot(t) {\n      if (!document.documentElement.attachShadow) return null;\n      if (\"function\" != typeof t.getRootNode) return t instanceof ShadowRoot ? t : t.parentNode ? _.findShadowRoot(t.parentNode) : null;\n      var e = t.getRootNode();\n      return e instanceof ShadowRoot ? e : null;\n    }\n  };\n  g.fn.emulateTransitionEnd = n, g.event.special[_.TRANSITION_END] = {\n    bindType: e,\n    delegateType: e,\n    handle: function handle(t) {\n      if (g(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);\n    }\n  };\n\n  var o = \"alert\",\n      r = \"bs.alert\",\n      a = \".\" + r,\n      c = g.fn[o],\n      h = {\n    CLOSE: \"close\" + a,\n    CLOSED: \"closed\" + a,\n    CLICK_DATA_API: \"click\" + a + \".data-api\"\n  },\n      f = \"alert\",\n      d = \"fade\",\n      m = \"show\",\n      p = function () {\n    function i(t) {\n      this._element = t;\n    }\n\n    var t = i.prototype;\n    return t.close = function (t) {\n      var e = this._element;\n      t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);\n    }, t.dispose = function () {\n      g.removeData(this._element, r), this._element = null;\n    }, t._getRootElement = function (t) {\n      var e = _.getSelectorFromElement(t),\n          n = !1;\n\n      return e && (n = document.querySelector(e)), n || (n = g(t).closest(\".\" + f)[0]), n;\n    }, t._triggerCloseEvent = function (t) {\n      var e = g.Event(h.CLOSE);\n      return g(t).trigger(e), e;\n    }, t._removeElement = function (e) {\n      var n = this;\n\n      if (g(e).removeClass(m), g(e).hasClass(d)) {\n        var t = _.getTransitionDurationFromElement(e);\n\n        g(e).one(_.TRANSITION_END, function (t) {\n          return n._destroyElement(e, t);\n        }).emulateTransitionEnd(t);\n      } else this._destroyElement(e);\n    }, t._destroyElement = function (t) {\n      g(t).detach().trigger(h.CLOSED).remove();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = g(this),\n            e = t.data(r);\n        e || (e = new i(this), t.data(r, e)), \"close\" === n && e[n](this);\n      });\n    }, i._handleDismiss = function (e) {\n      return function (t) {\n        t && t.preventDefault(), e.close(this);\n      };\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), i;\n  }();\n\n  g(document).on(h.CLICK_DATA_API, '[data-dismiss=\"alert\"]', p._handleDismiss(new p())), g.fn[o] = p._jQueryInterface, g.fn[o].Constructor = p, g.fn[o].noConflict = function () {\n    return g.fn[o] = c, p._jQueryInterface;\n  };\n\n  var v = \"button\",\n      y = \"bs.button\",\n      E = \".\" + y,\n      C = \".data-api\",\n      T = g.fn[v],\n      S = \"active\",\n      b = \"btn\",\n      I = \"focus\",\n      D = '[data-toggle^=\"button\"]',\n      w = '[data-toggle=\"buttons\"]',\n      A = 'input:not([type=\"hidden\"])',\n      N = \".active\",\n      O = \".btn\",\n      k = {\n    CLICK_DATA_API: \"click\" + E + C,\n    FOCUS_BLUR_DATA_API: \"focus\" + E + C + \" blur\" + E + C\n  },\n      P = function () {\n    function n(t) {\n      this._element = t;\n    }\n\n    var t = n.prototype;\n    return t.toggle = function () {\n      var t = !0,\n          e = !0,\n          n = g(this._element).closest(w)[0];\n\n      if (n) {\n        var i = this._element.querySelector(A);\n\n        if (i) {\n          if (\"radio\" === i.type) if (i.checked && this._element.classList.contains(S)) t = !1;else {\n            var o = n.querySelector(N);\n            o && g(o).removeClass(S);\n          }\n\n          if (t) {\n            if (i.hasAttribute(\"disabled\") || n.hasAttribute(\"disabled\") || i.classList.contains(\"disabled\") || n.classList.contains(\"disabled\")) return;\n            i.checked = !this._element.classList.contains(S), g(i).trigger(\"change\");\n          }\n\n          i.focus(), e = !1;\n        }\n      }\n\n      e && this._element.setAttribute(\"aria-pressed\", !this._element.classList.contains(S)), t && g(this._element).toggleClass(S);\n    }, t.dispose = function () {\n      g.removeData(this._element, y), this._element = null;\n    }, n._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = g(this).data(y);\n        t || (t = new n(this), g(this).data(y, t)), \"toggle\" === e && t[e]();\n      });\n    }, s(n, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), n;\n  }();\n\n  g(document).on(k.CLICK_DATA_API, D, function (t) {\n    t.preventDefault();\n    var e = t.target;\n    g(e).hasClass(b) || (e = g(e).closest(O)), P._jQueryInterface.call(g(e), \"toggle\");\n  }).on(k.FOCUS_BLUR_DATA_API, D, function (t) {\n    var e = g(t.target).closest(O)[0];\n    g(e).toggleClass(I, /^focus(in)?$/.test(t.type));\n  }), g.fn[v] = P._jQueryInterface, g.fn[v].Constructor = P, g.fn[v].noConflict = function () {\n    return g.fn[v] = T, P._jQueryInterface;\n  };\n\n  var L = \"carousel\",\n      j = \"bs.carousel\",\n      H = \".\" + j,\n      R = \".data-api\",\n      x = g.fn[L],\n      F = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n  },\n      U = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    slide: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n  },\n      W = \"next\",\n      q = \"prev\",\n      M = \"left\",\n      K = \"right\",\n      Q = {\n    SLIDE: \"slide\" + H,\n    SLID: \"slid\" + H,\n    KEYDOWN: \"keydown\" + H,\n    MOUSEENTER: \"mouseenter\" + H,\n    MOUSELEAVE: \"mouseleave\" + H,\n    TOUCHSTART: \"touchstart\" + H,\n    TOUCHMOVE: \"touchmove\" + H,\n    TOUCHEND: \"touchend\" + H,\n    POINTERDOWN: \"pointerdown\" + H,\n    POINTERUP: \"pointerup\" + H,\n    DRAG_START: \"dragstart\" + H,\n    LOAD_DATA_API: \"load\" + H + R,\n    CLICK_DATA_API: \"click\" + H + R\n  },\n      B = \"carousel\",\n      V = \"active\",\n      Y = \"slide\",\n      z = \"carousel-item-right\",\n      X = \"carousel-item-left\",\n      $ = \"carousel-item-next\",\n      G = \"carousel-item-prev\",\n      J = \"pointer-event\",\n      Z = \".active\",\n      tt = \".active.carousel-item\",\n      et = \".carousel-item\",\n      nt = \".carousel-item img\",\n      it = \".carousel-item-next, .carousel-item-prev\",\n      ot = \".carousel-indicators\",\n      rt = \"[data-slide], [data-slide-to]\",\n      st = '[data-ride=\"carousel\"]',\n      at = {\n    TOUCH: \"touch\",\n    PEN: \"pen\"\n  },\n      lt = function () {\n    function r(t, e) {\n      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = this._element.querySelector(ot), this._touchSupported = \"ontouchstart\" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners();\n    }\n\n    var t = r.prototype;\n    return t.next = function () {\n      this._isSliding || this._slide(W);\n    }, t.nextWhenVisible = function () {\n      !document.hidden && g(this._element).is(\":visible\") && \"hidden\" !== g(this._element).css(\"visibility\") && this.next();\n    }, t.prev = function () {\n      this._isSliding || this._slide(q);\n    }, t.pause = function (t) {\n      t || (this._isPaused = !0), this._element.querySelector(it) && (_.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }, t.cycle = function (t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }, t.to = function (t) {\n      var e = this;\n      this._activeElement = this._element.querySelector(tt);\n\n      var n = this._getItemIndex(this._activeElement);\n\n      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) g(this._element).one(Q.SLID, function () {\n        return e.to(t);\n      });else {\n        if (n === t) return this.pause(), void this.cycle();\n        var i = n < t ? W : q;\n\n        this._slide(i, this._items[t]);\n      }\n    }, t.dispose = function () {\n      g(this._element).off(H), g.removeData(this._element, j), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n    }, t._getConfig = function (t) {\n      return t = l({}, F, t), _.typeCheckConfig(L, t, U), t;\n    }, t._handleSwipe = function () {\n      var t = Math.abs(this.touchDeltaX);\n\n      if (!(t <= 40)) {\n        var e = t / this.touchDeltaX;\n        0 < e && this.prev(), e < 0 && this.next();\n      }\n    }, t._addEventListeners = function () {\n      var e = this;\n      this._config.keyboard && g(this._element).on(Q.KEYDOWN, function (t) {\n        return e._keydown(t);\n      }), \"hover\" === this._config.pause && g(this._element).on(Q.MOUSEENTER, function (t) {\n        return e.pause(t);\n      }).on(Q.MOUSELEAVE, function (t) {\n        return e.cycle(t);\n      }), this._config.touch && this._addTouchEventListeners();\n    }, t._addTouchEventListeners = function () {\n      var n = this;\n\n      if (this._touchSupported) {\n        var e = function e(t) {\n          n._pointerEvent && at[t.originalEvent.pointerType.toUpperCase()] ? n.touchStartX = t.originalEvent.clientX : n._pointerEvent || (n.touchStartX = t.originalEvent.touches[0].clientX);\n        },\n            i = function i(t) {\n          n._pointerEvent && at[t.originalEvent.pointerType.toUpperCase()] && (n.touchDeltaX = t.originalEvent.clientX - n.touchStartX), n._handleSwipe(), \"hover\" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function (t) {\n            return n.cycle(t);\n          }, 500 + n._config.interval));\n        };\n\n        g(this._element.querySelectorAll(nt)).on(Q.DRAG_START, function (t) {\n          return t.preventDefault();\n        }), this._pointerEvent ? (g(this._element).on(Q.POINTERDOWN, function (t) {\n          return e(t);\n        }), g(this._element).on(Q.POINTERUP, function (t) {\n          return i(t);\n        }), this._element.classList.add(J)) : (g(this._element).on(Q.TOUCHSTART, function (t) {\n          return e(t);\n        }), g(this._element).on(Q.TOUCHMOVE, function (t) {\n          var e;\n          (e = t).originalEvent.touches && 1 < e.originalEvent.touches.length ? n.touchDeltaX = 0 : n.touchDeltaX = e.originalEvent.touches[0].clientX - n.touchStartX;\n        }), g(this._element).on(Q.TOUCHEND, function (t) {\n          return i(t);\n        }));\n      }\n    }, t._keydown = function (t) {\n      if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {\n        case 37:\n          t.preventDefault(), this.prev();\n          break;\n\n        case 39:\n          t.preventDefault(), this.next();\n      }\n    }, t._getItemIndex = function (t) {\n      return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(et)) : [], this._items.indexOf(t);\n    }, t._getItemByDirection = function (t, e) {\n      var n = t === W,\n          i = t === q,\n          o = this._getItemIndex(e),\n          r = this._items.length - 1;\n\n      if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;\n      var s = (o + (t === q ? -1 : 1)) % this._items.length;\n      return -1 === s ? this._items[this._items.length - 1] : this._items[s];\n    }, t._triggerSlideEvent = function (t, e) {\n      var n = this._getItemIndex(t),\n          i = this._getItemIndex(this._element.querySelector(tt)),\n          o = g.Event(Q.SLIDE, {\n        relatedTarget: t,\n        direction: e,\n        from: i,\n        to: n\n      });\n\n      return g(this._element).trigger(o), o;\n    }, t._setActiveIndicatorElement = function (t) {\n      if (this._indicatorsElement) {\n        var e = [].slice.call(this._indicatorsElement.querySelectorAll(Z));\n        g(e).removeClass(V);\n\n        var n = this._indicatorsElement.children[this._getItemIndex(t)];\n\n        n && g(n).addClass(V);\n      }\n    }, t._slide = function (t, e) {\n      var n,\n          i,\n          o,\n          r = this,\n          s = this._element.querySelector(tt),\n          a = this._getItemIndex(s),\n          l = e || s && this._getItemByDirection(t, s),\n          c = this._getItemIndex(l),\n          h = Boolean(this._interval);\n\n      if (o = t === W ? (n = X, i = $, M) : (n = z, i = G, K), l && g(l).hasClass(V)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).isDefaultPrevented() && s && l) {\n        this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l);\n        var u = g.Event(Q.SLID, {\n          relatedTarget: l,\n          direction: o,\n          from: a,\n          to: c\n        });\n\n        if (g(this._element).hasClass(Y)) {\n          g(l).addClass(i), _.reflow(l), g(s).addClass(n), g(l).addClass(n);\n          var f = parseInt(l.getAttribute(\"data-interval\"), 10);\n          this._config.interval = f ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, f) : this._config.defaultInterval || this._config.interval;\n\n          var d = _.getTransitionDurationFromElement(s);\n\n          g(s).one(_.TRANSITION_END, function () {\n            g(l).removeClass(n + \" \" + i).addClass(V), g(s).removeClass(V + \" \" + i + \" \" + n), r._isSliding = !1, setTimeout(function () {\n              return g(r._element).trigger(u);\n            }, 0);\n          }).emulateTransitionEnd(d);\n        } else g(s).removeClass(V), g(l).addClass(V), this._isSliding = !1, g(this._element).trigger(u);\n\n        h && this.cycle();\n      }\n    }, r._jQueryInterface = function (i) {\n      return this.each(function () {\n        var t = g(this).data(j),\n            e = l({}, F, g(this).data());\n        \"object\" == _typeof(i) && (e = l({}, e, i));\n        var n = \"string\" == typeof i ? i : e.slide;\n        if (t || (t = new r(this, e), g(this).data(j, t)), \"number\" == typeof i) t.to(i);else if (\"string\" == typeof n) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        } else e.interval && e.ride && (t.pause(), t.cycle());\n      });\n    }, r._dataApiClickHandler = function (t) {\n      var e = _.getSelectorFromElement(this);\n\n      if (e) {\n        var n = g(e)[0];\n\n        if (n && g(n).hasClass(B)) {\n          var i = l({}, g(n).data(), g(this).data()),\n              o = this.getAttribute(\"data-slide-to\");\n          o && (i.interval = !1), r._jQueryInterface.call(g(n), i), o && g(n).data(j).to(o), t.preventDefault();\n        }\n      }\n    }, s(r, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return F;\n      }\n    }]), r;\n  }();\n\n  g(document).on(Q.CLICK_DATA_API, rt, lt._dataApiClickHandler), g(window).on(Q.LOAD_DATA_API, function () {\n    for (var t = [].slice.call(document.querySelectorAll(st)), e = 0, n = t.length; e < n; e++) {\n      var i = g(t[e]);\n\n      lt._jQueryInterface.call(i, i.data());\n    }\n  }), g.fn[L] = lt._jQueryInterface, g.fn[L].Constructor = lt, g.fn[L].noConflict = function () {\n    return g.fn[L] = x, lt._jQueryInterface;\n  };\n\n  var ct = \"collapse\",\n      ht = \"bs.collapse\",\n      ut = \".\" + ht,\n      ft = g.fn[ct],\n      dt = {\n    toggle: !0,\n    parent: \"\"\n  },\n      gt = {\n    toggle: \"boolean\",\n    parent: \"(string|element)\"\n  },\n      _t = {\n    SHOW: \"show\" + ut,\n    SHOWN: \"shown\" + ut,\n    HIDE: \"hide\" + ut,\n    HIDDEN: \"hidden\" + ut,\n    CLICK_DATA_API: \"click\" + ut + \".data-api\"\n  },\n      mt = \"show\",\n      pt = \"collapse\",\n      vt = \"collapsing\",\n      yt = \"collapsed\",\n      Et = \"width\",\n      Ct = \"height\",\n      Tt = \".show, .collapsing\",\n      St = '[data-toggle=\"collapse\"]',\n      bt = function () {\n    function a(e, t) {\n      this._isTransitioning = !1, this._element = e, this._config = this._getConfig(t), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle=\"collapse\"][href=\"#' + e.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + e.id + '\"]'));\n\n      for (var n = [].slice.call(document.querySelectorAll(St)), i = 0, o = n.length; i < o; i++) {\n        var r = n[i],\n            s = _.getSelectorFromElement(r),\n            a = [].slice.call(document.querySelectorAll(s)).filter(function (t) {\n          return t === e;\n        });\n\n        null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(r));\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n    }\n\n    var t = a.prototype;\n    return t.toggle = function () {\n      g(this._element).hasClass(mt) ? this.hide() : this.show();\n    }, t.show = function () {\n      var t,\n          e,\n          n = this;\n\n      if (!this._isTransitioning && !g(this._element).hasClass(mt) && (this._parent && 0 === (t = [].slice.call(this._parent.querySelectorAll(Tt)).filter(function (t) {\n        return \"string\" == typeof n._config.parent ? t.getAttribute(\"data-parent\") === n._config.parent : t.classList.contains(pt);\n      })).length && (t = null), !(t && (e = g(t).not(this._selector).data(ht)) && e._isTransitioning))) {\n        var i = g.Event(_t.SHOW);\n\n        if (g(this._element).trigger(i), !i.isDefaultPrevented()) {\n          t && (a._jQueryInterface.call(g(t).not(this._selector), \"hide\"), e || g(t).data(ht, null));\n\n          var o = this._getDimension();\n\n          g(this._element).removeClass(pt).addClass(vt), this._element.style[o] = 0, this._triggerArray.length && g(this._triggerArray).removeClass(yt).attr(\"aria-expanded\", !0), this.setTransitioning(!0);\n\n          var r = \"scroll\" + (o[0].toUpperCase() + o.slice(1)),\n              s = _.getTransitionDurationFromElement(this._element);\n\n          g(this._element).one(_.TRANSITION_END, function () {\n            g(n._element).removeClass(vt).addClass(pt).addClass(mt), n._element.style[o] = \"\", n.setTransitioning(!1), g(n._element).trigger(_t.SHOWN);\n          }).emulateTransitionEnd(s), this._element.style[o] = this._element[r] + \"px\";\n        }\n      }\n    }, t.hide = function () {\n      var t = this;\n\n      if (!this._isTransitioning && g(this._element).hasClass(mt)) {\n        var e = g.Event(_t.HIDE);\n\n        if (g(this._element).trigger(e), !e.isDefaultPrevented()) {\n          var n = this._getDimension();\n\n          this._element.style[n] = this._element.getBoundingClientRect()[n] + \"px\", _.reflow(this._element), g(this._element).addClass(vt).removeClass(pt).removeClass(mt);\n          var i = this._triggerArray.length;\n          if (0 < i) for (var o = 0; o < i; o++) {\n            var r = this._triggerArray[o],\n                s = _.getSelectorFromElement(r);\n\n            if (null !== s) g([].slice.call(document.querySelectorAll(s))).hasClass(mt) || g(r).addClass(yt).attr(\"aria-expanded\", !1);\n          }\n          this.setTransitioning(!0);\n          this._element.style[n] = \"\";\n\n          var a = _.getTransitionDurationFromElement(this._element);\n\n          g(this._element).one(_.TRANSITION_END, function () {\n            t.setTransitioning(!1), g(t._element).removeClass(vt).addClass(pt).trigger(_t.HIDDEN);\n          }).emulateTransitionEnd(a);\n        }\n      }\n    }, t.setTransitioning = function (t) {\n      this._isTransitioning = t;\n    }, t.dispose = function () {\n      g.removeData(this._element, ht), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;\n    }, t._getConfig = function (t) {\n      return (t = l({}, dt, t)).toggle = Boolean(t.toggle), _.typeCheckConfig(ct, t, gt), t;\n    }, t._getDimension = function () {\n      return g(this._element).hasClass(Et) ? Et : Ct;\n    }, t._getParent = function () {\n      var t,\n          n = this;\n      _.isElement(this._config.parent) ? (t = this._config.parent, \"undefined\" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = document.querySelector(this._config.parent);\n      var e = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]',\n          i = [].slice.call(t.querySelectorAll(e));\n      return g(i).each(function (t, e) {\n        n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);\n      }), t;\n    }, t._addAriaAndCollapsedClass = function (t, e) {\n      var n = g(t).hasClass(mt);\n      e.length && g(e).toggleClass(yt, !n).attr(\"aria-expanded\", n);\n    }, a._getTargetFromElement = function (t) {\n      var e = _.getSelectorFromElement(t);\n\n      return e ? document.querySelector(e) : null;\n    }, a._jQueryInterface = function (i) {\n      return this.each(function () {\n        var t = g(this),\n            e = t.data(ht),\n            n = l({}, dt, t.data(), \"object\" == _typeof(i) && i ? i : {});\n\n        if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(ht, e)), \"string\" == typeof i) {\n          if (\"undefined\" == typeof e[i]) throw new TypeError('No method named \"' + i + '\"');\n          e[i]();\n        }\n      });\n    }, s(a, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return dt;\n      }\n    }]), a;\n  }();\n\n  g(document).on(_t.CLICK_DATA_API, St, function (t) {\n    \"A\" === t.currentTarget.tagName && t.preventDefault();\n\n    var n = g(this),\n        e = _.getSelectorFromElement(this),\n        i = [].slice.call(document.querySelectorAll(e));\n\n    g(i).each(function () {\n      var t = g(this),\n          e = t.data(ht) ? \"toggle\" : n.data();\n\n      bt._jQueryInterface.call(t, e);\n    });\n  }), g.fn[ct] = bt._jQueryInterface, g.fn[ct].Constructor = bt, g.fn[ct].noConflict = function () {\n    return g.fn[ct] = ft, bt._jQueryInterface;\n  };\n\n  var It = \"dropdown\",\n      Dt = \"bs.dropdown\",\n      wt = \".\" + Dt,\n      At = \".data-api\",\n      Nt = g.fn[It],\n      Ot = new RegExp(\"38|40|27\"),\n      kt = {\n    HIDE: \"hide\" + wt,\n    HIDDEN: \"hidden\" + wt,\n    SHOW: \"show\" + wt,\n    SHOWN: \"shown\" + wt,\n    CLICK: \"click\" + wt,\n    CLICK_DATA_API: \"click\" + wt + At,\n    KEYDOWN_DATA_API: \"keydown\" + wt + At,\n    KEYUP_DATA_API: \"keyup\" + wt + At\n  },\n      Pt = \"disabled\",\n      Lt = \"show\",\n      jt = \"dropup\",\n      Ht = \"dropright\",\n      Rt = \"dropleft\",\n      xt = \"dropdown-menu-right\",\n      Ft = \"position-static\",\n      Ut = '[data-toggle=\"dropdown\"]',\n      Wt = \".dropdown form\",\n      qt = \".dropdown-menu\",\n      Mt = \".navbar-nav\",\n      Kt = \".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\",\n      Qt = \"top-start\",\n      Bt = \"top-end\",\n      Vt = \"bottom-start\",\n      Yt = \"bottom-end\",\n      zt = \"right-start\",\n      Xt = \"left-start\",\n      $t = {\n    offset: 0,\n    flip: !0,\n    boundary: \"scrollParent\",\n    reference: \"toggle\",\n    display: \"dynamic\"\n  },\n      Gt = {\n    offset: \"(number|string|function)\",\n    flip: \"boolean\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element)\",\n    display: \"string\"\n  },\n      Jt = function () {\n    function c(t, e) {\n      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n    }\n\n    var t = c.prototype;\n    return t.toggle = function () {\n      if (!this._element.disabled && !g(this._element).hasClass(Pt)) {\n        var t = c._getParentFromElement(this._element),\n            e = g(this._menu).hasClass(Lt);\n\n        if (c._clearMenus(), !e) {\n          var n = {\n            relatedTarget: this._element\n          },\n              i = g.Event(kt.SHOW, n);\n\n          if (g(t).trigger(i), !i.isDefaultPrevented()) {\n            if (!this._inNavbar) {\n              if (\"undefined\" == typeof u) throw new TypeError(\"Bootstrap's dropdowns require Popper.js (https://popper.js.org/)\");\n              var o = this._element;\n              \"parent\" === this._config.reference ? o = t : _.isElement(this._config.reference) && (o = this._config.reference, \"undefined\" != typeof this._config.reference.jquery && (o = this._config.reference[0])), \"scrollParent\" !== this._config.boundary && g(t).addClass(Ft), this._popper = new u(o, this._menu, this._getPopperConfig());\n            }\n\n            \"ontouchstart\" in document.documentElement && 0 === g(t).closest(Mt).length && g(document.body).children().on(\"mouseover\", null, g.noop), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), g(this._menu).toggleClass(Lt), g(t).toggleClass(Lt).trigger(g.Event(kt.SHOWN, n));\n          }\n        }\n      }\n    }, t.show = function () {\n      if (!(this._element.disabled || g(this._element).hasClass(Pt) || g(this._menu).hasClass(Lt))) {\n        var t = {\n          relatedTarget: this._element\n        },\n            e = g.Event(kt.SHOW, t),\n            n = c._getParentFromElement(this._element);\n\n        g(n).trigger(e), e.isDefaultPrevented() || (g(this._menu).toggleClass(Lt), g(n).toggleClass(Lt).trigger(g.Event(kt.SHOWN, t)));\n      }\n    }, t.hide = function () {\n      if (!this._element.disabled && !g(this._element).hasClass(Pt) && g(this._menu).hasClass(Lt)) {\n        var t = {\n          relatedTarget: this._element\n        },\n            e = g.Event(kt.HIDE, t),\n            n = c._getParentFromElement(this._element);\n\n        g(n).trigger(e), e.isDefaultPrevented() || (g(this._menu).toggleClass(Lt), g(n).toggleClass(Lt).trigger(g.Event(kt.HIDDEN, t)));\n      }\n    }, t.dispose = function () {\n      g.removeData(this._element, Dt), g(this._element).off(wt), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);\n    }, t.update = function () {\n      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();\n    }, t._addEventListeners = function () {\n      var e = this;\n      g(this._element).on(kt.CLICK, function (t) {\n        t.preventDefault(), t.stopPropagation(), e.toggle();\n      });\n    }, t._getConfig = function (t) {\n      return t = l({}, this.constructor.Default, g(this._element).data(), t), _.typeCheckConfig(It, t, this.constructor.DefaultType), t;\n    }, t._getMenuElement = function () {\n      if (!this._menu) {\n        var t = c._getParentFromElement(this._element);\n\n        t && (this._menu = t.querySelector(qt));\n      }\n\n      return this._menu;\n    }, t._getPlacement = function () {\n      var t = g(this._element.parentNode),\n          e = Vt;\n      return t.hasClass(jt) ? (e = Qt, g(this._menu).hasClass(xt) && (e = Bt)) : t.hasClass(Ht) ? e = zt : t.hasClass(Rt) ? e = Xt : g(this._menu).hasClass(xt) && (e = Yt), e;\n    }, t._detectNavbar = function () {\n      return 0 < g(this._element).closest(\".navbar\").length;\n    }, t._getOffset = function () {\n      var e = this,\n          t = {};\n      return \"function\" == typeof this._config.offset ? t.fn = function (t) {\n        return t.offsets = l({}, t.offsets, e._config.offset(t.offsets, e._element) || {}), t;\n      } : t.offset = this._config.offset, t;\n    }, t._getPopperConfig = function () {\n      var t = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      };\n      return \"static\" === this._config.display && (t.modifiers.applyStyle = {\n        enabled: !1\n      }), t;\n    }, c._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = g(this).data(Dt);\n\n        if (t || (t = new c(this, \"object\" == _typeof(e) ? e : null), g(this).data(Dt, t)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n          t[e]();\n        }\n      });\n    }, c._clearMenus = function (t) {\n      if (!t || 3 !== t.which && (\"keyup\" !== t.type || 9 === t.which)) for (var e = [].slice.call(document.querySelectorAll(Ut)), n = 0, i = e.length; n < i; n++) {\n        var o = c._getParentFromElement(e[n]),\n            r = g(e[n]).data(Dt),\n            s = {\n          relatedTarget: e[n]\n        };\n\n        if (t && \"click\" === t.type && (s.clickEvent = t), r) {\n          var a = r._menu;\n\n          if (g(o).hasClass(Lt) && !(t && (\"click\" === t.type && /input|textarea/i.test(t.target.tagName) || \"keyup\" === t.type && 9 === t.which) && g.contains(o, t.target))) {\n            var l = g.Event(kt.HIDE, s);\n            g(o).trigger(l), l.isDefaultPrevented() || (\"ontouchstart\" in document.documentElement && g(document.body).children().off(\"mouseover\", null, g.noop), e[n].setAttribute(\"aria-expanded\", \"false\"), g(a).removeClass(Lt), g(o).removeClass(Lt).trigger(g.Event(kt.HIDDEN, s)));\n          }\n        }\n      }\n    }, c._getParentFromElement = function (t) {\n      var e,\n          n = _.getSelectorFromElement(t);\n\n      return n && (e = document.querySelector(n)), e || t.parentNode;\n    }, c._dataApiKeydownHandler = function (t) {\n      if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || g(t.target).closest(qt).length)) : Ot.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !g(this).hasClass(Pt))) {\n        var e = c._getParentFromElement(this),\n            n = g(e).hasClass(Lt);\n\n        if (n && (!n || 27 !== t.which && 32 !== t.which)) {\n          var i = [].slice.call(e.querySelectorAll(Kt));\n\n          if (0 !== i.length) {\n            var o = i.indexOf(t.target);\n            38 === t.which && 0 < o && o--, 40 === t.which && o < i.length - 1 && o++, o < 0 && (o = 0), i[o].focus();\n          }\n        } else {\n          if (27 === t.which) {\n            var r = e.querySelector(Ut);\n            g(r).trigger(\"focus\");\n          }\n\n          g(this).trigger(\"click\");\n        }\n      }\n    }, s(c, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return $t;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Gt;\n      }\n    }]), c;\n  }();\n\n  g(document).on(kt.KEYDOWN_DATA_API, Ut, Jt._dataApiKeydownHandler).on(kt.KEYDOWN_DATA_API, qt, Jt._dataApiKeydownHandler).on(kt.CLICK_DATA_API + \" \" + kt.KEYUP_DATA_API, Jt._clearMenus).on(kt.CLICK_DATA_API, Ut, function (t) {\n    t.preventDefault(), t.stopPropagation(), Jt._jQueryInterface.call(g(this), \"toggle\");\n  }).on(kt.CLICK_DATA_API, Wt, function (t) {\n    t.stopPropagation();\n  }), g.fn[It] = Jt._jQueryInterface, g.fn[It].Constructor = Jt, g.fn[It].noConflict = function () {\n    return g.fn[It] = Nt, Jt._jQueryInterface;\n  };\n\n  var Zt = \"modal\",\n      te = \"bs.modal\",\n      ee = \".\" + te,\n      ne = g.fn[Zt],\n      ie = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0,\n    show: !0\n  },\n      oe = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\",\n    show: \"boolean\"\n  },\n      re = {\n    HIDE: \"hide\" + ee,\n    HIDDEN: \"hidden\" + ee,\n    SHOW: \"show\" + ee,\n    SHOWN: \"shown\" + ee,\n    FOCUSIN: \"focusin\" + ee,\n    RESIZE: \"resize\" + ee,\n    CLICK_DISMISS: \"click.dismiss\" + ee,\n    KEYDOWN_DISMISS: \"keydown.dismiss\" + ee,\n    MOUSEUP_DISMISS: \"mouseup.dismiss\" + ee,\n    MOUSEDOWN_DISMISS: \"mousedown.dismiss\" + ee,\n    CLICK_DATA_API: \"click\" + ee + \".data-api\"\n  },\n      se = \"modal-dialog-scrollable\",\n      ae = \"modal-scrollbar-measure\",\n      le = \"modal-backdrop\",\n      ce = \"modal-open\",\n      he = \"fade\",\n      ue = \"show\",\n      fe = \".modal-dialog\",\n      de = \".modal-body\",\n      ge = '[data-toggle=\"modal\"]',\n      _e = '[data-dismiss=\"modal\"]',\n      me = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\",\n      pe = \".sticky-top\",\n      ve = function () {\n    function o(t, e) {\n      this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(fe), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0;\n    }\n\n    var t = o.prototype;\n    return t.toggle = function (t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }, t.show = function (t) {\n      var e = this;\n\n      if (!this._isShown && !this._isTransitioning) {\n        g(this._element).hasClass(he) && (this._isTransitioning = !0);\n        var n = g.Event(re.SHOW, {\n          relatedTarget: t\n        });\n        g(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), g(this._element).on(re.CLICK_DISMISS, _e, function (t) {\n          return e.hide(t);\n        }), g(this._dialog).on(re.MOUSEDOWN_DISMISS, function () {\n          g(e._element).one(re.MOUSEUP_DISMISS, function (t) {\n            g(t.target).is(e._element) && (e._ignoreBackdropClick = !0);\n          });\n        }), this._showBackdrop(function () {\n          return e._showElement(t);\n        }));\n      }\n    }, t.hide = function (t) {\n      var e = this;\n\n      if (t && t.preventDefault(), this._isShown && !this._isTransitioning) {\n        var n = g.Event(re.HIDE);\n\n        if (g(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {\n          this._isShown = !1;\n          var i = g(this._element).hasClass(he);\n\n          if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), g(document).off(re.FOCUSIN), g(this._element).removeClass(ue), g(this._element).off(re.CLICK_DISMISS), g(this._dialog).off(re.MOUSEDOWN_DISMISS), i) {\n            var o = _.getTransitionDurationFromElement(this._element);\n\n            g(this._element).one(_.TRANSITION_END, function (t) {\n              return e._hideModal(t);\n            }).emulateTransitionEnd(o);\n          } else this._hideModal();\n        }\n      }\n    }, t.dispose = function () {\n      [window, this._element, this._dialog].forEach(function (t) {\n        return g(t).off(ee);\n      }), g(document).off(re.FOCUSIN), g.removeData(this._element, te), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;\n    }, t.handleUpdate = function () {\n      this._adjustDialog();\n    }, t._getConfig = function (t) {\n      return t = l({}, ie, t), _.typeCheckConfig(Zt, t, oe), t;\n    }, t._showElement = function (t) {\n      var e = this,\n          n = g(this._element).hasClass(he);\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), g(this._dialog).hasClass(se) ? this._dialog.querySelector(de).scrollTop = 0 : this._element.scrollTop = 0, n && _.reflow(this._element), g(this._element).addClass(ue), this._config.focus && this._enforceFocus();\n\n      var i = g.Event(re.SHOWN, {\n        relatedTarget: t\n      }),\n          o = function o() {\n        e._config.focus && e._element.focus(), e._isTransitioning = !1, g(e._element).trigger(i);\n      };\n\n      if (n) {\n        var r = _.getTransitionDurationFromElement(this._dialog);\n\n        g(this._dialog).one(_.TRANSITION_END, o).emulateTransitionEnd(r);\n      } else o();\n    }, t._enforceFocus = function () {\n      var e = this;\n      g(document).off(re.FOCUSIN).on(re.FOCUSIN, function (t) {\n        document !== t.target && e._element !== t.target && 0 === g(e._element).has(t.target).length && e._element.focus();\n      });\n    }, t._setEscapeEvent = function () {\n      var e = this;\n      this._isShown && this._config.keyboard ? g(this._element).on(re.KEYDOWN_DISMISS, function (t) {\n        27 === t.which && (t.preventDefault(), e.hide());\n      }) : this._isShown || g(this._element).off(re.KEYDOWN_DISMISS);\n    }, t._setResizeEvent = function () {\n      var e = this;\n      this._isShown ? g(window).on(re.RESIZE, function (t) {\n        return e.handleUpdate(t);\n      }) : g(window).off(re.RESIZE);\n    }, t._hideModal = function () {\n      var t = this;\n      this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._isTransitioning = !1, this._showBackdrop(function () {\n        g(document.body).removeClass(ce), t._resetAdjustments(), t._resetScrollbar(), g(t._element).trigger(re.HIDDEN);\n      });\n    }, t._removeBackdrop = function () {\n      this._backdrop && (g(this._backdrop).remove(), this._backdrop = null);\n    }, t._showBackdrop = function (t) {\n      var e = this,\n          n = g(this._element).hasClass(he) ? he : \"\";\n\n      if (this._isShown && this._config.backdrop) {\n        if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = le, n && this._backdrop.classList.add(n), g(this._backdrop).appendTo(document.body), g(this._element).on(re.CLICK_DISMISS, function (t) {\n          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (\"static\" === e._config.backdrop ? e._element.focus() : e.hide());\n        }), n && _.reflow(this._backdrop), g(this._backdrop).addClass(ue), !t) return;\n        if (!n) return void t();\n\n        var i = _.getTransitionDurationFromElement(this._backdrop);\n\n        g(this._backdrop).one(_.TRANSITION_END, t).emulateTransitionEnd(i);\n      } else if (!this._isShown && this._backdrop) {\n        g(this._backdrop).removeClass(ue);\n\n        var o = function o() {\n          e._removeBackdrop(), t && t();\n        };\n\n        if (g(this._element).hasClass(he)) {\n          var r = _.getTransitionDurationFromElement(this._backdrop);\n\n          g(this._backdrop).one(_.TRANSITION_END, o).emulateTransitionEnd(r);\n        } else o();\n      } else t && t();\n    }, t._adjustDialog = function () {\n      var t = this._element.scrollHeight > document.documentElement.clientHeight;\n      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n    }, t._resetAdjustments = function () {\n      this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }, t._checkScrollbar = function () {\n      var t = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n    }, t._setScrollbar = function () {\n      var o = this;\n\n      if (this._isBodyOverflowing) {\n        var t = [].slice.call(document.querySelectorAll(me)),\n            e = [].slice.call(document.querySelectorAll(pe));\n        g(t).each(function (t, e) {\n          var n = e.style.paddingRight,\n              i = g(e).css(\"padding-right\");\n          g(e).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + o._scrollbarWidth + \"px\");\n        }), g(e).each(function (t, e) {\n          var n = e.style.marginRight,\n              i = g(e).css(\"margin-right\");\n          g(e).data(\"margin-right\", n).css(\"margin-right\", parseFloat(i) - o._scrollbarWidth + \"px\");\n        });\n        var n = document.body.style.paddingRight,\n            i = g(document.body).css(\"padding-right\");\n        g(document.body).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + this._scrollbarWidth + \"px\");\n      }\n\n      g(document.body).addClass(ce);\n    }, t._resetScrollbar = function () {\n      var t = [].slice.call(document.querySelectorAll(me));\n      g(t).each(function (t, e) {\n        var n = g(e).data(\"padding-right\");\n        g(e).removeData(\"padding-right\"), e.style.paddingRight = n || \"\";\n      });\n      var e = [].slice.call(document.querySelectorAll(\"\" + pe));\n      g(e).each(function (t, e) {\n        var n = g(e).data(\"margin-right\");\n        \"undefined\" != typeof n && g(e).css(\"margin-right\", n).removeData(\"margin-right\");\n      });\n      var n = g(document.body).data(\"padding-right\");\n      g(document.body).removeData(\"padding-right\"), document.body.style.paddingRight = n || \"\";\n    }, t._getScrollbarWidth = function () {\n      var t = document.createElement(\"div\");\n      t.className = ae, document.body.appendChild(t);\n      var e = t.getBoundingClientRect().width - t.clientWidth;\n      return document.body.removeChild(t), e;\n    }, o._jQueryInterface = function (n, i) {\n      return this.each(function () {\n        var t = g(this).data(te),\n            e = l({}, ie, g(this).data(), \"object\" == _typeof(n) && n ? n : {});\n\n        if (t || (t = new o(this, e), g(this).data(te, t)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n](i);\n        } else e.show && t.show(i);\n      });\n    }, s(o, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ie;\n      }\n    }]), o;\n  }();\n\n  g(document).on(re.CLICK_DATA_API, ge, function (t) {\n    var e,\n        n = this,\n        i = _.getSelectorFromElement(this);\n\n    i && (e = document.querySelector(i));\n    var o = g(e).data(te) ? \"toggle\" : l({}, g(e).data(), g(this).data());\n    \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault();\n    var r = g(e).one(re.SHOW, function (t) {\n      t.isDefaultPrevented() || r.one(re.HIDDEN, function () {\n        g(n).is(\":visible\") && n.focus();\n      });\n    });\n\n    ve._jQueryInterface.call(g(e), o, this);\n  }), g.fn[Zt] = ve._jQueryInterface, g.fn[Zt].Constructor = ve, g.fn[Zt].noConflict = function () {\n    return g.fn[Zt] = ne, ve._jQueryInterface;\n  };\n  var ye = [\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"],\n      Ee = {\n    \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i],\n    a: [\"target\", \"href\", \"title\", \"rel\"],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\"src\", \"alt\", \"title\", \"width\", \"height\"],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  },\n      Ce = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,\n      Te = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;\n\n  function Se(t, s, e) {\n    if (0 === t.length) return t;\n    if (e && \"function\" == typeof e) return e(t);\n\n    for (var n = new window.DOMParser().parseFromString(t, \"text/html\"), a = Object.keys(s), l = [].slice.call(n.body.querySelectorAll(\"*\")), i = function i(t, e) {\n      var n = l[t],\n          i = n.nodeName.toLowerCase();\n      if (-1 === a.indexOf(n.nodeName.toLowerCase())) return n.parentNode.removeChild(n), \"continue\";\n      var o = [].slice.call(n.attributes),\n          r = [].concat(s[\"*\"] || [], s[i] || []);\n      o.forEach(function (t) {\n        (function (t, e) {\n          var n = t.nodeName.toLowerCase();\n          if (-1 !== e.indexOf(n)) return -1 === ye.indexOf(n) || Boolean(t.nodeValue.match(Ce) || t.nodeValue.match(Te));\n\n          for (var i = e.filter(function (t) {\n            return t instanceof RegExp;\n          }), o = 0, r = i.length; o < r; o++) {\n            if (n.match(i[o])) return !0;\n          }\n\n          return !1;\n        })(t, r) || n.removeAttribute(t.nodeName);\n      });\n    }, o = 0, r = l.length; o < r; o++) {\n      i(o);\n    }\n\n    return n.body.innerHTML;\n  }\n\n  var be = \"tooltip\",\n      Ie = \"bs.tooltip\",\n      De = \".\" + Ie,\n      we = g.fn[be],\n      Ae = \"bs-tooltip\",\n      Ne = new RegExp(\"(^|\\\\s)\" + Ae + \"\\\\S+\", \"g\"),\n      Oe = [\"sanitize\", \"whiteList\", \"sanitizeFn\"],\n      ke = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(number|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacement: \"(string|array)\",\n    boundary: \"(string|element)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    whiteList: \"object\"\n  },\n      Pe = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: \"left\"\n  },\n      Le = {\n    animation: !0,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: 0,\n    container: !1,\n    fallbackPlacement: \"flip\",\n    boundary: \"scrollParent\",\n    sanitize: !0,\n    sanitizeFn: null,\n    whiteList: Ee\n  },\n      je = \"show\",\n      He = \"out\",\n      Re = {\n    HIDE: \"hide\" + De,\n    HIDDEN: \"hidden\" + De,\n    SHOW: \"show\" + De,\n    SHOWN: \"shown\" + De,\n    INSERTED: \"inserted\" + De,\n    CLICK: \"click\" + De,\n    FOCUSIN: \"focusin\" + De,\n    FOCUSOUT: \"focusout\" + De,\n    MOUSEENTER: \"mouseenter\" + De,\n    MOUSELEAVE: \"mouseleave\" + De\n  },\n      xe = \"fade\",\n      Fe = \"show\",\n      Ue = \".tooltip-inner\",\n      We = \".arrow\",\n      qe = \"hover\",\n      Me = \"focus\",\n      Ke = \"click\",\n      Qe = \"manual\",\n      Be = function () {\n    function i(t, e) {\n      if (\"undefined\" == typeof u) throw new TypeError(\"Bootstrap's tooltips require Popper.js (https://popper.js.org/)\");\n      this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n\n    var t = i.prototype;\n    return t.enable = function () {\n      this._isEnabled = !0;\n    }, t.disable = function () {\n      this._isEnabled = !1;\n    }, t.toggleEnabled = function () {\n      this._isEnabled = !this._isEnabled;\n    }, t.toggle = function (t) {\n      if (this._isEnabled) if (t) {\n        var e = this.constructor.DATA_KEY,\n            n = g(t.currentTarget).data(e);\n        n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), g(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);\n      } else {\n        if (g(this.getTipElement()).hasClass(Fe)) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }, t.dispose = function () {\n      clearTimeout(this._timeout), g.removeData(this.element, this.constructor.DATA_KEY), g(this.element).off(this.constructor.EVENT_KEY), g(this.element).closest(\".modal\").off(\"hide.bs.modal\"), this.tip && g(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;\n    }, t.show = function () {\n      var e = this;\n      if (\"none\" === g(this.element).css(\"display\")) throw new Error(\"Please use show on visible elements\");\n      var t = g.Event(this.constructor.Event.SHOW);\n\n      if (this.isWithContent() && this._isEnabled) {\n        g(this.element).trigger(t);\n\n        var n = _.findShadowRoot(this.element),\n            i = g.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);\n\n        if (t.isDefaultPrevented() || !i) return;\n\n        var o = this.getTipElement(),\n            r = _.getUID(this.constructor.NAME);\n\n        o.setAttribute(\"id\", r), this.element.setAttribute(\"aria-describedby\", r), this.setContent(), this.config.animation && g(o).addClass(xe);\n\n        var s = \"function\" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,\n            a = this._getAttachment(s);\n\n        this.addAttachmentClass(a);\n\n        var l = this._getContainer();\n\n        g(o).data(this.constructor.DATA_KEY, this), g.contains(this.element.ownerDocument.documentElement, this.tip) || g(o).appendTo(l), g(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new u(this.element, o, {\n          placement: a,\n          modifiers: {\n            offset: this._getOffset(),\n            flip: {\n              behavior: this.config.fallbackPlacement\n            },\n            arrow: {\n              element: We\n            },\n            preventOverflow: {\n              boundariesElement: this.config.boundary\n            }\n          },\n          onCreate: function onCreate(t) {\n            t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);\n          },\n          onUpdate: function onUpdate(t) {\n            return e._handlePopperPlacementChange(t);\n          }\n        }), g(o).addClass(Fe), \"ontouchstart\" in document.documentElement && g(document.body).children().on(\"mouseover\", null, g.noop);\n\n        var c = function c() {\n          e.config.animation && e._fixTransition();\n          var t = e._hoverState;\n          e._hoverState = null, g(e.element).trigger(e.constructor.Event.SHOWN), t === He && e._leave(null, e);\n        };\n\n        if (g(this.tip).hasClass(xe)) {\n          var h = _.getTransitionDurationFromElement(this.tip);\n\n          g(this.tip).one(_.TRANSITION_END, c).emulateTransitionEnd(h);\n        } else c();\n      }\n    }, t.hide = function (t) {\n      var e = this,\n          n = this.getTipElement(),\n          i = g.Event(this.constructor.Event.HIDE),\n          o = function o() {\n        e._hoverState !== je && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute(\"aria-describedby\"), g(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();\n      };\n\n      if (g(this.element).trigger(i), !i.isDefaultPrevented()) {\n        if (g(n).removeClass(Fe), \"ontouchstart\" in document.documentElement && g(document.body).children().off(\"mouseover\", null, g.noop), this._activeTrigger[Ke] = !1, this._activeTrigger[Me] = !1, this._activeTrigger[qe] = !1, g(this.tip).hasClass(xe)) {\n          var r = _.getTransitionDurationFromElement(n);\n\n          g(n).one(_.TRANSITION_END, o).emulateTransitionEnd(r);\n        } else o();\n\n        this._hoverState = \"\";\n      }\n    }, t.update = function () {\n      null !== this._popper && this._popper.scheduleUpdate();\n    }, t.isWithContent = function () {\n      return Boolean(this.getTitle());\n    }, t.addAttachmentClass = function (t) {\n      g(this.getTipElement()).addClass(Ae + \"-\" + t);\n    }, t.getTipElement = function () {\n      return this.tip = this.tip || g(this.config.template)[0], this.tip;\n    }, t.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(g(t.querySelectorAll(Ue)), this.getTitle()), g(t).removeClass(xe + \" \" + Fe);\n    }, t.setElementContent = function (t, e) {\n      \"object\" != _typeof(e) || !e.nodeType && !e.jquery ? this.config.html ? (this.config.sanitize && (e = Se(e, this.config.whiteList, this.config.sanitizeFn)), t.html(e)) : t.text(e) : this.config.html ? g(e).parent().is(t) || t.empty().append(e) : t.text(g(e).text());\n    }, t.getTitle = function () {\n      var t = this.element.getAttribute(\"data-original-title\");\n      return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;\n    }, t._getOffset = function () {\n      var e = this,\n          t = {};\n      return \"function\" == typeof this.config.offset ? t.fn = function (t) {\n        return t.offsets = l({}, t.offsets, e.config.offset(t.offsets, e.element) || {}), t;\n      } : t.offset = this.config.offset, t;\n    }, t._getContainer = function () {\n      return !1 === this.config.container ? document.body : _.isElement(this.config.container) ? g(this.config.container) : g(document).find(this.config.container);\n    }, t._getAttachment = function (t) {\n      return Pe[t.toUpperCase()];\n    }, t._setListeners = function () {\n      var i = this;\n      this.config.trigger.split(\" \").forEach(function (t) {\n        if (\"click\" === t) g(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {\n          return i.toggle(t);\n        });else if (t !== Qe) {\n          var e = t === qe ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,\n              n = t === qe ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;\n          g(i.element).on(e, i.config.selector, function (t) {\n            return i._enter(t);\n          }).on(n, i.config.selector, function (t) {\n            return i._leave(t);\n          });\n        }\n      }), g(this.element).closest(\".modal\").on(\"hide.bs.modal\", function () {\n        i.element && i.hide();\n      }), this.config.selector ? this.config = l({}, this.config, {\n        trigger: \"manual\",\n        selector: \"\"\n      }) : this._fixTitle();\n    }, t._fixTitle = function () {\n      var t = _typeof(this.element.getAttribute(\"data-original-title\"));\n\n      (this.element.getAttribute(\"title\") || \"string\" !== t) && (this.element.setAttribute(\"data-original-title\", this.element.getAttribute(\"title\") || \"\"), this.element.setAttribute(\"title\", \"\"));\n    }, t._enter = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || g(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), g(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusin\" === t.type ? Me : qe] = !0), g(e.getTipElement()).hasClass(Fe) || e._hoverState === je ? e._hoverState = je : (clearTimeout(e._timeout), e._hoverState = je, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n        e._hoverState === je && e.show();\n      }, e.config.delay.show) : e.show());\n    }, t._leave = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || g(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), g(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusout\" === t.type ? Me : qe] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = He, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n        e._hoverState === He && e.hide();\n      }, e.config.delay.hide) : e.hide());\n    }, t._isWithActiveTrigger = function () {\n      for (var t in this._activeTrigger) {\n        if (this._activeTrigger[t]) return !0;\n      }\n\n      return !1;\n    }, t._getConfig = function (t) {\n      var e = g(this.element).data();\n      return Object.keys(e).forEach(function (t) {\n        -1 !== Oe.indexOf(t) && delete e[t];\n      }), \"number\" == typeof (t = l({}, this.constructor.Default, e, \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), _.typeCheckConfig(be, t, this.constructor.DefaultType), t.sanitize && (t.template = Se(t.template, t.whiteList, t.sanitizeFn)), t;\n    }, t._getDelegateConfig = function () {\n      var t = {};\n      if (this.config) for (var e in this.config) {\n        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n      }\n      return t;\n    }, t._cleanTipClass = function () {\n      var t = g(this.getTipElement()),\n          e = t.attr(\"class\").match(Ne);\n      null !== e && e.length && t.removeClass(e.join(\"\"));\n    }, t._handlePopperPlacementChange = function (t) {\n      var e = t.instance;\n      this.tip = e.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));\n    }, t._fixTransition = function () {\n      var t = this.getTipElement(),\n          e = this.config.animation;\n      null === t.getAttribute(\"x-placement\") && (g(t).removeClass(xe), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = g(this).data(Ie),\n            e = \"object\" == _typeof(n) && n;\n\n        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), g(this).data(Ie, t)), \"string\" == typeof n)) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Le;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return be;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Ie;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Re;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return De;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return ke;\n      }\n    }]), i;\n  }();\n\n  g.fn[be] = Be._jQueryInterface, g.fn[be].Constructor = Be, g.fn[be].noConflict = function () {\n    return g.fn[be] = we, Be._jQueryInterface;\n  };\n\n  var Ve = \"popover\",\n      Ye = \"bs.popover\",\n      ze = \".\" + Ye,\n      Xe = g.fn[Ve],\n      $e = \"bs-popover\",\n      Ge = new RegExp(\"(^|\\\\s)\" + $e + \"\\\\S+\", \"g\"),\n      Je = l({}, Be.Default, {\n    placement: \"right\",\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n  }),\n      Ze = l({}, Be.DefaultType, {\n    content: \"(string|element|function)\"\n  }),\n      tn = \"fade\",\n      en = \"show\",\n      nn = \".popover-header\",\n      on = \".popover-body\",\n      rn = {\n    HIDE: \"hide\" + ze,\n    HIDDEN: \"hidden\" + ze,\n    SHOW: \"show\" + ze,\n    SHOWN: \"shown\" + ze,\n    INSERTED: \"inserted\" + ze,\n    CLICK: \"click\" + ze,\n    FOCUSIN: \"focusin\" + ze,\n    FOCUSOUT: \"focusout\" + ze,\n    MOUSEENTER: \"mouseenter\" + ze,\n    MOUSELEAVE: \"mouseleave\" + ze\n  },\n      sn = function (t) {\n    var e, n;\n\n    function i() {\n      return t.apply(this, arguments) || this;\n    }\n\n    n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;\n    var o = i.prototype;\n    return o.isWithContent = function () {\n      return this.getTitle() || this._getContent();\n    }, o.addAttachmentClass = function (t) {\n      g(this.getTipElement()).addClass($e + \"-\" + t);\n    }, o.getTipElement = function () {\n      return this.tip = this.tip || g(this.config.template)[0], this.tip;\n    }, o.setContent = function () {\n      var t = g(this.getTipElement());\n      this.setElementContent(t.find(nn), this.getTitle());\n\n      var e = this._getContent();\n\n      \"function\" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(on), e), t.removeClass(tn + \" \" + en);\n    }, o._getContent = function () {\n      return this.element.getAttribute(\"data-content\") || this.config.content;\n    }, o._cleanTipClass = function () {\n      var t = g(this.getTipElement()),\n          e = t.attr(\"class\").match(Ge);\n      null !== e && 0 < e.length && t.removeClass(e.join(\"\"));\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = g(this).data(Ye),\n            e = \"object\" == _typeof(n) ? n : null;\n\n        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), g(this).data(Ye, t)), \"string\" == typeof n)) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Je;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return Ve;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Ye;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return rn;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return ze;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Ze;\n      }\n    }]), i;\n  }(Be);\n\n  g.fn[Ve] = sn._jQueryInterface, g.fn[Ve].Constructor = sn, g.fn[Ve].noConflict = function () {\n    return g.fn[Ve] = Xe, sn._jQueryInterface;\n  };\n\n  var an = \"scrollspy\",\n      ln = \"bs.scrollspy\",\n      cn = \".\" + ln,\n      hn = g.fn[an],\n      un = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n  },\n      fn = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n  },\n      dn = {\n    ACTIVATE: \"activate\" + cn,\n    SCROLL: \"scroll\" + cn,\n    LOAD_DATA_API: \"load\" + cn + \".data-api\"\n  },\n      gn = \"dropdown-item\",\n      _n = \"active\",\n      mn = '[data-spy=\"scroll\"]',\n      pn = \".nav, .list-group\",\n      vn = \".nav-link\",\n      yn = \".nav-item\",\n      En = \".list-group-item\",\n      Cn = \".dropdown\",\n      Tn = \".dropdown-item\",\n      Sn = \".dropdown-toggle\",\n      bn = \"offset\",\n      In = \"position\",\n      Dn = function () {\n    function n(t, e) {\n      var n = this;\n      this._element = t, this._scrollElement = \"BODY\" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + \" \" + vn + \",\" + this._config.target + \" \" + En + \",\" + this._config.target + \" \" + Tn, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, g(this._scrollElement).on(dn.SCROLL, function (t) {\n        return n._process(t);\n      }), this.refresh(), this._process();\n    }\n\n    var t = n.prototype;\n    return t.refresh = function () {\n      var e = this,\n          t = this._scrollElement === this._scrollElement.window ? bn : In,\n          o = \"auto\" === this._config.method ? t : this._config.method,\n          r = o === In ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (t) {\n        var e,\n            n = _.getSelectorFromElement(t);\n\n        if (n && (e = document.querySelector(n)), e) {\n          var i = e.getBoundingClientRect();\n          if (i.width || i.height) return [g(e)[o]().top + r, n];\n        }\n\n        return null;\n      }).filter(function (t) {\n        return t;\n      }).sort(function (t, e) {\n        return t[0] - e[0];\n      }).forEach(function (t) {\n        e._offsets.push(t[0]), e._targets.push(t[1]);\n      });\n    }, t.dispose = function () {\n      g.removeData(this._element, ln), g(this._scrollElement).off(cn), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n    }, t._getConfig = function (t) {\n      if (\"string\" != typeof (t = l({}, un, \"object\" == _typeof(t) && t ? t : {})).target) {\n        var e = g(t.target).attr(\"id\");\n        e || (e = _.getUID(an), g(t.target).attr(\"id\", e)), t.target = \"#\" + e;\n      }\n\n      return _.typeCheckConfig(an, t, fn), t;\n    }, t._getScrollTop = function () {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }, t._getScrollHeight = function () {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }, t._getOffsetHeight = function () {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }, t._process = function () {\n      var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), n <= t) {\n        var i = this._targets[this._targets.length - 1];\n        this._activeTarget !== i && this._activate(i);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();\n\n        for (var o = this._offsets.length; o--;) {\n          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (\"undefined\" == typeof this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);\n        }\n      }\n    }, t._activate = function (e) {\n      this._activeTarget = e, this._clear();\n\n      var t = this._selector.split(\",\").map(function (t) {\n        return t + '[data-target=\"' + e + '\"],' + t + '[href=\"' + e + '\"]';\n      }),\n          n = g([].slice.call(document.querySelectorAll(t.join(\",\"))));\n\n      n.hasClass(gn) ? (n.closest(Cn).find(Sn).addClass(_n), n.addClass(_n)) : (n.addClass(_n), n.parents(pn).prev(vn + \", \" + En).addClass(_n), n.parents(pn).prev(yn).children(vn).addClass(_n)), g(this._scrollElement).trigger(dn.ACTIVATE, {\n        relatedTarget: e\n      });\n    }, t._clear = function () {\n      [].slice.call(document.querySelectorAll(this._selector)).filter(function (t) {\n        return t.classList.contains(_n);\n      }).forEach(function (t) {\n        return t.classList.remove(_n);\n      });\n    }, n._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = g(this).data(ln);\n\n        if (t || (t = new n(this, \"object\" == _typeof(e) && e), g(this).data(ln, t)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n          t[e]();\n        }\n      });\n    }, s(n, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return un;\n      }\n    }]), n;\n  }();\n\n  g(window).on(dn.LOAD_DATA_API, function () {\n    for (var t = [].slice.call(document.querySelectorAll(mn)), e = t.length; e--;) {\n      var n = g(t[e]);\n\n      Dn._jQueryInterface.call(n, n.data());\n    }\n  }), g.fn[an] = Dn._jQueryInterface, g.fn[an].Constructor = Dn, g.fn[an].noConflict = function () {\n    return g.fn[an] = hn, Dn._jQueryInterface;\n  };\n\n  var wn = \"bs.tab\",\n      An = \".\" + wn,\n      Nn = g.fn.tab,\n      On = {\n    HIDE: \"hide\" + An,\n    HIDDEN: \"hidden\" + An,\n    SHOW: \"show\" + An,\n    SHOWN: \"shown\" + An,\n    CLICK_DATA_API: \"click\" + An + \".data-api\"\n  },\n      kn = \"dropdown-menu\",\n      Pn = \"active\",\n      Ln = \"disabled\",\n      jn = \"fade\",\n      Hn = \"show\",\n      Rn = \".dropdown\",\n      xn = \".nav, .list-group\",\n      Fn = \".active\",\n      Un = \"> li > .active\",\n      Wn = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]',\n      qn = \".dropdown-toggle\",\n      Mn = \"> .dropdown-menu .active\",\n      Kn = function () {\n    function i(t) {\n      this._element = t;\n    }\n\n    var t = i.prototype;\n    return t.show = function () {\n      var n = this;\n\n      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && g(this._element).hasClass(Pn) || g(this._element).hasClass(Ln))) {\n        var t,\n            i,\n            e = g(this._element).closest(xn)[0],\n            o = _.getSelectorFromElement(this._element);\n\n        if (e) {\n          var r = \"UL\" === e.nodeName || \"OL\" === e.nodeName ? Un : Fn;\n          i = (i = g.makeArray(g(e).find(r)))[i.length - 1];\n        }\n\n        var s = g.Event(On.HIDE, {\n          relatedTarget: this._element\n        }),\n            a = g.Event(On.SHOW, {\n          relatedTarget: i\n        });\n\n        if (i && g(i).trigger(s), g(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {\n          o && (t = document.querySelector(o)), this._activate(this._element, e);\n\n          var l = function l() {\n            var t = g.Event(On.HIDDEN, {\n              relatedTarget: n._element\n            }),\n                e = g.Event(On.SHOWN, {\n              relatedTarget: i\n            });\n            g(i).trigger(t), g(n._element).trigger(e);\n          };\n\n          t ? this._activate(t, t.parentNode, l) : l();\n        }\n      }\n    }, t.dispose = function () {\n      g.removeData(this._element, wn), this._element = null;\n    }, t._activate = function (t, e, n) {\n      var i = this,\n          o = (!e || \"UL\" !== e.nodeName && \"OL\" !== e.nodeName ? g(e).children(Fn) : g(e).find(Un))[0],\n          r = n && o && g(o).hasClass(jn),\n          s = function s() {\n        return i._transitionComplete(t, o, n);\n      };\n\n      if (o && r) {\n        var a = _.getTransitionDurationFromElement(o);\n\n        g(o).removeClass(Hn).one(_.TRANSITION_END, s).emulateTransitionEnd(a);\n      } else s();\n    }, t._transitionComplete = function (t, e, n) {\n      if (e) {\n        g(e).removeClass(Pn);\n        var i = g(e.parentNode).find(Mn)[0];\n        i && g(i).removeClass(Pn), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n      }\n\n      if (g(t).addClass(Pn), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), _.reflow(t), t.classList.contains(jn) && t.classList.add(Hn), t.parentNode && g(t.parentNode).hasClass(kn)) {\n        var o = g(t).closest(Rn)[0];\n\n        if (o) {\n          var r = [].slice.call(o.querySelectorAll(qn));\n          g(r).addClass(Pn);\n        }\n\n        t.setAttribute(\"aria-expanded\", !0);\n      }\n\n      n && n();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = g(this),\n            e = t.data(wn);\n\n        if (e || (e = new i(this), t.data(wn, e)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof e[n]) throw new TypeError('No method named \"' + n + '\"');\n          e[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), i;\n  }();\n\n  g(document).on(On.CLICK_DATA_API, Wn, function (t) {\n    t.preventDefault(), Kn._jQueryInterface.call(g(this), \"show\");\n  }), g.fn.tab = Kn._jQueryInterface, g.fn.tab.Constructor = Kn, g.fn.tab.noConflict = function () {\n    return g.fn.tab = Nn, Kn._jQueryInterface;\n  };\n\n  var Qn = \"toast\",\n      Bn = \"bs.toast\",\n      Vn = \".\" + Bn,\n      Yn = g.fn[Qn],\n      zn = {\n    CLICK_DISMISS: \"click.dismiss\" + Vn,\n    HIDE: \"hide\" + Vn,\n    HIDDEN: \"hidden\" + Vn,\n    SHOW: \"show\" + Vn,\n    SHOWN: \"shown\" + Vn\n  },\n      Xn = \"fade\",\n      $n = \"hide\",\n      Gn = \"show\",\n      Jn = \"showing\",\n      Zn = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n  },\n      ti = {\n    animation: !0,\n    autohide: !0,\n    delay: 500\n  },\n      ei = '[data-dismiss=\"toast\"]',\n      ni = function () {\n    function i(t, e) {\n      this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners();\n    }\n\n    var t = i.prototype;\n    return t.show = function () {\n      var t = this;\n      g(this._element).trigger(zn.SHOW), this._config.animation && this._element.classList.add(Xn);\n\n      var e = function e() {\n        t._element.classList.remove(Jn), t._element.classList.add(Gn), g(t._element).trigger(zn.SHOWN), t._config.autohide && t.hide();\n      };\n\n      if (this._element.classList.remove($n), this._element.classList.add(Jn), this._config.animation) {\n        var n = _.getTransitionDurationFromElement(this._element);\n\n        g(this._element).one(_.TRANSITION_END, e).emulateTransitionEnd(n);\n      } else e();\n    }, t.hide = function (t) {\n      var e = this;\n      this._element.classList.contains(Gn) && (g(this._element).trigger(zn.HIDE), t ? this._close() : this._timeout = setTimeout(function () {\n        e._close();\n      }, this._config.delay));\n    }, t.dispose = function () {\n      clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(Gn) && this._element.classList.remove(Gn), g(this._element).off(zn.CLICK_DISMISS), g.removeData(this._element, Bn), this._element = null, this._config = null;\n    }, t._getConfig = function (t) {\n      return t = l({}, ti, g(this._element).data(), \"object\" == _typeof(t) && t ? t : {}), _.typeCheckConfig(Qn, t, this.constructor.DefaultType), t;\n    }, t._setListeners = function () {\n      var t = this;\n      g(this._element).on(zn.CLICK_DISMISS, ei, function () {\n        return t.hide(!0);\n      });\n    }, t._close = function () {\n      var t = this,\n          e = function e() {\n        t._element.classList.add($n), g(t._element).trigger(zn.HIDDEN);\n      };\n\n      if (this._element.classList.remove(Gn), this._config.animation) {\n        var n = _.getTransitionDurationFromElement(this._element);\n\n        g(this._element).one(_.TRANSITION_END, e).emulateTransitionEnd(n);\n      } else e();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = g(this),\n            e = t.data(Bn);\n\n        if (e || (e = new i(this, \"object\" == _typeof(n) && n), t.data(Bn, e)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof e[n]) throw new TypeError('No method named \"' + n + '\"');\n          e[n](this);\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Zn;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ti;\n      }\n    }]), i;\n  }();\n\n  g.fn[Qn] = ni._jQueryInterface, g.fn[Qn].Constructor = ni, g.fn[Qn].noConflict = function () {\n    return g.fn[Qn] = Yn, ni._jQueryInterface;\n  }, function () {\n    if (\"undefined\" == typeof g) throw new TypeError(\"Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.\");\n    var t = g.fn.jquery.split(\" \")[0].split(\".\");\n    if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || 4 <= t[0]) throw new Error(\"Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0\");\n  }(), t.Util = _, t.Alert = p, t.Button = P, t.Carousel = lt, t.Collapse = bt, t.Dropdown = Jt, t.Modal = ve, t.Popover = sn, t.Scrollspy = Dn, t.Tab = Kn, t.Toast = ni, t.Tooltip = Be, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/core/bootstrap.min.js\n");

/***/ }),

/***/ "./resources/js/core/jquery.min.js":
/*!*****************************************!*\
  !*** ./resources/js/core/jquery.min.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */\n!function (a, b) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}(\"undefined\" != typeof window ? window : this, function (a, b) {\n  \"use strict\";\n\n  var c = [],\n      d = a.document,\n      e = Object.getPrototypeOf,\n      f = c.slice,\n      g = c.concat,\n      h = c.push,\n      i = c.indexOf,\n      j = {},\n      k = j.toString,\n      l = j.hasOwnProperty,\n      m = l.toString,\n      n = m.call(Object),\n      o = {};\n\n  function p(a, b) {\n    b = b || d;\n    var c = b.createElement(\"script\");\n    c.text = a, b.head.appendChild(c).parentNode.removeChild(c);\n  }\n\n  var q = \"3.2.1\",\n      r = function r(a, b) {\n    return new r.fn.init(a, b);\n  },\n      s = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      t = /^-ms-/,\n      u = /-([a-z])/g,\n      v = function v(a, b) {\n    return b.toUpperCase();\n  };\n\n  r.fn = r.prototype = {\n    jquery: q,\n    constructor: r,\n    length: 0,\n    toArray: function toArray() {\n      return f.call(this);\n    },\n    get: function get(a) {\n      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];\n    },\n    pushStack: function pushStack(a) {\n      var b = r.merge(this.constructor(), a);\n      return b.prevObject = this, b;\n    },\n    each: function each(a) {\n      return r.each(this, a);\n    },\n    map: function map(a) {\n      return this.pushStack(r.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(f.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(a) {\n      var b = this.length,\n          c = +a + (a < 0 ? b : 0);\n      return this.pushStack(c >= 0 && c < b ? [this[c]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: h,\n    sort: c.sort,\n    splice: c.splice\n  }, r.extend = r.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == _typeof(g) || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {\n      if (null != (a = arguments[h])) for (b in a) {\n        c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));\n      }\n    }\n\n    return g;\n  }, r.extend({\n    expando: \"jQuery\" + (q + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(a) {\n      throw new Error(a);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(a) {\n      return \"function\" === r.type(a);\n    },\n    isWindow: function isWindow(a) {\n      return null != a && a === a.window;\n    },\n    isNumeric: function isNumeric(a) {\n      var b = r.type(a);\n      return (\"number\" === b || \"string\" === b) && !isNaN(a - parseFloat(a));\n    },\n    isPlainObject: function isPlainObject(a) {\n      var b, c;\n      return !(!a || \"[object Object]\" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, \"constructor\") && b.constructor, \"function\" == typeof c && m.call(c) === n));\n    },\n    isEmptyObject: function isEmptyObject(a) {\n      var b;\n\n      for (b in a) {\n        return !1;\n      }\n\n      return !0;\n    },\n    type: function type(a) {\n      return null == a ? a + \"\" : \"object\" == _typeof(a) || \"function\" == typeof a ? j[k.call(a)] || \"object\" : _typeof(a);\n    },\n    globalEval: function globalEval(a) {\n      p(a);\n    },\n    camelCase: function camelCase(a) {\n      return a.replace(t, \"ms-\").replace(u, v);\n    },\n    each: function each(a, b) {\n      var c,\n          d = 0;\n\n      if (w(a)) {\n        for (c = a.length; d < c; d++) {\n          if (b.call(a[d], d, a[d]) === !1) break;\n        }\n      } else for (d in a) {\n        if (b.call(a[d], d, a[d]) === !1) break;\n      }\n\n      return a;\n    },\n    trim: function trim(a) {\n      return null == a ? \"\" : (a + \"\").replace(s, \"\");\n    },\n    makeArray: function makeArray(a, b) {\n      var c = b || [];\n      return null != a && (w(Object(a)) ? r.merge(c, \"string\" == typeof a ? [a] : a) : h.call(c, a)), c;\n    },\n    inArray: function inArray(a, b, c) {\n      return null == b ? -1 : i.call(b, a, c);\n    },\n    merge: function merge(a, b) {\n      for (var c = +b.length, d = 0, e = a.length; d < c; d++) {\n        a[e++] = b[d];\n      }\n\n      return a.length = e, a;\n    },\n    grep: function grep(a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {\n        d = !b(a[f], f), d !== h && e.push(a[f]);\n      }\n\n      return e;\n    },\n    map: function map(a, b, c) {\n      var d,\n          e,\n          f = 0,\n          h = [];\n      if (w(a)) for (d = a.length; f < d; f++) {\n        e = b(a[f], f, c), null != e && h.push(e);\n      } else for (f in a) {\n        e = b(a[f], f, c), null != e && h.push(e);\n      }\n      return g.apply([], h);\n    },\n    guid: 1,\n    proxy: function proxy(a, b) {\n      var c, d, e;\n      if (\"string\" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function e() {\n        return a.apply(b || this, d.concat(f.call(arguments)));\n      }, e.guid = a.guid = a.guid || r.guid++, e;\n    },\n    now: Date.now,\n    support: o\n  }), \"function\" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (a, b) {\n    j[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function w(a) {\n    var b = !!a && \"length\" in a && a.length,\n        c = r.type(a);\n    return \"function\" !== c && !r.isWindow(a) && (\"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a);\n  }\n\n  var x = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + 1 * new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = ha(),\n        z = ha(),\n        A = ha(),\n        B = function B(a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = {}.hasOwnProperty,\n        D = [],\n        E = D.pop,\n        F = D.push,\n        G = D.push,\n        H = D.slice,\n        I = function I(a, b) {\n      for (var c = 0, d = a.length; c < d; c++) {\n        if (a[c] === b) return c;\n      }\n\n      return -1;\n    },\n        J = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        K = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        L = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n        M = \"\\\\[\" + K + \"*(\" + L + \")(?:\" + K + \"*([*^$|!~]?=)\" + K + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + L + \"))|)\" + K + \"*\\\\]\",\n        N = \":(\" + L + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + M + \")*)|.*)\\\\)|)\",\n        O = new RegExp(K + \"+\", \"g\"),\n        P = new RegExp(\"^\" + K + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + K + \"+$\", \"g\"),\n        Q = new RegExp(\"^\" + K + \"*,\" + K + \"*\"),\n        R = new RegExp(\"^\" + K + \"*([>+~]|\" + K + \")\" + K + \"*\"),\n        S = new RegExp(\"=\" + K + \"*([^\\\\]'\\\"]*?)\" + K + \"*\\\\]\", \"g\"),\n        T = new RegExp(N),\n        U = new RegExp(\"^\" + L + \"$\"),\n        V = {\n      ID: new RegExp(\"^#(\" + L + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + L + \")\"),\n      TAG: new RegExp(\"^(\" + L + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + M),\n      PSEUDO: new RegExp(\"^\" + N),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + K + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + K + \"*(?:([+-]|)\" + K + \"*(\\\\d+)|))\" + K + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + J + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + K + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + K + \"*((?:-\\\\d)?\\\\d*)\" + K + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        W = /^(?:input|select|textarea|button)$/i,\n        X = /^h\\d$/i,\n        Y = /^[^{]+\\{\\s*\\[native \\w/,\n        Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        $ = /[+~]/,\n        _ = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + K + \"?|(\" + K + \")|.)\", \"ig\"),\n        aa = function aa(a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    },\n        ba = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        ca = function ca(a, b) {\n      return b ? \"\\0\" === a ? \"\\uFFFD\" : a.slice(0, -1) + \"\\\\\" + a.charCodeAt(a.length - 1).toString(16) + \" \" : \"\\\\\" + a;\n    },\n        da = function da() {\n      m();\n    },\n        ea = ta(function (a) {\n      return a.disabled === !0 && (\"form\" in a || \"label\" in a);\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;\n    } catch (fa) {\n      G = {\n        apply: D.length ? function (a, b) {\n          F.apply(a, H.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]) {\n            ;\n          }\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function ga(a, b, d, e) {\n      var f,\n          h,\n          j,\n          k,\n          l,\n          o,\n          r,\n          s = b && b.ownerDocument,\n          w = b ? b.nodeType : 9;\n      if (d = d || [], \"string\" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;\n\n      if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {\n        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {\n          if (9 === w) {\n            if (!(j = b.getElementById(f))) return d;\n            if (j.id === f) return d.push(j), d;\n          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;\n        } else {\n          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;\n          if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;\n        }\n\n        if (c.qsa && !A[a + \" \"] && (!q || !q.test(a))) {\n          if (1 !== w) s = b, r = a;else if (\"object\" !== b.nodeName.toLowerCase()) {\n            (k = b.getAttribute(\"id\")) ? k = k.replace(ba, ca) : b.setAttribute(\"id\", k = u), o = g(a), h = o.length;\n\n            while (h--) {\n              o[h] = \"#\" + k + \" \" + sa(o[h]);\n            }\n\n            r = o.join(\",\"), s = $.test(a) && qa(b.parentNode) || b;\n          }\n          if (r) try {\n            return G.apply(d, s.querySelectorAll(r)), d;\n          } catch (x) {} finally {\n            k === u && b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(P, \"$1\"), b, d, e);\n    }\n\n    function ha() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function ia(a) {\n      return a[u] = !0, a;\n    }\n\n    function ja(a) {\n      var b = n.createElement(\"fieldset\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function ka(a, b) {\n      var c = a.split(\"|\"),\n          e = c.length;\n\n      while (e--) {\n        d.attrHandle[c[e]] = b;\n      }\n    }\n\n    function la(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;\n      if (d) return d;\n      if (c) while (c = c.nextSibling) {\n        if (c === b) return -1;\n      }\n      return a ? 1 : -1;\n    }\n\n    function ma(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function na(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function oa(a) {\n      return function (b) {\n        return \"form\" in b ? b.parentNode && b.disabled === !1 ? \"label\" in b ? \"label\" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : \"label\" in b && b.disabled === a;\n      };\n    }\n\n    function pa(a) {\n      return ia(function (b) {\n        return b = +b, ia(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) {\n            c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n          }\n        });\n      });\n    }\n\n    function qa(a) {\n      return a && \"undefined\" != typeof a.getElementsByTagName && a;\n    }\n\n    c = ga.support = {}, f = ga.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return !!b && \"HTML\" !== b.nodeName;\n    }, m = ga.setDocument = function (a) {\n      var b,\n          e,\n          g = a ? a.ownerDocument || a : v;\n      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener(\"unload\", da, !1) : e.attachEvent && e.attachEvent(\"onunload\", da)), c.attributes = ja(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ja(function (a) {\n        return a.appendChild(n.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {\n        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;\n      }), c.getById ? (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c = b.getElementById(a);\n          return c ? [c] : [];\n        }\n      }) : (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          var c = \"undefined\" != typeof a.getAttributeNode && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c,\n              d,\n              e,\n              f = b.getElementById(a);\n\n          if (f) {\n            if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n            e = b.getElementsByName(a), d = 0;\n\n            while (f = e[d++]) {\n              if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n            }\n          }\n\n          return [];\n        }\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return \"undefined\" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) {\n            1 === c.nodeType && d.push(c);\n          }\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        if (\"undefined\" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);\n      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {\n        o.appendChild(a).innerHTML = \"<a id='\" + u + \"'></a><select id='\" + u + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowcapture^='']\").length && q.push(\"[*^$]=\" + K + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + K + \"*(?:value|\" + J + \")\"), a.querySelectorAll(\"[id~=\" + u + \"-]\").length || q.push(\"~=\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\"), a.querySelectorAll(\"a#\" + u + \"+*\").length || q.push(\".#.+[+~]\");\n      }), ja(function (a) {\n        a.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var b = n.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + K + \"*[*^$|!~]?=\"), 2 !== a.querySelectorAll(\":enabled\").length && q.push(\":enabled\", \":disabled\"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(\":disabled\").length && q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {\n        c.disconnectedMatch = s.call(a, \"*\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", N);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) {\n          if (b === a) return !0;\n        }\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            e = a.parentNode,\n            f = b.parentNode,\n            g = [a],\n            h = [b];\n        if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;\n        if (e === f) return la(a, b);\n        c = a;\n\n        while (c = c.parentNode) {\n          g.unshift(c);\n        }\n\n        c = b;\n\n        while (c = c.parentNode) {\n          h.unshift(c);\n        }\n\n        while (g[d] === h[d]) {\n          d++;\n        }\n\n        return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;\n      }, n) : n;\n    }, ga.matches = function (a, b) {\n      return ga(a, null, null, b);\n    }, ga.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, \"='$1']\"), c.matchesSelector && p && !A[b + \" \"] && (!r || !r.test(b)) && (!q || !q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return ga(b, n, null, [a]).length > 0;\n    }, ga.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, ga.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, ga.escape = function (a) {\n      return (a + \"\").replace(ba, ca);\n    }, ga.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, ga.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) {\n          b === a[f] && (e = d.push(f));\n        }\n\n        while (e--) {\n          a.splice(d[e], 1);\n        }\n      }\n\n      return k = null, a;\n    }, e = ga.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            c += e(a);\n          }\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) {\n        c += e(b);\n      }\n\n      return c;\n    }, d = ga.selectors = {\n      cacheLength: 50,\n      createPseudo: ia,\n      match: V,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(a) {\n          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || \"\").replace(_, aa), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function CHILD(a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && ga.error(a[0]), a;\n        },\n        PSEUDO: function PSEUDO(a) {\n          var b,\n              c = !a[6] && a[2];\n          return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(a) {\n          var b = a.replace(_, aa).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function CLASS(a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + K + \")\" + a + \"(\" + K + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || \"undefined\" != typeof a.getAttribute && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(a, b, c) {\n          return function (d) {\n            var e = ga.attr(d, a);\n            return null == e ? \"!=\" === b : !b || (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e.replace(O, \" \") + \" \").indexOf(c) > -1 : \"|=\" === b && (e === c || e.slice(0, c.length + 1) === c + \"-\"));\n          };\n        },\n        CHILD: function CHILD(a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h,\n                t = !1;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  m = b;\n\n                  while (m = m[p]) {\n                    if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;\n                  }\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];\n\n                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {\n                  if (1 === m.nodeType && ++t && m === b) {\n                    k[a] = [w, n, t];\n                    break;\n                  }\n                }\n              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {\n                if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;\n              }\n\n              return t -= e, t === d || t % d === 0 && t / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) {\n              d = I(a, f[g]), a[d] = !(c[d] = f[g]);\n            }\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: ia(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(P, \"$1\"));\n          return d[u] ? ia(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) {\n              (f = g[h]) && (a[h] = !(b[h] = f));\n            }\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();\n          };\n        }),\n        has: ia(function (a) {\n          return function (b) {\n            return ga(a, b).length > 0;\n          };\n        }),\n        contains: ia(function (a) {\n          return a = a.replace(_, aa), function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: ia(function (a) {\n          return U.test(a || \"\") || ga.error(\"unsupported lang: \" + a), a = a.replace(_, aa).toLowerCase(), function (b) {\n            var c;\n\n            do {\n              if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\");\n            } while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function root(a) {\n          return a === o;\n        },\n        focus: function focus(a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: oa(!1),\n        disabled: oa(!0),\n        checked: function checked(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function selected(a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function empty(a) {\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            if (a.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function header(a) {\n          return X.test(a.nodeName);\n        },\n        input: function input(a) {\n          return W.test(a.nodeName);\n        },\n        button: function button(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function text(a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: pa(function () {\n          return [0];\n        }),\n        last: pa(function (a, b) {\n          return [b - 1];\n        }),\n        eq: pa(function (a, b, c) {\n          return [c < 0 ? c + b : c];\n        }),\n        even: pa(function (a, b) {\n          for (var c = 0; c < b; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        odd: pa(function (a, b) {\n          for (var c = 1; c < b; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        lt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; --d >= 0;) {\n            a.push(d);\n          }\n\n          return a;\n        }),\n        gt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; ++d < b;) {\n            a.push(d);\n          }\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      d.pseudos[b] = ma(b);\n    }\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) {\n      d.pseudos[b] = na(b);\n    }\n\n    function ra() {}\n\n    ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(P, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) {\n          !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n            value: c,\n            type: g,\n            matches: e\n          }), h = h.slice(c.length));\n        }\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);\n    };\n\n    function sa(a) {\n      for (var b = 0, c = a.length, d = \"\"; b < c; b++) {\n        d += a[b].value;\n      }\n\n      return d;\n    }\n\n    function ta(a, b, c) {\n      var d = b.dir,\n          e = b.next,\n          f = e || d,\n          g = c && \"parentNode\" === f,\n          h = x++;\n      return b.first ? function (b, c, e) {\n        while (b = b[d]) {\n          if (1 === b.nodeType || g) return a(b, c, e);\n        }\n\n        return !1;\n      } : function (b, c, i) {\n        var j,\n            k,\n            l,\n            m = [w, h];\n\n        if (i) {\n          while (b = b[d]) {\n            if ((1 === b.nodeType || g) && a(b, c, i)) return !0;\n          }\n        } else while (b = b[d]) {\n          if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {\n            if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];\n            if (k[f] = m, m[2] = a(b, c, i)) return !0;\n          }\n        }\n\n        return !1;\n      };\n    }\n\n    function ua(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) {\n          if (!a[e](b, c, d)) return !1;\n        }\n\n        return !0;\n      } : a[0];\n    }\n\n    function va(a, b, c) {\n      for (var d = 0, e = b.length; d < e; d++) {\n        ga(a, b[d], c);\n      }\n\n      return c;\n    }\n\n    function wa(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {\n        (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));\n      }\n\n      return g;\n    }\n\n    function xa(a, b, c, d, e, f) {\n      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || va(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : wa(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = wa(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) {\n            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n          }\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) {\n                (l = r[k]) && j.push(q[k] = l);\n              }\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) {\n              (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n            }\n          }\n        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);\n      });\n    }\n\n    function ya(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = ta(function (a) {\n        return a === b;\n      }, h, !0), l = ta(function (a) {\n        return I(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n        return b = null, e;\n      }]; i < f; i++) {\n        if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {\n          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n            for (e = ++i; e < f; e++) {\n              if (d.relative[a[e].type]) break;\n            }\n\n            return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({\n              value: \" \" === a[i - 2].type ? \"*\" : \"\"\n            })).replace(P, \"$1\"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));\n          }\n\n          m.push(c);\n        }\n      }\n\n      return ua(m);\n    }\n\n    function za(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function f(_f, g, h, i, k) {\n        var l,\n            o,\n            q,\n            r = 0,\n            s = \"0\",\n            t = _f && [],\n            u = [],\n            v = j,\n            x = _f || e && d.find.TAG(\"*\", k),\n            y = w += null == v ? 1 : Math.random() || .1,\n            z = x.length;\n\n        for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {\n          if (e && l) {\n            o = 0, g || l.ownerDocument === n || (m(l), h = !p);\n\n            while (q = a[o++]) {\n              if (q(l, g || n, h)) {\n                i.push(l);\n                break;\n              }\n            }\n\n            k && (w = y);\n          }\n\n          c && ((l = !q && l) && r--, _f && t.push(l));\n        }\n\n        if (r += s, c && s !== r) {\n          o = 0;\n\n          while (q = b[o++]) {\n            q(t, u, g, h);\n          }\n\n          if (_f) {\n            if (r > 0) while (s--) {\n              t[s] || u[s] || (u[s] = E.call(i));\n            }\n            u = wa(u);\n          }\n\n          G.apply(i, u), k && !_f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);\n        }\n\n        return k && (w = y, j = v), t;\n      };\n\n      return c ? ia(f) : f;\n    }\n\n    return h = ga.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) {\n          f = ya(b[c]), f[u] ? d.push(f) : e.push(f);\n        }\n\n        f = A(a, za(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = ga.select = function (a, b, c, e) {\n      var f,\n          i,\n          j,\n          k,\n          l,\n          m = \"function\" == typeof a && a,\n          n = !e && g(a = m.selector || a);\n\n      if (c = c || [], 1 === n.length) {\n        if (i = n[0] = n[0].slice(0), i.length > 2 && \"ID\" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {\n          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;\n          m && (b = b.parentNode), a = a.slice(i.shift().value.length);\n        }\n\n        f = V.needsContext.test(a) ? 0 : i.length;\n\n        while (f--) {\n          if (j = i[f], d.relative[k = j.type]) break;\n\n          if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {\n            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;\n            break;\n          }\n        }\n      }\n\n      return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"fieldset\"));\n    }), ja(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || ka(\"type|href|height|width\", function (a, b, c) {\n      if (!c) return a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ja(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || ka(\"value\", function (a, b, c) {\n      if (!c && \"input\" === a.nodeName.toLowerCase()) return a.defaultValue;\n    }), ja(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || ka(J, function (a, b, c) {\n      var d;\n      if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), ga;\n  }(a);\n\n  r.find = x, r.expr = x.selectors, r.expr[\":\"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;\n\n  var y = function y(a, b, c) {\n    var d = [],\n        e = void 0 !== c;\n\n    while ((a = a[b]) && 9 !== a.nodeType) {\n      if (1 === a.nodeType) {\n        if (e && r(a).is(c)) break;\n        d.push(a);\n      }\n    }\n\n    return d;\n  },\n      z = function z(a, b) {\n    for (var c = []; a; a = a.nextSibling) {\n      1 === a.nodeType && a !== b && c.push(a);\n    }\n\n    return c;\n  },\n      A = r.expr.match.needsContext;\n\n  function B(a, b) {\n    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n  }\n\n  var C = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i,\n      D = /^.[^:#\\[\\.,]*$/;\n\n  function E(a, b, c) {\n    return r.isFunction(b) ? r.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    }) : b.nodeType ? r.grep(a, function (a) {\n      return a === b !== c;\n    }) : \"string\" != typeof b ? r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c;\n    }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c && 1 === a.nodeType;\n    }));\n  }\n\n  r.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, r.fn.extend({\n    find: function find(a) {\n      var b,\n          c,\n          d = this.length,\n          e = this;\n      if (\"string\" != typeof a) return this.pushStack(r(a).filter(function () {\n        for (b = 0; b < d; b++) {\n          if (r.contains(e[b], this)) return !0;\n        }\n      }));\n\n      for (c = this.pushStack([]), b = 0; b < d; b++) {\n        r.find(a, e[b], c);\n      }\n\n      return d > 1 ? r.uniqueSort(c) : c;\n    },\n    filter: function filter(a) {\n      return this.pushStack(E(this, a || [], !1));\n    },\n    not: function not(a) {\n      return this.pushStack(E(this, a || [], !0));\n    },\n    is: function is(a) {\n      return !!E(this, \"string\" == typeof a && A.test(a) ? r(a) : a || [], !1).length;\n    }\n  });\n\n  var F,\n      G = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      H = r.fn.init = function (a, b, c) {\n    var e, f;\n    if (!a) return this;\n\n    if (c = c || F, \"string\" == typeof a) {\n      if (e = \"<\" === a[0] && \">\" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);\n\n      if (e[1]) {\n        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) {\n          r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);\n        }\n        return this;\n      }\n\n      return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;\n    }\n\n    return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);\n  };\n\n  H.prototype = r.fn, F = r(d);\n  var I = /^(?:parents|prev(?:Until|All))/,\n      J = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  r.fn.extend({\n    has: function has(a) {\n      var b = r(a, this),\n          c = b.length;\n      return this.filter(function () {\n        for (var a = 0; a < c; a++) {\n          if (r.contains(this, b[a])) return !0;\n        }\n      });\n    },\n    closest: function closest(a, b) {\n      var c,\n          d = 0,\n          e = this.length,\n          f = [],\n          g = \"string\" != typeof a && r(a);\n      if (!A.test(a)) for (; d < e; d++) {\n        for (c = this[d]; c && c !== b; c = c.parentNode) {\n          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {\n            f.push(c);\n            break;\n          }\n        }\n      }\n      return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);\n    },\n    index: function index(a) {\n      return a ? \"string\" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(a, b) {\n      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));\n    },\n    addBack: function addBack(a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function K(a, b) {\n    while ((a = a[b]) && 1 !== a.nodeType) {\n      ;\n    }\n\n    return a;\n  }\n\n  r.each({\n    parent: function parent(a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function parents(a) {\n      return y(a, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(a, b, c) {\n      return y(a, \"parentNode\", c);\n    },\n    next: function next(a) {\n      return K(a, \"nextSibling\");\n    },\n    prev: function prev(a) {\n      return K(a, \"previousSibling\");\n    },\n    nextAll: function nextAll(a) {\n      return y(a, \"nextSibling\");\n    },\n    prevAll: function prevAll(a) {\n      return y(a, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(a, b, c) {\n      return y(a, \"nextSibling\", c);\n    },\n    prevUntil: function prevUntil(a, b, c) {\n      return y(a, \"previousSibling\", c);\n    },\n    siblings: function siblings(a) {\n      return z((a.parentNode || {}).firstChild, a);\n    },\n    children: function children(a) {\n      return z(a.firstChild);\n    },\n    contents: function contents(a) {\n      return B(a, \"iframe\") ? a.contentDocument : (B(a, \"template\") && (a = a.content || a), r.merge([], a.childNodes));\n    }\n  }, function (a, b) {\n    r.fn[a] = function (c, d) {\n      var e = r.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);\n    };\n  });\n  var L = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function M(a) {\n    var b = {};\n    return r.each(a.match(L) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  r.Callbacks = function (a) {\n    a = \"string\" == typeof a ? M(a) : r.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f = [],\n        g = [],\n        h = -1,\n        i = function i() {\n      for (e = e || a.once, d = b = !0; g.length; h = -1) {\n        c = g.shift();\n\n        while (++h < f.length) {\n          f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);\n        }\n      }\n\n      a.memory || (c = !1), b = !1, e && (f = c ? [] : \"\");\n    },\n        j = {\n      add: function add() {\n        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {\n          r.each(b, function (b, c) {\n            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && \"string\" !== r.type(c) && d(c);\n          });\n        }(arguments), c && !b && i()), this;\n      },\n      remove: function remove() {\n        return r.each(arguments, function (a, b) {\n          var c;\n\n          while ((c = r.inArray(b, f, c)) > -1) {\n            f.splice(c, 1), c <= h && h--;\n          }\n        }), this;\n      },\n      has: function has(a) {\n        return a ? r.inArray(a, f) > -1 : f.length > 0;\n      },\n      empty: function empty() {\n        return f && (f = []), this;\n      },\n      disable: function disable() {\n        return e = g = [], f = c = \"\", this;\n      },\n      disabled: function disabled() {\n        return !f;\n      },\n      lock: function lock() {\n        return e = g = [], c || b || (f = c = \"\"), this;\n      },\n      locked: function locked() {\n        return !!e;\n      },\n      fireWith: function fireWith(a, c) {\n        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;\n      },\n      fire: function fire() {\n        return j.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!d;\n      }\n    };\n\n    return j;\n  };\n\n  function N(a) {\n    return a;\n  }\n\n  function O(a) {\n    throw a;\n  }\n\n  function P(a, b, c, d) {\n    var e;\n\n    try {\n      a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));\n    } catch (a) {\n      c.apply(void 0, [a]);\n    }\n  }\n\n  r.extend({\n    Deferred: function Deferred(b) {\n      var c = [[\"notify\", \"progress\", r.Callbacks(\"memory\"), r.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          d = \"pending\",\n          e = {\n        state: function state() {\n          return d;\n        },\n        always: function always() {\n          return f.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function _catch(a) {\n          return e.then(null, a);\n        },\n        pipe: function pipe() {\n          var a = arguments;\n          return r.Deferred(function (b) {\n            r.each(c, function (c, d) {\n              var e = r.isFunction(a[d[4]]) && a[d[4]];\n              f[d[1]](function () {\n                var a = e && e.apply(this, arguments);\n                a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + \"With\"](this, e ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        then: function then(b, d, e) {\n          var f = 0;\n\n          function g(b, c, d, e) {\n            return function () {\n              var h = this,\n                  i = arguments,\n                  j = function j() {\n                var a, j;\n\n                if (!(b < f)) {\n                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  j = a && (\"object\" == _typeof(a) || \"function\" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));\n                }\n              },\n                  k = e ? j : function () {\n                try {\n                  j();\n                } catch (a) {\n                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));\n                }\n              };\n\n              b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));\n            };\n          }\n\n          return r.Deferred(function (a) {\n            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));\n          }).promise();\n        },\n        promise: function promise(a) {\n          return null != a ? r.extend(a, e) : e;\n        }\n      },\n          f = {};\n      return r.each(c, function (a, b) {\n        var g = b[2],\n            h = b[5];\n        e[b[1]] = g.add, h && g.add(function () {\n          d = h;\n        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {\n          return f[b[0] + \"With\"](this === f ? void 0 : this, arguments), this;\n        }, f[b[0] + \"With\"] = g.fireWith;\n      }), e.promise(f), b && b.call(f, f), f;\n    },\n    when: function when(a) {\n      var b = arguments.length,\n          c = b,\n          d = Array(c),\n          e = f.call(arguments),\n          g = r.Deferred(),\n          h = function h(a) {\n        return function (c) {\n          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);\n        };\n      };\n\n      if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), \"pending\" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();\n\n      while (c--) {\n        P(e[c], h(c), g.reject);\n      }\n\n      return g.promise();\n    }\n  });\n  var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  r.Deferred.exceptionHook = function (b, c) {\n    a.console && a.console.warn && b && Q.test(b.name) && a.console.warn(\"jQuery.Deferred exception: \" + b.message, b.stack, c);\n  }, r.readyException = function (b) {\n    a.setTimeout(function () {\n      throw b;\n    });\n  };\n  var R = r.Deferred();\n  r.fn.ready = function (a) {\n    return R.then(a)[\"catch\"](function (a) {\n      r.readyException(a);\n    }), this;\n  }, r.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(a) {\n      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));\n    }\n  }), r.ready.then = R.then;\n\n  function S() {\n    d.removeEventListener(\"DOMContentLoaded\", S), a.removeEventListener(\"load\", S), r.ready();\n  }\n\n  \"complete\" === d.readyState || \"loading\" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener(\"DOMContentLoaded\", S), a.addEventListener(\"load\", S));\n\n  var T = function T(a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === r.type(c)) {\n      e = !0;\n\n      for (h in c) {\n        T(a, b, h, c[h], !0, f, g);\n      }\n    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {\n      return j.call(r(a), c);\n    })), b)) for (; h < i; h++) {\n      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n    }\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  },\n      U = function U(a) {\n    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;\n  };\n\n  function V() {\n    this.expando = r.expando + V.uid++;\n  }\n\n  V.uid = 1, V.prototype = {\n    cache: function cache(a) {\n      var b = a[this.expando];\n      return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {\n        value: b,\n        configurable: !0\n      }))), b;\n    },\n    set: function set(a, b, c) {\n      var d,\n          e = this.cache(a);\n      if (\"string\" == typeof b) e[r.camelCase(b)] = c;else for (d in b) {\n        e[r.camelCase(d)] = b[d];\n      }\n      return e;\n    },\n    get: function get(a, b) {\n      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];\n    },\n    access: function access(a, b, c) {\n      return void 0 === b || b && \"string\" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);\n    },\n    remove: function remove(a, b) {\n      var c,\n          d = a[this.expando];\n\n      if (void 0 !== d) {\n        if (void 0 !== b) {\n          Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;\n\n          while (c--) {\n            delete d[b[c]];\n          }\n        }\n\n        (void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);\n      }\n    },\n    hasData: function hasData(a) {\n      var b = a[this.expando];\n      return void 0 !== b && !r.isEmptyObject(b);\n    }\n  };\n  var W = new V(),\n      X = new V(),\n      Y = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      Z = /[A-Z]/g;\n\n  function $(a) {\n    return \"true\" === a || \"false\" !== a && (\"null\" === a ? null : a === +a + \"\" ? +a : Y.test(a) ? JSON.parse(a) : a);\n  }\n\n  function _(a, b, c) {\n    var d;\n    if (void 0 === c && 1 === a.nodeType) if (d = \"data-\" + b.replace(Z, \"-$&\").toLowerCase(), c = a.getAttribute(d), \"string\" == typeof c) {\n      try {\n        c = $(c);\n      } catch (e) {}\n\n      X.set(a, b, c);\n    } else c = void 0;\n    return c;\n  }\n\n  r.extend({\n    hasData: function hasData(a) {\n      return X.hasData(a) || W.hasData(a);\n    },\n    data: function data(a, b, c) {\n      return X.access(a, b, c);\n    },\n    removeData: function removeData(a, b) {\n      X.remove(a, b);\n    },\n    _data: function _data(a, b, c) {\n      return W.access(a, b, c);\n    },\n    _removeData: function _removeData(a, b) {\n      W.remove(a, b);\n    }\n  }), r.fn.extend({\n    data: function data(a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, \"hasDataAttrs\"))) {\n          c = g.length;\n\n          while (c--) {\n            g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));\n          }\n\n          W.set(f, \"hasDataAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == _typeof(a) ? this.each(function () {\n        X.set(this, a);\n      }) : T(this, function (b) {\n        var c;\n\n        if (f && void 0 === b) {\n          if (c = X.get(f, a), void 0 !== c) return c;\n          if (c = _(f, a), void 0 !== c) return c;\n        } else this.each(function () {\n          X.set(this, a, b);\n        });\n      }, null, b, arguments.length > 1, null, !0);\n    },\n    removeData: function removeData(a) {\n      return this.each(function () {\n        X.remove(this, a);\n      });\n    }\n  }), r.extend({\n    queue: function queue(a, b, c) {\n      var d;\n      if (a) return b = (b || \"fx\") + \"queue\", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];\n    },\n    dequeue: function dequeue(a, b) {\n      b = b || \"fx\";\n\n      var c = r.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = r._queueHooks(a, b),\n          g = function g() {\n        r.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function _queueHooks(a, b) {\n      var c = b + \"queueHooks\";\n      return W.get(a, c) || W.access(a, c, {\n        empty: r.Callbacks(\"once memory\").add(function () {\n          W.remove(a, [b + \"queue\", c]);\n        })\n      });\n    }\n  }), r.fn.extend({\n    queue: function queue(a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = r.queue(this, a, b);\n        r._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && r.dequeue(this, a);\n      });\n    },\n    dequeue: function dequeue(a) {\n      return this.each(function () {\n        r.dequeue(this, a);\n      });\n    },\n    clearQueue: function clearQueue(a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function promise(a, b) {\n      var c,\n          d = 1,\n          e = r.Deferred(),\n          f = this,\n          g = this.length,\n          h = function h() {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) {\n        c = W.get(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n      }\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var aa = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      ba = new RegExp(\"^(?:([+-])=|)(\" + aa + \")([a-z%]*)$\", \"i\"),\n      ca = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      da = function da(a, b) {\n    return a = b || a, \"none\" === a.style.display || \"\" === a.style.display && r.contains(a.ownerDocument, a) && \"none\" === r.css(a, \"display\");\n  },\n      ea = function ea(a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) {\n      g[f] = a.style[f], a.style[f] = b[f];\n    }\n\n    e = c.apply(a, d || []);\n\n    for (f in b) {\n      a.style[f] = g[f];\n    }\n\n    return e;\n  };\n\n  function fa(a, b, c, d) {\n    var e,\n        f = 1,\n        g = 20,\n        h = d ? function () {\n      return d.cur();\n    } : function () {\n      return r.css(a, b, \"\");\n    },\n        i = h(),\n        j = c && c[3] || (r.cssNumber[b] ? \"\" : \"px\"),\n        k = (r.cssNumber[b] || \"px\" !== j && +i) && ba.exec(r.css(a, b));\n\n    if (k && k[3] !== j) {\n      j = j || k[3], c = c || [], k = +i || 1;\n\n      do {\n        f = f || \".5\", k /= f, r.style(a, b, k + j);\n      } while (f !== (f = h() / i) && 1 !== f && --g);\n    }\n\n    return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;\n  }\n\n  var ga = {};\n\n  function ha(a) {\n    var b,\n        c = a.ownerDocument,\n        d = a.nodeName,\n        e = ga[d];\n    return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, \"display\"), b.parentNode.removeChild(b), \"none\" === e && (e = \"block\"), ga[d] = e, e);\n  }\n\n  function ia(a, b) {\n    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {\n      d = a[f], d.style && (c = d.style.display, b ? (\"none\" === c && (e[f] = W.get(d, \"display\") || null, e[f] || (d.style.display = \"\")), \"\" === d.style.display && da(d) && (e[f] = ha(d))) : \"none\" !== c && (e[f] = \"none\", W.set(d, \"display\", c)));\n    }\n\n    for (f = 0; f < g; f++) {\n      null != e[f] && (a[f].style.display = e[f]);\n    }\n\n    return a;\n  }\n\n  r.fn.extend({\n    show: function show() {\n      return ia(this, !0);\n    },\n    hide: function hide() {\n      return ia(this);\n    },\n    toggle: function toggle(a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        da(this) ? r(this).show() : r(this).hide();\n      });\n    }\n  });\n  var ja = /^(?:checkbox|radio)$/i,\n      ka = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i,\n      la = /^$|\\/(?:java|ecma)script/i,\n      ma = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;\n\n  function na(a, b) {\n    var c;\n    return c = \"undefined\" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || \"*\") : \"undefined\" != typeof a.querySelectorAll ? a.querySelectorAll(b || \"*\") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;\n  }\n\n  function oa(a, b) {\n    for (var c = 0, d = a.length; c < d; c++) {\n      W.set(a[c], \"globalEval\", !b || W.get(b[c], \"globalEval\"));\n    }\n  }\n\n  var pa = /<|&#?\\w+;/;\n\n  function qa(a, b, c, d, e) {\n    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {\n      if (f = a[n], f || 0 === f) if (\"object\" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {\n        g = g || l.appendChild(b.createElement(\"div\")), h = (ka.exec(f) || [\"\", \"\"])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];\n\n        while (k--) {\n          g = g.lastChild;\n        }\n\n        r.merge(m, g.childNodes), g = l.firstChild, g.textContent = \"\";\n      } else m.push(b.createTextNode(f));\n    }\n\n    l.textContent = \"\", n = 0;\n\n    while (f = m[n++]) {\n      if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), \"script\"), j && oa(g), c) {\n        k = 0;\n\n        while (f = g[k++]) {\n          la.test(f.type || \"\") && c.push(f);\n        }\n      }\n    }\n\n    return l;\n  }\n\n  !function () {\n    var a = d.createDocumentFragment(),\n        b = a.appendChild(d.createElement(\"div\")),\n        c = d.createElement(\"input\");\n    c.setAttribute(\"type\", \"radio\"), c.setAttribute(\"checked\", \"checked\"), c.setAttribute(\"name\", \"t\"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = \"<textarea>x</textarea>\", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;\n  }();\n  var ra = d.documentElement,\n      sa = /^key/,\n      ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      ua = /^([^.]*)(?:\\.(.+)|)/;\n\n  function va() {\n    return !0;\n  }\n\n  function wa() {\n    return !1;\n  }\n\n  function xa() {\n    try {\n      return d.activeElement;\n    } catch (a) {}\n  }\n\n  function ya(a, b, c, d, e, f) {\n    var g, h;\n\n    if (\"object\" == _typeof(b)) {\n      \"string\" != typeof c && (d = d || c, c = void 0);\n\n      for (h in b) {\n        ya(a, h, c, d, b[h], f);\n      }\n\n      return a;\n    }\n\n    if (null == d && null == e ? (e = c, d = c = void 0) : null == e && (\"string\" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;\n    return 1 === f && (g = e, e = function e(a) {\n      return r().off(a), g.apply(this, arguments);\n    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {\n      r.event.add(this, b, e, d, c);\n    });\n  }\n\n  r.event = {\n    global: {},\n    add: function add(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.get(a);\n\n      if (q) {\n        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {\n          return \"undefined\" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;\n        }), b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) {\n          h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({\n            type: n,\n            origType: p,\n            data: d,\n            handler: c,\n            guid: c.guid,\n            selector: e,\n            needsContext: e && r.expr.match.needsContext.test(e),\n            namespace: o.join(\".\")\n          }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);\n        }\n      }\n    },\n    remove: function remove(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.hasData(a) && W.get(a);\n\n      if (q && (i = q.events)) {\n        b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) {\n          if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n) {\n            l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + o.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), g = f = m.length;\n\n            while (f--) {\n              k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && (\"**\" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));\n            }\n\n            g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);\n          } else for (n in i) {\n            r.event.remove(a, n + b[j], c, d, !0);\n          }\n        }\n\n        r.isEmptyObject(i) && W.remove(a, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(a) {\n      var b = r.event.fix(a),\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = new Array(arguments.length),\n          j = (W.get(this, \"events\") || {})[b.type] || [],\n          k = r.event.special[b.type] || {};\n\n      for (i[0] = b, c = 1; c < arguments.length; c++) {\n        i[c] = arguments[c];\n      }\n\n      if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {\n        h = r.event.handlers.call(this, b, j), c = 0;\n\n        while ((f = h[c++]) && !b.isPropagationStopped()) {\n          b.currentTarget = f.elem, d = 0;\n\n          while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {\n            b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));\n          }\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, b), b.result;\n      }\n    },\n    handlers: function handlers(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = [],\n          i = b.delegateCount,\n          j = a.target;\n      if (i && j.nodeType && !(\"click\" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) {\n        if (1 === j.nodeType && (\"click\" !== a.type || j.disabled !== !0)) {\n          for (f = [], g = {}, c = 0; c < i; c++) {\n            d = b[c], e = d.selector + \" \", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);\n          }\n\n          f.length && h.push({\n            elem: j,\n            handlers: f\n          });\n        }\n      }\n      return j = this, i < b.length && h.push({\n        elem: j,\n        handlers: b.slice(i)\n      }), h;\n    },\n    addProp: function addProp(a, b) {\n      Object.defineProperty(r.Event.prototype, a, {\n        enumerable: !0,\n        configurable: !0,\n        get: r.isFunction(b) ? function () {\n          if (this.originalEvent) return b(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[a];\n        },\n        set: function set(b) {\n          Object.defineProperty(this, a, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: b\n          });\n        }\n      });\n    },\n    fix: function fix(a) {\n      return a[r.expando] ? a : new r.Event(a);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function trigger() {\n          if (this !== xa() && this.focus) return this.focus(), !1;\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          if (this === xa() && this.blur) return this.blur(), !1;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function trigger() {\n          if (\"checkbox\" === this.type && this.click && B(this, \"input\")) return this.click(), !1;\n        },\n        _default: function _default(a) {\n          return B(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    }\n  }, r.removeEvent = function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c);\n  }, r.Event = function (a, b) {\n    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);\n  }, r.Event.prototype = {\n    constructor: r.Event,\n    isDefaultPrevented: wa,\n    isPropagationStopped: wa,\n    isImmediatePropagationStopped: wa,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.originalEvent;\n      this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, r.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(a) {\n      var b = a.button;\n      return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;\n    }\n  }, r.event.addProp), r.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    r.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function handle(a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), r.fn.extend({\n    on: function on(a, b, c, d) {\n      return ya(this, a, b, c, d);\n    },\n    one: function one(a, b, c, d) {\n      return ya(this, a, b, c, d, 1);\n    },\n    off: function off(a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == _typeof(a)) {\n        for (e in a) {\n          this.off(e, b, a[e]);\n        }\n\n        return this;\n      }\n\n      return b !== !1 && \"function\" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {\n        r.event.remove(this, a, c, b);\n      });\n    }\n  });\n  var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      Aa = /<script|<style|<link/i,\n      Ba = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      Ca = /^true\\/(.*)/,\n      Da = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Ea(a, b) {\n    return B(a, \"table\") && B(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? r(\">tbody\", a)[0] || a : a;\n  }\n\n  function Fa(a) {\n    return a.type = (null !== a.getAttribute(\"type\")) + \"/\" + a.type, a;\n  }\n\n  function Ga(a) {\n    var b = Ca.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function Ha(a, b) {\n    var c, d, e, f, g, h, i, j;\n\n    if (1 === b.nodeType) {\n      if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {\n        delete g.handle, g.events = {};\n\n        for (e in j) {\n          for (c = 0, d = j[e].length; c < d; c++) {\n            r.event.add(b, e, j[e][c]);\n          }\n        }\n      }\n\n      X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));\n    }\n  }\n\n  function Ia(a, b) {\n    var c = b.nodeName.toLowerCase();\n    \"input\" === c && ja.test(a.type) ? b.checked = a.checked : \"input\" !== c && \"textarea\" !== c || (b.defaultValue = a.defaultValue);\n  }\n\n  function Ja(a, b, c, d) {\n    b = g.apply([], b);\n    var e,\n        f,\n        h,\n        i,\n        j,\n        k,\n        l = 0,\n        m = a.length,\n        n = m - 1,\n        q = b[0],\n        s = r.isFunction(q);\n    if (s || m > 1 && \"string\" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {\n      var f = a.eq(e);\n      s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);\n    });\n\n    if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {\n      for (h = r.map(na(e, \"script\"), Fa), i = h.length; l < m; l++) {\n        j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, \"script\"))), c.call(a[l], j, l);\n      }\n\n      if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) {\n        j = h[l], la.test(j.type || \"\") && !W.access(j, \"globalEval\") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, \"\"), k));\n      }\n    }\n\n    return a;\n  }\n\n  function Ka(a, b, c) {\n    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {\n      c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, \"script\")), d.parentNode.removeChild(d));\n    }\n\n    return a;\n  }\n\n  r.extend({\n    htmlPrefilter: function htmlPrefilter(a) {\n      return a.replace(za, \"<$1></$2>\");\n    },\n    clone: function clone(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h = a.cloneNode(!0),\n          i = r.contains(a.ownerDocument, a);\n      if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) {\n        Ia(f[d], g[d]);\n      }\n      if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) {\n        Ha(f[d], g[d]);\n      } else Ha(a, h);\n      return g = na(h, \"script\"), g.length > 0 && oa(g, !i && na(a, \"script\")), h;\n    },\n    cleanData: function cleanData(a) {\n      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {\n        if (U(c)) {\n          if (b = c[W.expando]) {\n            if (b.events) for (d in b.events) {\n              e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);\n            }\n            c[W.expando] = void 0;\n          }\n\n          c[X.expando] && (c[X.expando] = void 0);\n        }\n      }\n    }\n  }), r.fn.extend({\n    detach: function detach(a) {\n      return Ka(this, a, !0);\n    },\n    remove: function remove(a) {\n      return Ka(this, a);\n    },\n    text: function text(a) {\n      return T(this, function (a) {\n        return void 0 === a ? r.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);\n        });\n      }, null, a, arguments.length);\n    },\n    append: function append() {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function after() {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var a, b = 0; null != (a = this[b]); b++) {\n        1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(a, b) {\n      return a = null != a && a, b = null == b ? a : b, this.map(function () {\n        return r.clone(this, a, b);\n      });\n    },\n    html: function html(a) {\n      return T(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;\n\n        if (\"string\" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || [\"\", \"\"])[1].toLowerCase()]) {\n          a = r.htmlPrefilter(a);\n\n          try {\n            for (; c < d; c++) {\n              b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);\n            }\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var a = [];\n      return Ja(this, arguments, function (b) {\n        var c = this.parentNode;\n        r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));\n      }, a);\n    }\n  }), r.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    r.fn[a] = function (a) {\n      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {\n        c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());\n      }\n\n      return this.pushStack(d);\n    };\n  });\n\n  var La = /^margin/,\n      Ma = new RegExp(\"^(\" + aa + \")(?!px)[a-z%]+$\", \"i\"),\n      Na = function Na(b) {\n    var c = b.ownerDocument.defaultView;\n    return c && c.opener || (c = a), c.getComputedStyle(b);\n  };\n\n  !function () {\n    function b() {\n      if (i) {\n        i.style.cssText = \"box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\", i.innerHTML = \"\", ra.appendChild(h);\n        var b = a.getComputedStyle(i);\n        c = \"1%\" !== b.top, g = \"2px\" === b.marginLeft, e = \"4px\" === b.width, i.style.marginRight = \"50%\", f = \"4px\" === b.marginRight, ra.removeChild(h), i = null;\n      }\n    }\n\n    var c,\n        e,\n        f,\n        g,\n        h = d.createElement(\"div\"),\n        i = d.createElement(\"div\");\n    i.style && (i.style.backgroundClip = \"content-box\", i.cloneNode(!0).style.backgroundClip = \"\", o.clearCloneStyle = \"content-box\" === i.style.backgroundClip, h.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\", h.appendChild(i), r.extend(o, {\n      pixelPosition: function pixelPosition() {\n        return b(), c;\n      },\n      boxSizingReliable: function boxSizingReliable() {\n        return b(), e;\n      },\n      pixelMarginRight: function pixelMarginRight() {\n        return b(), f;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        return b(), g;\n      }\n    }));\n  }();\n\n  function Oa(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], \"\" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + \"\" : g;\n  }\n\n  function Pa(a, b) {\n    return {\n      get: function get() {\n        return a() ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  var Qa = /^(none|table(?!-c[ea]).+)/,\n      Ra = /^--/,\n      Sa = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Ta = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Ua = [\"Webkit\", \"Moz\", \"ms\"],\n      Va = d.createElement(\"div\").style;\n\n  function Wa(a) {\n    if (a in Va) return a;\n    var b = a[0].toUpperCase() + a.slice(1),\n        c = Ua.length;\n\n    while (c--) {\n      if (a = Ua[c] + b, a in Va) return a;\n    }\n  }\n\n  function Xa(a) {\n    var b = r.cssProps[a];\n    return b || (b = r.cssProps[a] = Wa(a) || a), b;\n  }\n\n  function Ya(a, b, c) {\n    var d = ba.exec(b);\n    return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || \"px\") : b;\n  }\n\n  function Za(a, b, c, d, e) {\n    var f,\n        g = 0;\n\n    for (f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0; f < 4; f += 2) {\n      \"margin\" === c && (g += r.css(a, c + ca[f], !0, e)), d ? (\"content\" === c && (g -= r.css(a, \"padding\" + ca[f], !0, e)), \"margin\" !== c && (g -= r.css(a, \"border\" + ca[f] + \"Width\", !0, e))) : (g += r.css(a, \"padding\" + ca[f], !0, e), \"padding\" !== c && (g += r.css(a, \"border\" + ca[f] + \"Width\", !0, e)));\n    }\n\n    return g;\n  }\n\n  function $a(a, b, c) {\n    var d,\n        e = Na(a),\n        f = Oa(a, b, e),\n        g = \"border-box\" === r.css(a, \"boxSizing\", !1, e);\n    return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), \"auto\" === f && (f = a[\"offset\" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? \"border\" : \"content\"), d, e) + \"px\");\n  }\n\n  r.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(a, b) {\n          if (b) {\n            var c = Oa(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": \"cssFloat\"\n    },\n    style: function style(a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = r.camelCase(b),\n            i = Ra.test(b),\n            j = a.style;\n        return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = _typeof(c), \"string\" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = \"number\"), null != c && c === c && (\"number\" === f && (c += e && e[3] || (r.cssNumber[h] ? \"\" : \"px\")), o.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (j[b] = \"inherit\"), g && \"set\" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);\n      }\n    },\n    css: function css(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = r.camelCase(b),\n          i = Ra.test(b);\n      return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && \"get\" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), \"normal\" === e && b in Ta && (e = Ta[b]), \"\" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;\n    }\n  }), r.each([\"height\", \"width\"], function (a, b) {\n    r.cssHooks[b] = {\n      get: function get(a, c, d) {\n        if (c) return !Qa.test(r.css(a, \"display\")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {\n          return $a(a, b, d);\n        });\n      },\n      set: function set(a, c, d) {\n        var e,\n            f = d && Na(a),\n            g = d && Za(a, b, d, \"border-box\" === r.css(a, \"boxSizing\", !1, f), f);\n        return g && (e = ba.exec(c)) && \"px\" !== (e[3] || \"px\") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);\n      }\n    };\n  }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {\n    if (b) return (parseFloat(Oa(a, \"marginLeft\")) || a.getBoundingClientRect().left - ea(a, {\n      marginLeft: 0\n    }, function () {\n      return a.getBoundingClientRect().left;\n    })) + \"px\";\n  }), r.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    r.cssHooks[a + b] = {\n      expand: function expand(c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; d < 4; d++) {\n          e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];\n        }\n\n        return e;\n      }\n    }, La.test(a) || (r.cssHooks[a + b].set = Ya);\n  }), r.fn.extend({\n    css: function css(a, b) {\n      return T(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (Array.isArray(b)) {\n          for (d = Na(a), e = b.length; g < e; g++) {\n            f[b[g]] = r.css(a, b[g], !1, d);\n          }\n\n          return f;\n        }\n\n        return void 0 !== c ? r.style(a, b, c) : r.css(a, b);\n      }, a, b, arguments.length > 1);\n    }\n  });\n\n  function _a(a, b, c, d, e) {\n    return new _a.prototype.init(a, b, c, d, e);\n  }\n\n  r.Tween = _a, _a.prototype = {\n    constructor: _a,\n    init: function init(a, b, c, d, e, f) {\n      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var a = _a.propHooks[this.prop];\n      return a && a.get ? a.get(this) : _a.propHooks._default.get(this);\n    },\n    run: function run(a) {\n      var b,\n          c = _a.propHooks[this.prop];\n      return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : _a.propHooks._default.set(this), this;\n    }\n  }, _a.prototype.init.prototype = _a.prototype, _a.propHooks = {\n    _default: {\n      get: function get(a) {\n        var b;\n        return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, \"\"), b && \"auto\" !== b ? b : 0);\n      },\n      set: function set(a) {\n        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);\n      }\n    }\n  }, _a.propHooks.scrollTop = _a.propHooks.scrollLeft = {\n    set: function set(a) {\n      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);\n    }\n  }, r.easing = {\n    linear: function linear(a) {\n      return a;\n    },\n    swing: function swing(a) {\n      return .5 - Math.cos(a * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, r.fx = _a.prototype.init, r.fx.step = {};\n  var ab,\n      bb,\n      cb = /^(?:toggle|show|hide)$/,\n      db = /queueHooks$/;\n\n  function eb() {\n    bb && (d.hidden === !1 && a.requestAnimationFrame ? a.requestAnimationFrame(eb) : a.setTimeout(eb, r.fx.interval), r.fx.tick());\n  }\n\n  function fb() {\n    return a.setTimeout(function () {\n      ab = void 0;\n    }), ab = r.now();\n  }\n\n  function gb(a, b) {\n    var c,\n        d = 0,\n        e = {\n      height: a\n    };\n\n    for (b = b ? 1 : 0; d < 4; d += 2 - b) {\n      c = ca[d], e[\"margin\" + c] = e[\"padding\" + c] = a;\n    }\n\n    return b && (e.opacity = e.width = a), e;\n  }\n\n  function hb(a, b, c) {\n    for (var d, e = (kb.tweeners[b] || []).concat(kb.tweeners[\"*\"]), f = 0, g = e.length; f < g; f++) {\n      if (d = e[f].call(c, b, a)) return d;\n    }\n  }\n\n  function ib(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l = \"width\" in b || \"height\" in b,\n        m = this,\n        n = {},\n        o = a.style,\n        p = a.nodeType && da(a),\n        q = W.get(a, \"fxshow\");\n    c.queue || (g = r._queueHooks(a, \"fx\"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {\n      g.unqueued || h();\n    }), g.unqueued++, m.always(function () {\n      m.always(function () {\n        g.unqueued--, r.queue(a, \"fx\").length || g.empty.fire();\n      });\n    }));\n\n    for (d in b) {\n      if (e = b[d], cb.test(e)) {\n        if (delete b[d], f = f || \"toggle\" === e, e === (p ? \"hide\" : \"show\")) {\n          if (\"show\" !== e || !q || void 0 === q[d]) continue;\n          p = !0;\n        }\n\n        n[d] = q && q[d] || r.style(a, d);\n      }\n    }\n\n    if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {\n      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = W.get(a, \"display\")), k = r.css(a, \"display\"), \"none\" === k && (j ? k = j : (ia([a], !0), j = a.style.display || j, k = r.css(a, \"display\"), ia([a]))), (\"inline\" === k || \"inline-block\" === k && null != j) && \"none\" === r.css(a, \"float\") && (i || (m.done(function () {\n        o.display = j;\n      }), null == j && (k = o.display, j = \"none\" === k ? \"\" : k)), o.display = \"inline-block\")), c.overflow && (o.overflow = \"hidden\", m.always(function () {\n        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];\n      })), i = !1;\n\n      for (d in n) {\n        i || (q ? \"hidden\" in q && (p = q.hidden) : q = W.access(a, \"fxshow\", {\n          display: j\n        }), f && (q.hidden = !p), p && ia([a], !0), m.done(function () {\n          p || ia([a]), W.remove(a, \"fxshow\");\n\n          for (d in n) {\n            r.style(a, d, n[d]);\n          }\n        })), i = hb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));\n      }\n    }\n  }\n\n  function jb(a, b) {\n    var c, d, e, f, g;\n\n    for (c in a) {\n      if (d = r.camelCase(c), e = b[d], f = a[c], Array.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && \"expand\" in g) {\n        f = g.expand(f), delete a[d];\n\n        for (c in f) {\n          c in a || (a[c] = f[c], b[c] = e);\n        }\n      } else b[d] = e;\n    }\n  }\n\n  function kb(a, b, c) {\n    var d,\n        e,\n        f = 0,\n        g = kb.prefilters.length,\n        h = r.Deferred().always(function () {\n      delete i.elem;\n    }),\n        i = function i() {\n      if (e) return !1;\n\n      for (var b = ab || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) {\n        j.tweens[g].run(f);\n      }\n\n      return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (i || h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j]), !1);\n    },\n        j = h.promise({\n      elem: a,\n      props: r.extend({}, b),\n      opts: r.extend(!0, {\n        specialEasing: {},\n        easing: r.easing._default\n      }, c),\n      originalProperties: b,\n      originalOptions: c,\n      startTime: ab || fb(),\n      duration: c.duration,\n      tweens: [],\n      createTween: function createTween(b, c) {\n        var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);\n        return j.tweens.push(d), d;\n      },\n      stop: function stop(b) {\n        var c = 0,\n            d = b ? j.tweens.length : 0;\n        if (e) return this;\n\n        for (e = !0; c < d; c++) {\n          j.tweens[c].run(1);\n        }\n\n        return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;\n      }\n    }),\n        k = j.props;\n\n    for (jb(k, j.opts.specialEasing); f < g; f++) {\n      if (d = kb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;\n    }\n\n    return r.map(k, hb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always), r.fx.timer(r.extend(i, {\n      elem: a,\n      anim: j,\n      queue: j.opts.queue\n    })), j;\n  }\n\n  r.Animation = r.extend(kb, {\n    tweeners: {\n      \"*\": [function (a, b) {\n        var c = this.createTween(a, b);\n        return fa(c.elem, a, ba.exec(b), c), c;\n      }]\n    },\n    tweener: function tweener(a, b) {\n      r.isFunction(a) ? (b = a, a = [\"*\"]) : a = a.match(L);\n\n      for (var c, d = 0, e = a.length; d < e; d++) {\n        c = a[d], kb.tweeners[c] = kb.tweeners[c] || [], kb.tweeners[c].unshift(b);\n      }\n    },\n    prefilters: [ib],\n    prefilter: function prefilter(a, b) {\n      b ? kb.prefilters.unshift(a) : kb.prefilters.push(a);\n    }\n  }), r.speed = function (a, b, c) {\n    var d = a && \"object\" == _typeof(a) ? r.extend({}, a) : {\n      complete: c || !c && b || r.isFunction(a) && a,\n      duration: a,\n      easing: c && b || b && !r.isFunction(b) && b\n    };\n    return r.fx.off ? d.duration = 0 : \"number\" != typeof d.duration && (d.duration in r.fx.speeds ? d.duration = r.fx.speeds[d.duration] : d.duration = r.fx.speeds._default), null != d.queue && d.queue !== !0 || (d.queue = \"fx\"), d.old = d.complete, d.complete = function () {\n      r.isFunction(d.old) && d.old.call(this), d.queue && r.dequeue(this, d.queue);\n    }, d;\n  }, r.fn.extend({\n    fadeTo: function fadeTo(a, b, c, d) {\n      return this.filter(da).css(\"opacity\", 0).show().end().animate({\n        opacity: b\n      }, a, c, d);\n    },\n    animate: function animate(a, b, c, d) {\n      var e = r.isEmptyObject(a),\n          f = r.speed(b, c, d),\n          g = function g() {\n        var b = kb(this, r.extend({}, a), f);\n        (e || W.get(this, \"finish\")) && b.stop(!0);\n      };\n\n      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);\n    },\n    stop: function stop(a, b, c) {\n      var d = function d(a) {\n        var b = a.stop;\n        delete a.stop, b(c);\n      };\n\n      return \"string\" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || \"fx\", []), this.each(function () {\n        var b = !0,\n            e = null != a && a + \"queueHooks\",\n            f = r.timers,\n            g = W.get(this);\n        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {\n          g[e] && g[e].stop && db.test(e) && d(g[e]);\n        }\n\n        for (e = f.length; e--;) {\n          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));\n        }\n\n        !b && c || r.dequeue(this, a);\n      });\n    },\n    finish: function finish(a) {\n      return a !== !1 && (a = a || \"fx\"), this.each(function () {\n        var b,\n            c = W.get(this),\n            d = c[a + \"queue\"],\n            e = c[a + \"queueHooks\"],\n            f = r.timers,\n            g = d ? d.length : 0;\n\n        for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {\n          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));\n        }\n\n        for (b = 0; b < g; b++) {\n          d[b] && d[b].finish && d[b].finish.call(this);\n        }\n\n        delete c.finish;\n      });\n    }\n  }), r.each([\"toggle\", \"show\", \"hide\"], function (a, b) {\n    var c = r.fn[b];\n\n    r.fn[b] = function (a, d, e) {\n      return null == a || \"boolean\" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);\n    };\n  }), r.each({\n    slideDown: gb(\"show\"),\n    slideUp: gb(\"hide\"),\n    slideToggle: gb(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (a, b) {\n    r.fn[a] = function (a, c, d) {\n      return this.animate(b, a, c, d);\n    };\n  }), r.timers = [], r.fx.tick = function () {\n    var a,\n        b = 0,\n        c = r.timers;\n\n    for (ab = r.now(); b < c.length; b++) {\n      a = c[b], a() || c[b] !== a || c.splice(b--, 1);\n    }\n\n    c.length || r.fx.stop(), ab = void 0;\n  }, r.fx.timer = function (a) {\n    r.timers.push(a), r.fx.start();\n  }, r.fx.interval = 13, r.fx.start = function () {\n    bb || (bb = !0, eb());\n  }, r.fx.stop = function () {\n    bb = null;\n  }, r.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, r.fn.delay = function (b, c) {\n    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || \"fx\", this.queue(c, function (c, d) {\n      var e = a.setTimeout(c, b);\n\n      d.stop = function () {\n        a.clearTimeout(e);\n      };\n    });\n  }, function () {\n    var a = d.createElement(\"input\"),\n        b = d.createElement(\"select\"),\n        c = b.appendChild(d.createElement(\"option\"));\n    a.type = \"checkbox\", o.checkOn = \"\" !== a.value, o.optSelected = c.selected, a = d.createElement(\"input\"), a.value = \"t\", a.type = \"radio\", o.radioValue = \"t\" === a.value;\n  }();\n  var lb,\n      mb = r.expr.attrHandle;\n  r.fn.extend({\n    attr: function attr(a, b) {\n      return T(this, r.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(a) {\n      return this.each(function () {\n        r.removeAttr(this, a);\n      });\n    }\n  }), r.extend({\n    attr: function attr(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return \"undefined\" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? lb : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + \"\"), c) : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));\n    },\n    attrHooks: {\n      type: {\n        set: function set(a, b) {\n          if (!o.radioValue && \"radio\" === b && B(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(a, b) {\n      var c,\n          d = 0,\n          e = b && b.match(L);\n      if (e && 1 === a.nodeType) while (c = e[d++]) {\n        a.removeAttribute(c);\n      }\n    }\n  }), lb = {\n    set: function set(a, b, c) {\n      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;\n    }\n  }, r.each(r.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = mb[b] || r.find.attr;\n\n    mb[b] = function (a, b, d) {\n      var e,\n          f,\n          g = b.toLowerCase();\n      return d || (f = mb[g], mb[g] = e, e = null != c(a, b, d) ? g : null, mb[g] = f), e;\n    };\n  });\n  var nb = /^(?:input|select|textarea|button)$/i,\n      ob = /^(?:a|area)$/i;\n  r.fn.extend({\n    prop: function prop(a, b) {\n      return T(this, r.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function removeProp(a) {\n      return this.each(function () {\n        delete this[r.propFix[a] || a];\n      });\n    }\n  }), r.extend({\n    prop: function prop(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(a) {\n          var b = r.find.attr(a, \"tabindex\");\n          return b ? parseInt(b, 10) : nb.test(a.nodeName) || ob.test(a.nodeName) && a.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), o.optSelected || (r.propHooks.selected = {\n    get: function get(a) {\n      var b = a.parentNode;\n      return b && b.parentNode && b.parentNode.selectedIndex, null;\n    },\n    set: function set(a) {\n      var b = a.parentNode;\n      b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);\n    }\n  }), r.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    r.propFix[this.toLowerCase()] = this;\n  });\n\n  function pb(a) {\n    var b = a.match(L) || [];\n    return b.join(\" \");\n  }\n\n  function qb(a) {\n    return a.getAttribute && a.getAttribute(\"class\") || \"\";\n  }\n\n  r.fn.extend({\n    addClass: function addClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).addClass(a.call(this, b, qb(this)));\n      });\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) {\n          if (e = qb(c), d = 1 === c.nodeType && \" \" + pb(e) + \" \") {\n            g = 0;\n\n            while (f = b[g++]) {\n              d.indexOf(\" \" + f + \" \") < 0 && (d += f + \" \");\n            }\n\n            h = pb(d), e !== h && c.setAttribute(\"class\", h);\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).removeClass(a.call(this, b, qb(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) {\n          if (e = qb(c), d = 1 === c.nodeType && \" \" + pb(e) + \" \") {\n            g = 0;\n\n            while (f = b[g++]) {\n              while (d.indexOf(\" \" + f + \" \") > -1) {\n                d = d.replace(\" \" + f + \" \", \" \");\n              }\n            }\n\n            h = pb(d), e !== h && c.setAttribute(\"class\", h);\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(a, b) {\n      var c = _typeof(a);\n\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {\n        r(this).toggleClass(a.call(this, c, qb(this), b), b);\n      }) : this.each(function () {\n        var b, d, e, f;\n\n        if (\"string\" === c) {\n          d = 0, e = r(this), f = a.match(L) || [];\n\n          while (b = f[d++]) {\n            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n          }\n        } else void 0 !== a && \"boolean\" !== c || (b = qb(this), b && W.set(this, \"__className__\", b), this.setAttribute && this.setAttribute(\"class\", b || a === !1 ? \"\" : W.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(a) {\n      var b,\n          c,\n          d = 0;\n      b = \" \" + a + \" \";\n\n      while (c = this[d++]) {\n        if (1 === c.nodeType && (\" \" + pb(qb(c)) + \" \").indexOf(b) > -1) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var rb = /\\r/g;\n  r.fn.extend({\n    val: function val(a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : Array.isArray(e) && (e = r.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(rb, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), r.extend({\n    valHooks: {\n      option: {\n        get: function get(a) {\n          var b = r.find.attr(a, \"value\");\n          return null != b ? b : pb(r.text(a));\n        }\n      },\n      select: {\n        get: function get(a) {\n          var b,\n              c,\n              d,\n              e = a.options,\n              f = a.selectedIndex,\n              g = \"select-one\" === a.type,\n              h = g ? null : [],\n              i = g ? f + 1 : e.length;\n\n          for (d = f < 0 ? i : g ? f : 0; d < i; d++) {\n            if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, \"optgroup\"))) {\n              if (b = r(c).val(), g) return b;\n              h.push(b);\n            }\n          }\n\n          return h;\n        },\n        set: function set(a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = r.makeArray(b),\n              g = e.length;\n\n          while (g--) {\n            d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);\n          }\n\n          return c || (a.selectedIndex = -1), f;\n        }\n      }\n    }\n  }), r.each([\"radio\", \"checkbox\"], function () {\n    r.valHooks[this] = {\n      set: function set(a, b) {\n        if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;\n      }\n    }, o.checkOn || (r.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  });\n  var sb = /^(?:focusinfocus|focusoutblur)$/;\n  r.extend(r.event, {\n    trigger: function trigger(b, c, e, f) {\n      var g,\n          h,\n          i,\n          j,\n          k,\n          m,\n          n,\n          o = [e || d],\n          p = l.call(b, \"type\") ? b.type : b,\n          q = l.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !sb.test(p + r.event.triggered) && (p.indexOf(\".\") > -1 && (q = p.split(\".\"), p = q.shift(), q.sort()), k = p.indexOf(\":\") < 0 && \"on\" + p, b = b[r.expando] ? b : new r.Event(p, \"object\" == _typeof(b) && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join(\".\"), b.rnamespace = b.namespace ? new RegExp(\"(^|\\\\.)\" + q.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {\n        if (!f && !n.noBubble && !r.isWindow(e)) {\n          for (j = n.delegateType || p, sb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {\n            o.push(h), i = h;\n          }\n\n          i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);\n        }\n\n        g = 0;\n\n        while ((h = o[g++]) && !b.isPropagationStopped()) {\n          b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, \"events\") || {})[b.type] && W.get(h, \"handle\"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());\n        }\n\n        return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;\n      }\n    },\n    simulate: function simulate(a, b, c) {\n      var d = r.extend(new r.Event(), c, {\n        type: a,\n        isSimulated: !0\n      });\n      r.event.trigger(d, null, b);\n    }\n  }), r.fn.extend({\n    trigger: function trigger(a, b) {\n      return this.each(function () {\n        r.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function triggerHandler(a, b) {\n      var c = this[0];\n      if (c) return r.event.trigger(a, b, c, !0);\n    }\n  }), r.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (a, b) {\n    r.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), r.fn.extend({\n    hover: function hover(a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    }\n  }), o.focusin = \"onfocusin\" in a, o.focusin || r.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function c(a) {\n      r.event.simulate(b, a.target, r.event.fix(a));\n    };\n\n    r.event.special[b] = {\n      setup: function setup() {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b);\n        e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);\n      },\n      teardown: function teardown() {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b) - 1;\n        e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));\n      }\n    };\n  });\n  var tb = a.location,\n      ub = r.now(),\n      vb = /\\?/;\n\n  r.parseXML = function (b) {\n    var c;\n    if (!b || \"string\" != typeof b) return null;\n\n    try {\n      c = new a.DOMParser().parseFromString(b, \"text/xml\");\n    } catch (d) {\n      c = void 0;\n    }\n\n    return c && !c.getElementsByTagName(\"parsererror\").length || r.error(\"Invalid XML: \" + b), c;\n  };\n\n  var wb = /\\[\\]$/,\n      xb = /\\r?\\n/g,\n      yb = /^(?:submit|button|image|reset|file)$/i,\n      zb = /^(?:input|select|textarea|keygen)/i;\n\n  function Ab(a, b, c, d) {\n    var e;\n    if (Array.isArray(b)) r.each(b, function (b, e) {\n      c || wb.test(a) ? d(a, e) : Ab(a + \"[\" + (\"object\" == _typeof(e) && null != e ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== r.type(b)) d(a, b);else for (e in b) {\n      Ab(a + \"[\" + e + \"]\", b[e], c, d);\n    }\n  }\n\n  r.param = function (a, b) {\n    var c,\n        d = [],\n        e = function e(a, b) {\n      var c = r.isFunction(b) ? b() : b;\n      d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(null == c ? \"\" : c);\n    };\n\n    if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) {\n      Ab(c, a[c], b, e);\n    }\n    return d.join(\"&\");\n  }, r.fn.extend({\n    serialize: function serialize() {\n      return r.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var a = r.prop(this, \"elements\");\n        return a ? r.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !r(this).is(\":disabled\") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !ja.test(a));\n      }).map(function (a, b) {\n        var c = r(this).val();\n        return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(xb, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(xb, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var Bb = /%20/g,\n      Cb = /#.*$/,\n      Db = /([?&])_=[^&]*/,\n      Eb = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      Fb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      Gb = /^(?:GET|HEAD)$/,\n      Hb = /^\\/\\//,\n      Ib = {},\n      Jb = {},\n      Kb = \"*/\".concat(\"*\"),\n      Lb = d.createElement(\"a\");\n  Lb.href = tb.href;\n\n  function Mb(a) {\n    return function (b, c) {\n      \"string\" != typeof b && (c = b, b = \"*\");\n      var d,\n          e = 0,\n          f = b.toLowerCase().match(L) || [];\n      if (r.isFunction(c)) while (d = f[e++]) {\n        \"+\" === d[0] ? (d = d.slice(1) || \"*\", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);\n      }\n    };\n  }\n\n  function Nb(a, b, c, d) {\n    var e = {},\n        f = a === Jb;\n\n    function g(h) {\n      var i;\n      return e[h] = !0, r.each(a[h] || [], function (a, h) {\n        var j = h(b, c, d);\n        return \"string\" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);\n      }), i;\n    }\n\n    return g(b.dataTypes[0]) || !e[\"*\"] && g(\"*\");\n  }\n\n  function Ob(a, b) {\n    var c,\n        d,\n        e = r.ajaxSettings.flatOptions || {};\n\n    for (c in b) {\n      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);\n    }\n\n    return d && r.extend(!0, a, d), a;\n  }\n\n  function Pb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.contents,\n        i = a.dataTypes;\n\n    while (\"*\" === i[0]) {\n      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader(\"Content-Type\"));\n    }\n\n    if (d) for (e in h) {\n      if (h[e] && h[e].test(d)) {\n        i.unshift(e);\n        break;\n      }\n    }\n    if (i[0] in c) f = i[0];else {\n      for (e in c) {\n        if (!i[0] || a.converters[e + \" \" + i[0]]) {\n          f = e;\n          break;\n        }\n\n        g || (g = e);\n      }\n\n      f = f || g;\n    }\n    if (f) return f !== i[0] && i.unshift(f), c[f];\n  }\n\n  function Qb(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = {},\n        k = a.dataTypes.slice();\n    if (k[1]) for (g in a.converters) {\n      j[g.toLowerCase()] = a.converters[g];\n    }\n    f = k.shift();\n\n    while (f) {\n      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if (\"*\" === f) f = i;else if (\"*\" !== i && i !== f) {\n        if (g = j[i + \" \" + f] || j[\"* \" + f], !g) for (e in j) {\n          if (h = e.split(\" \"), h[1] === f && (g = j[i + \" \" + h[0]] || j[\"* \" + h[0]])) {\n            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));\n            break;\n          }\n        }\n        if (g !== !0) if (g && a[\"throws\"]) b = g(b);else try {\n          b = g(b);\n        } catch (l) {\n          return {\n            state: \"parsererror\",\n            error: g ? l : \"No conversion from \" + i + \" to \" + f\n          };\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: b\n    };\n  }\n\n  r.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: tb.href,\n      type: \"GET\",\n      isLocal: Fb.test(tb.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Kb,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": r.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(a, b) {\n      return b ? Ob(Ob(a, r.ajaxSettings), b) : Ob(r.ajaxSettings, a);\n    },\n    ajaxPrefilter: Mb(Ib),\n    ajaxTransport: Mb(Jb),\n    ajax: function ajax(b, c) {\n      \"object\" == _typeof(b) && (c = b, b = void 0), c = c || {};\n      var e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o = r.ajaxSetup({}, c),\n          p = o.context || o,\n          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,\n          s = r.Deferred(),\n          t = r.Callbacks(\"once memory\"),\n          u = o.statusCode || {},\n          v = {},\n          w = {},\n          x = \"canceled\",\n          y = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(a) {\n          var b;\n\n          if (k) {\n            if (!h) {\n              h = {};\n\n              while (b = Eb.exec(g)) {\n                h[b[1].toLowerCase()] = b[2];\n              }\n            }\n\n            b = h[a.toLowerCase()];\n          }\n\n          return null == b ? null : b;\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return k ? g : null;\n        },\n        setRequestHeader: function setRequestHeader(a, b) {\n          return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;\n        },\n        overrideMimeType: function overrideMimeType(a) {\n          return null == k && (o.mimeType = a), this;\n        },\n        statusCode: function statusCode(a) {\n          var b;\n          if (a) if (k) y.always(a[y.status]);else for (b in a) {\n            u[b] = [u[b], a[b]];\n          }\n          return this;\n        },\n        abort: function abort(a) {\n          var b = a || x;\n          return e && e.abort(b), A(0, b), this;\n        }\n      };\n\n      if (s.promise(y), o.url = ((b || o.url || tb.href) + \"\").replace(Hb, tb.protocol + \"//\"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || \"*\").toLowerCase().match(L) || [\"\"], null == o.crossDomain) {\n        j = d.createElement(\"a\");\n\n        try {\n          j.href = o.url, j.href = j.href, o.crossDomain = Lb.protocol + \"//\" + Lb.host != j.protocol + \"//\" + j.host;\n        } catch (z) {\n          o.crossDomain = !0;\n        }\n      }\n\n      if (o.data && o.processData && \"string\" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Nb(Ib, o, c, y), k) return y;\n      l = r.event && o.global, l && 0 === r.active++ && r.event.trigger(\"ajaxStart\"), o.type = o.type.toUpperCase(), o.hasContent = !Gb.test(o.type), f = o.url.replace(Cb, \"\"), o.hasContent ? o.data && o.processData && 0 === (o.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (o.data = o.data.replace(Bb, \"+\")) : (n = o.url.slice(f.length), o.data && (f += (vb.test(f) ? \"&\" : \"?\") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Db, \"$1\"), n = (vb.test(f) ? \"&\" : \"?\") + \"_=\" + ub++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader(\"If-Modified-Since\", r.lastModified[f]), r.etag[f] && y.setRequestHeader(\"If-None-Match\", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader(\"Content-Type\", o.contentType), y.setRequestHeader(\"Accept\", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + (\"*\" !== o.dataTypes[0] ? \", \" + Kb + \"; q=0.01\" : \"\") : o.accepts[\"*\"]);\n\n      for (m in o.headers) {\n        y.setRequestHeader(m, o.headers[m]);\n      }\n\n      if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();\n\n      if (x = \"abort\", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Nb(Jb, o, c, y)) {\n        if (y.readyState = 1, l && q.trigger(\"ajaxSend\", [y, o]), k) return y;\n        o.async && o.timeout > 0 && (i = a.setTimeout(function () {\n          y.abort(\"timeout\");\n        }, o.timeout));\n\n        try {\n          k = !1, e.send(v, A);\n        } catch (z) {\n          if (k) throw z;\n          A(-1, z);\n        }\n      } else A(-1, \"No Transport\");\n\n      function A(b, c, d, h) {\n        var j,\n            m,\n            n,\n            v,\n            w,\n            x = c;\n        k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || \"\", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Pb(o, y, d)), v = Qb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader(\"Last-Modified\"), w && (r.lastModified[f] = w), w = y.getResponseHeader(\"etag\"), w && (r.etag[f] = w)), 204 === b || \"HEAD\" === o.type ? x = \"nocontent\" : 304 === b ? x = \"notmodified\" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = \"error\", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + \"\", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? \"ajaxSuccess\" : \"ajaxError\", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger(\"ajaxComplete\", [y, o]), --r.active || r.event.trigger(\"ajaxStop\")));\n      }\n\n      return y;\n    },\n    getJSON: function getJSON(a, b, c) {\n      return r.get(a, b, c, \"json\");\n    },\n    getScript: function getScript(a, b) {\n      return r.get(a, void 0, b, \"script\");\n    }\n  }), r.each([\"get\", \"post\"], function (a, b) {\n    r[b] = function (a, c, d, e) {\n      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({\n        url: a,\n        type: b,\n        dataType: e,\n        data: c,\n        success: d\n      }, r.isPlainObject(a) && a));\n    };\n  }), r._evalUrl = function (a) {\n    return r.ajax({\n      url: a,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      \"throws\": !0\n    });\n  }, r.fn.extend({\n    wrapAll: function wrapAll(a) {\n      var b;\n      return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n        var a = this;\n\n        while (a.firstElementChild) {\n          a = a.firstElementChild;\n        }\n\n        return a;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(a) {\n      return r.isFunction(a) ? this.each(function (b) {\n        r(this).wrapInner(a.call(this, b));\n      }) : this.each(function () {\n        var b = r(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function wrap(a) {\n      var b = r.isFunction(a);\n      return this.each(function (c) {\n        r(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function unwrap(a) {\n      return this.parent(a).not(\"body\").each(function () {\n        r(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), r.expr.pseudos.hidden = function (a) {\n    return !r.expr.pseudos.visible(a);\n  }, r.expr.pseudos.visible = function (a) {\n    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);\n  }, r.ajaxSettings.xhr = function () {\n    try {\n      return new a.XMLHttpRequest();\n    } catch (b) {}\n  };\n  var Rb = {\n    0: 200,\n    1223: 204\n  },\n      Sb = r.ajaxSettings.xhr();\n  o.cors = !!Sb && \"withCredentials\" in Sb, o.ajax = Sb = !!Sb, r.ajaxTransport(function (b) {\n    var _c, d;\n\n    if (o.cors || Sb && !b.crossDomain) return {\n      send: function send(e, f) {\n        var g,\n            h = b.xhr();\n        if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) {\n          h[g] = b.xhrFields[g];\n        }\n        b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e[\"X-Requested-With\"] || (e[\"X-Requested-With\"] = \"XMLHttpRequest\");\n\n        for (g in e) {\n          h.setRequestHeader(g, e[g]);\n        }\n\n        _c = function c(a) {\n          return function () {\n            _c && (_c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, \"abort\" === a ? h.abort() : \"error\" === a ? \"number\" != typeof h.status ? f(0, \"error\") : f(h.status, h.statusText) : f(Rb[h.status] || h.status, h.statusText, \"text\" !== (h.responseType || \"text\") || \"string\" != typeof h.responseText ? {\n              binary: h.response\n            } : {\n              text: h.responseText\n            }, h.getAllResponseHeaders()));\n          };\n        }, h.onload = _c(), d = h.onerror = _c(\"error\"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {\n          4 === h.readyState && a.setTimeout(function () {\n            _c && d();\n          });\n        }, _c = _c(\"abort\");\n\n        try {\n          h.send(b.hasContent && b.data || null);\n        } catch (i) {\n          if (_c) throw i;\n        }\n      },\n      abort: function abort() {\n        _c && _c();\n      }\n    };\n  }), r.ajaxPrefilter(function (a) {\n    a.crossDomain && (a.contents.script = !1);\n  }), r.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(a) {\n        return r.globalEval(a), a;\n      }\n    }\n  }), r.ajaxPrefilter(\"script\", function (a) {\n    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = \"GET\");\n  }), r.ajaxTransport(\"script\", function (a) {\n    if (a.crossDomain) {\n      var b, _c2;\n\n      return {\n        send: function send(e, f) {\n          b = r(\"<script>\").prop({\n            charset: a.scriptCharset,\n            src: a.url\n          }).on(\"load error\", _c2 = function c(a) {\n            b.remove(), _c2 = null, a && f(\"error\" === a.type ? 404 : 200, a.type);\n          }), d.head.appendChild(b[0]);\n        },\n        abort: function abort() {\n          _c2 && _c2();\n        }\n      };\n    }\n  });\n  var Tb = [],\n      Ub = /(=)\\?(?=&|$)|\\?\\?/;\n  r.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var a = Tb.pop() || r.expando + \"_\" + ub++;\n      return this[a] = !0, a;\n    }\n  }), r.ajaxPrefilter(\"json jsonp\", function (b, c, d) {\n    var e,\n        f,\n        g,\n        h = b.jsonp !== !1 && (Ub.test(b.url) ? \"url\" : \"string\" == typeof b.data && 0 === (b.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Ub.test(b.data) && \"data\");\n    if (h || \"jsonp\" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Ub, \"$1\" + e) : b.jsonp !== !1 && (b.url += (vb.test(b.url) ? \"&\" : \"?\") + b.jsonp + \"=\" + e), b.converters[\"script json\"] = function () {\n      return g || r.error(e + \" was not called\"), g[0];\n    }, b.dataTypes[0] = \"json\", f = a[e], a[e] = function () {\n      g = arguments;\n    }, d.always(function () {\n      void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Tb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;\n    }), \"script\";\n  }), o.createHTMLDocument = function () {\n    var a = d.implementation.createHTMLDocument(\"\").body;\n    return a.innerHTML = \"<form></form><form></form>\", 2 === a.childNodes.length;\n  }(), r.parseHTML = function (a, b, c) {\n    if (\"string\" != typeof a) return [];\n    \"boolean\" == typeof b && (c = b, b = !1);\n    var e, f, g;\n    return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(\"\"), e = b.createElement(\"base\"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));\n  }, r.fn.load = function (a, b, c) {\n    var d,\n        e,\n        f,\n        g = this,\n        h = a.indexOf(\" \");\n    return h > -1 && (d = pb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && \"object\" == _typeof(b) && (e = \"POST\"), g.length > 0 && r.ajax({\n      url: a,\n      type: e || \"GET\",\n      dataType: \"html\",\n      data: b\n    }).done(function (a) {\n      f = arguments, g.html(d ? r(\"<div>\").append(r.parseHTML(a)).find(d) : a);\n    }).always(c && function (a, b) {\n      g.each(function () {\n        c.apply(this, f || [a.responseText, b, a]);\n      });\n    }), this;\n  }, r.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (a, b) {\n    r.fn[b] = function (a) {\n      return this.on(b, a);\n    };\n  }), r.expr.pseudos.animated = function (a) {\n    return r.grep(r.timers, function (b) {\n      return a === b.elem;\n    }).length;\n  }, r.offset = {\n    setOffset: function setOffset(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = r.css(a, \"position\"),\n          l = r(a),\n          m = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = r.css(a, \"top\"), i = r.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && (f + i).indexOf(\"auto\") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, m) : l.css(m);\n    }\n  }, r.fn.extend({\n    offset: function offset(a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        r.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d,\n          e,\n          f = this[0];\n      if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, {\n        top: d.top + e.pageYOffset - c.clientTop,\n        left: d.left + e.pageXOffset - c.clientLeft\n      }) : {\n        top: 0,\n        left: 0\n      };\n    },\n    position: function position() {\n      if (this[0]) {\n        var a,\n            b,\n            c = this[0],\n            d = {\n          top: 0,\n          left: 0\n        };\n        return \"fixed\" === r.css(c, \"position\") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], \"html\") || (d = a.offset()), d = {\n          top: d.top + r.css(a[0], \"borderTopWidth\", !0),\n          left: d.left + r.css(a[0], \"borderLeftWidth\", !0)\n        }), {\n          top: b.top - d.top - r.css(c, \"marginTop\", !0),\n          left: b.left - d.left - r.css(c, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var a = this.offsetParent;\n\n        while (a && \"static\" === r.css(a, \"position\")) {\n          a = a.offsetParent;\n        }\n\n        return a || ra;\n      });\n    }\n  }), r.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (a, b) {\n    var c = \"pageYOffset\" === b;\n\n    r.fn[a] = function (d) {\n      return T(this, function (a, d, e) {\n        var f;\n        return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);\n      }, a, d, arguments.length);\n    };\n  }), r.each([\"top\", \"left\"], function (a, b) {\n    r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {\n      if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + \"px\" : c;\n    });\n  }), r.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    r.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      r.fn[d] = function (e, f) {\n        var g = arguments.length && (c || \"boolean\" != typeof e),\n            h = c || (e === !0 || f === !0 ? \"margin\" : \"border\");\n        return T(this, function (b, c, e) {\n          var f;\n          return r.isWindow(b) ? 0 === d.indexOf(\"outer\") ? b[\"inner\" + a] : b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body[\"scroll\" + a], f[\"scroll\" + a], b.body[\"offset\" + a], f[\"offset\" + a], f[\"client\" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);\n        }, b, g ? e : void 0, g);\n      };\n    });\n  }), r.fn.extend({\n    bind: function bind(a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function unbind(a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function delegate(a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function undelegate(a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  }), r.holdReady = function (a) {\n    a ? r.readyWait++ : r.ready(!0);\n  }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return r;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Vb = a.jQuery,\n      Wb = a.$;\n  return r.noConflict = function (b) {\n    return a.$ === r && (a.$ = Wb), b && a.jQuery === r && (a.jQuery = Vb), r;\n  }, b || (a.jQuery = a.$ = r), r;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEIsTUFBRixHQUFTRCxFQUEzQixDQUFsQixFQUFpRG52QixDQUF4RDtBQUEwRCxHQUFuRixFQUFvRnBDLENBQUMsS0FBR0QsQ0FBQyxDQUFDeXhCLE1BQUYsR0FBU3p4QixDQUFDLENBQUMwSSxDQUFGLEdBQUlyRyxDQUFoQixDQUFyRixFQUF3R0EsQ0FBL0c7QUFBaUgsQ0FGNzhyQixDQUFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvcmUvanF1ZXJ5Lm1pbi5qcz8yNTE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBqUXVlcnkgdjMuMi4xIHwgKGMpIEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuIWZ1bmN0aW9uKGEsYil7XCJ1c2Ugc3RyaWN0XCI7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBiKGEpfTpiKGEpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKGEsYil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9W10sZD1hLmRvY3VtZW50LGU9T2JqZWN0LmdldFByb3RvdHlwZU9mLGY9Yy5zbGljZSxnPWMuY29uY2F0LGg9Yy5wdXNoLGk9Yy5pbmRleE9mLGo9e30saz1qLnRvU3RyaW5nLGw9ai5oYXNPd25Qcm9wZXJ0eSxtPWwudG9TdHJpbmcsbj1tLmNhbGwoT2JqZWN0KSxvPXt9O2Z1bmN0aW9uIHAoYSxiKXtiPWJ8fGQ7dmFyIGM9Yi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2MudGV4dD1hLGIuaGVhZC5hcHBlbmRDaGlsZChjKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpfXZhciBxPVwiMy4yLjFcIixyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyByLmZuLmluaXQoYSxiKX0scz0vXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csdD0vXi1tcy0vLHU9Ly0oW2Etel0pL2csdj1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O3IuZm49ci5wcm90b3R5cGU9e2pxdWVyeTpxLGNvbnN0cnVjdG9yOnIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBmLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9mLmNhbGwodGhpcyk6YTwwP3RoaXNbYSt0aGlzLmxlbmd0aF06dGhpc1thXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGEpe3ZhciBiPXIubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGEpO3JldHVybiBiLnByZXZPYmplY3Q9dGhpcyxifSxlYWNoOmZ1bmN0aW9uKGEpe3JldHVybiByLmVhY2godGhpcyxhKX0sbWFwOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhyLm1hcCh0aGlzLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEuY2FsbChiLGMsYil9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5sZW5ndGgsYz0rYSsoYTwwP2I6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGM+PTAmJmM8Yj9bdGhpc1tjXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6aCxzb3J0OmMuc29ydCxzcGxpY2U6Yy5zcGxpY2V9LHIuZXh0ZW5kPXIuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZSxmLGc9YXJndW1lbnRzWzBdfHx7fSxoPTEsaT1hcmd1bWVudHMubGVuZ3RoLGo9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgZyYmKGo9ZyxnPWFyZ3VtZW50c1toXXx8e30saCsrKSxcIm9iamVjdFwiPT10eXBlb2YgZ3x8ci5pc0Z1bmN0aW9uKGcpfHwoZz17fSksaD09PWkmJihnPXRoaXMsaC0tKTtoPGk7aCsrKWlmKG51bGwhPShhPWFyZ3VtZW50c1toXSkpZm9yKGIgaW4gYSljPWdbYl0sZD1hW2JdLGchPT1kJiYoaiYmZCYmKHIuaXNQbGFpbk9iamVjdChkKXx8KGU9QXJyYXkuaXNBcnJheShkKSkpPyhlPyhlPSExLGY9YyYmQXJyYXkuaXNBcnJheShjKT9jOltdKTpmPWMmJnIuaXNQbGFpbk9iamVjdChjKT9jOnt9LGdbYl09ci5leHRlbmQoaixmLGQpKTp2b2lkIDAhPT1kJiYoZ1tiXT1kKSk7cmV0dXJuIGd9LHIuZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKHErTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoYSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT09ci50eXBlKGEpfSxpc1dpbmRvdzpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YSYmYT09PWEud2luZG93fSxpc051bWVyaWM6ZnVuY3Rpb24oYSl7dmFyIGI9ci50eXBlKGEpO3JldHVybihcIm51bWJlclwiPT09Ynx8XCJzdHJpbmdcIj09PWIpJiYhaXNOYU4oYS1wYXJzZUZsb2F0KGEpKX0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihhKXt2YXIgYixjO3JldHVybiEoIWF8fFwiW29iamVjdCBPYmplY3RdXCIhPT1rLmNhbGwoYSkpJiYoIShiPWUoYSkpfHwoYz1sLmNhbGwoYixcImNvbnN0cnVjdG9yXCIpJiZiLmNvbnN0cnVjdG9yLFwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJm0uY2FsbChjKT09PW4pKX0saXNFbXB0eU9iamVjdDpmdW5jdGlvbihhKXt2YXIgYjtmb3IoYiBpbiBhKXJldHVybiExO3JldHVybiEwfSx0eXBlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP2ErXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYT9qW2suY2FsbChhKV18fFwib2JqZWN0XCI6dHlwZW9mIGF9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oYSl7cChhKX0sY2FtZWxDYXNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UodCxcIm1zLVwiKS5yZXBsYWNlKHUsdil9LGVhY2g6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTA7aWYodyhhKSl7Zm9yKGM9YS5sZW5ndGg7ZDxjO2QrKylpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWt9ZWxzZSBmb3IoZCBpbiBhKWlmKGIuY2FsbChhW2RdLGQsYVtkXSk9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOihhK1wiXCIpLnJlcGxhY2UocyxcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJih3KE9iamVjdChhKSk/ci5tZXJnZShjLFwic3RyaW5nXCI9PXR5cGVvZiBhP1thXTphKTpoLmNhbGwoYyxhKSksY30saW5BcnJheTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG51bGw9PWI/LTE6aS5jYWxsKGIsYSxjKX0sbWVyZ2U6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9K2IubGVuZ3RoLGQ9MCxlPWEubGVuZ3RoO2Q8YztkKyspYVtlKytdPWJbZF07cmV0dXJuIGEubGVuZ3RoPWUsYX0sZ3JlcDpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkLGU9W10sZj0wLGc9YS5sZW5ndGgsaD0hYztmPGc7ZisrKWQ9IWIoYVtmXSxmKSxkIT09aCYmZS5wdXNoKGFbZl0pO3JldHVybiBlfSxtYXA6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj0wLGg9W107aWYodyhhKSlmb3IoZD1hLmxlbmd0aDtmPGQ7ZisrKWU9YihhW2ZdLGYsYyksbnVsbCE9ZSYmaC5wdXNoKGUpO2Vsc2UgZm9yKGYgaW4gYSllPWIoYVtmXSxmLGMpLG51bGwhPWUmJmgucHVzaChlKTtyZXR1cm4gZy5hcHBseShbXSxoKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiJiYoYz1hW2JdLGI9YSxhPWMpLHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gZD1mLmNhbGwoYXJndW1lbnRzLDIpLGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGQuY29uY2F0KGYuY2FsbChhcmd1bWVudHMpKSl9LGUuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxyLmd1aWQrKyxlfSxub3c6RGF0ZS5ub3csc3VwcG9ydDpvfSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoci5mbltTeW1ib2wuaXRlcmF0b3JdPWNbU3ltYm9sLml0ZXJhdG9yXSksci5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtqW1wiW29iamVjdCBcIitiK1wiXVwiXT1iLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiB3KGEpe3ZhciBiPSEhYSYmXCJsZW5ndGhcImluIGEmJmEubGVuZ3RoLGM9ci50eXBlKGEpO3JldHVyblwiZnVuY3Rpb25cIiE9PWMmJiFyLmlzV2luZG93KGEpJiYoXCJhcnJheVwiPT09Y3x8MD09PWJ8fFwibnVtYmVyXCI9PXR5cGVvZiBiJiZiPjAmJmItMSBpbiBhKX12YXIgeD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1PVwic2l6emxlXCIrMSpuZXcgRGF0ZSx2PWEuZG9jdW1lbnQsdz0wLHg9MCx5PWhhKCksej1oYSgpLEE9aGEoKSxCPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1iJiYobD0hMCksMH0sQz17fS5oYXNPd25Qcm9wZXJ0eSxEPVtdLEU9RC5wb3AsRj1ELnB1c2gsRz1ELnB1c2gsSD1ELnNsaWNlLEk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspaWYoYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LEo9XCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLEs9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLEw9XCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLE09XCJcXFxcW1wiK0srXCIqKFwiK0wrXCIpKD86XCIrSytcIiooWypeJHwhfl0/PSlcIitLK1wiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIrTCtcIikpfClcIitLK1wiKlxcXFxdXCIsTj1cIjooXCIrTCtcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIrTStcIikqKXwuKilcXFxcKXwpXCIsTz1uZXcgUmVnRXhwKEsrXCIrXCIsXCJnXCIpLFA9bmV3IFJlZ0V4cChcIl5cIitLK1wiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIitLK1wiKyRcIixcImdcIiksUT1uZXcgUmVnRXhwKFwiXlwiK0srXCIqLFwiK0srXCIqXCIpLFI9bmV3IFJlZ0V4cChcIl5cIitLK1wiKihbPit+XXxcIitLK1wiKVwiK0srXCIqXCIpLFM9bmV3IFJlZ0V4cChcIj1cIitLK1wiKihbXlxcXFxdJ1xcXCJdKj8pXCIrSytcIipcXFxcXVwiLFwiZ1wiKSxUPW5ldyBSZWdFeHAoTiksVT1uZXcgUmVnRXhwKFwiXlwiK0wrXCIkXCIpLFY9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIitMK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK0wrXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIitMK1wifFsqXSlcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK00pLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK04pLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK0srXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIitLK1wiKig/OihbKy1dfClcIitLK1wiKihcXFxcZCspfCkpXCIrSytcIipcXFxcKXwpXCIsXCJpXCIpLGJvb2w6bmV3IFJlZ0V4cChcIl4oPzpcIitKK1wiKSRcIixcImlcIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoXCJeXCIrSytcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIrSytcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrSytcIipcXFxcKXwpKD89W14tXXwkKVwiLFwiaVwiKX0sVz0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFg9L15oXFxkJC9pLFk9L15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxaPS9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLCQ9L1srfl0vLF89bmV3IFJlZ0V4cChcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiK0srXCI/fChcIitLK1wiKXwuKVwiLFwiaWdcIiksYWE9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVwiMHhcIitiLTY1NTM2O3JldHVybiBkIT09ZHx8Yz9iOmQ8MD9TdHJpbmcuZnJvbUNoYXJDb2RlKGQrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoZD4+MTB8NTUyOTYsMTAyMyZkfDU2MzIwKX0sYmE9LyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csY2E9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9cIlxcMFwiPT09YT9cIlxcdWZmZmRcIjphLnNsaWNlKDAsLTEpK1wiXFxcXFwiK2EuY2hhckNvZGVBdChhLmxlbmd0aC0xKS50b1N0cmluZygxNikrXCIgXCI6XCJcXFxcXCIrYX0sZGE9ZnVuY3Rpb24oKXttKCl9LGVhPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITAmJihcImZvcm1cImluIGF8fFwibGFiZWxcImluIGEpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtHLmFwcGx5KEQ9SC5jYWxsKHYuY2hpbGROb2Rlcyksdi5jaGlsZE5vZGVzKSxEW3YuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGZhKXtHPXthcHBseTpELmxlbmd0aD9mdW5jdGlvbihhLGIpe0YuYXBwbHkoYSxILmNhbGwoYikpfTpmdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoLGQ9MDt3aGlsZShhW2MrK109YltkKytdKTthLmxlbmd0aD1jLTF9fX1mdW5jdGlvbiBnYShhLGIsZCxlKXt2YXIgZixoLGosayxsLG8scixzPWImJmIub3duZXJEb2N1bWVudCx3PWI/Yi5ub2RlVHlwZTo5O2lmKGQ9ZHx8W10sXCJzdHJpbmdcIiE9dHlwZW9mIGF8fCFhfHwxIT09dyYmOSE9PXcmJjExIT09dylyZXR1cm4gZDtpZighZSYmKChiP2Iub3duZXJEb2N1bWVudHx8Yjp2KSE9PW4mJm0oYiksYj1ifHxuLHApKXtpZigxMSE9PXcmJihsPVouZXhlYyhhKSkpaWYoZj1sWzFdKXtpZig5PT09dyl7aWYoIShqPWIuZ2V0RWxlbWVudEJ5SWQoZikpKXJldHVybiBkO2lmKGouaWQ9PT1mKXJldHVybiBkLnB1c2goaiksZH1lbHNlIGlmKHMmJihqPXMuZ2V0RWxlbWVudEJ5SWQoZikpJiZ0KGIsaikmJmouaWQ9PT1mKXJldHVybiBkLnB1c2goaiksZH1lbHNle2lmKGxbMl0pcmV0dXJuIEcuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSxkO2lmKChmPWxbM10pJiZjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gRy5hcHBseShkLGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShmKSksZH1pZihjLnFzYSYmIUFbYStcIiBcIl0mJighcXx8IXEudGVzdChhKSkpe2lmKDEhPT13KXM9YixyPWE7ZWxzZSBpZihcIm9iamVjdFwiIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXsoaz1iLmdldEF0dHJpYnV0ZShcImlkXCIpKT9rPWsucmVwbGFjZShiYSxjYSk6Yi5zZXRBdHRyaWJ1dGUoXCJpZFwiLGs9dSksbz1nKGEpLGg9by5sZW5ndGg7d2hpbGUoaC0tKW9baF09XCIjXCIraytcIiBcIitzYShvW2hdKTtyPW8uam9pbihcIixcIikscz0kLnRlc3QoYSkmJnFhKGIucGFyZW50Tm9kZSl8fGJ9aWYocil0cnl7cmV0dXJuIEcuYXBwbHkoZCxzLnF1ZXJ5U2VsZWN0b3JBbGwocikpLGR9Y2F0Y2goeCl7fWZpbmFsbHl7az09PXUmJmIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gaShhLnJlcGxhY2UoUCxcIiQxXCIpLGIsZCxlKX1mdW5jdGlvbiBoYSgpe3ZhciBhPVtdO2Z1bmN0aW9uIGIoYyxlKXtyZXR1cm4gYS5wdXNoKGMrXCIgXCIpPmQuY2FjaGVMZW5ndGgmJmRlbGV0ZSBiW2Euc2hpZnQoKV0sYltjK1wiIFwiXT1lfXJldHVybiBifWZ1bmN0aW9uIGlhKGEpe3JldHVybiBhW3VdPSEwLGF9ZnVuY3Rpb24gamEoYSl7dmFyIGI9bi5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7dHJ5e3JldHVybiEhYShiKX1jYXRjaChjKXtyZXR1cm4hMX1maW5hbGx5e2IucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbH19ZnVuY3Rpb24ga2EoYSxiKXt2YXIgYz1hLnNwbGl0KFwifFwiKSxlPWMubGVuZ3RoO3doaWxlKGUtLSlkLmF0dHJIYW5kbGVbY1tlXV09Yn1mdW5jdGlvbiBsYShhLGIpe3ZhciBjPWImJmEsZD1jJiYxPT09YS5ub2RlVHlwZSYmMT09PWIubm9kZVR5cGUmJmEuc291cmNlSW5kZXgtYi5zb3VyY2VJbmRleDtpZihkKXJldHVybiBkO2lmKGMpd2hpbGUoYz1jLm5leHRTaWJsaW5nKWlmKGM9PT1iKXJldHVybi0xO3JldHVybiBhPzE6LTF9ZnVuY3Rpb24gbWEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1jJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBuYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1jfHxcImJ1dHRvblwiPT09YykmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG9hKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm5cImZvcm1cImluIGI/Yi5wYXJlbnROb2RlJiZiLmRpc2FibGVkPT09ITE/XCJsYWJlbFwiaW4gYj9cImxhYmVsXCJpbiBiLnBhcmVudE5vZGU/Yi5wYXJlbnROb2RlLmRpc2FibGVkPT09YTpiLmRpc2FibGVkPT09YTpiLmlzRGlzYWJsZWQ9PT1hfHxiLmlzRGlzYWJsZWQhPT0hYSYmZWEoYik9PT1hOmIuZGlzYWJsZWQ9PT1hOlwibGFiZWxcImluIGImJmIuZGlzYWJsZWQ9PT1hfX1mdW5jdGlvbiBwYShhKXtyZXR1cm4gaWEoZnVuY3Rpb24oYil7cmV0dXJuIGI9K2IsaWEoZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEoW10sYy5sZW5ndGgsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pY1tlPWZbZ11dJiYoY1tlXT0hKGRbZV09Y1tlXSkpfSl9KX1mdW5jdGlvbiBxYShhKXtyZXR1cm4gYSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmF9Yz1nYS5zdXBwb3J0PXt9LGY9Z2EuaXNYTUw9ZnVuY3Rpb24oYSl7dmFyIGI9YSYmKGEub3duZXJEb2N1bWVudHx8YSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiEhYiYmXCJIVE1MXCIhPT1iLm5vZGVOYW1lfSxtPWdhLnNldERvY3VtZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGUsZz1hP2Eub3duZXJEb2N1bWVudHx8YTp2O3JldHVybiBnIT09biYmOT09PWcubm9kZVR5cGUmJmcuZG9jdW1lbnRFbGVtZW50PyhuPWcsbz1uLmRvY3VtZW50RWxlbWVudCxwPSFmKG4pLHYhPT1uJiYoZT1uLmRlZmF1bHRWaWV3KSYmZS50b3AhPT1lJiYoZS5hZGRFdmVudExpc3RlbmVyP2UuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLGRhLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixkYSkpLGMuYXR0cmlidXRlcz1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5jbGFzc05hbWU9XCJpXCIsIWEuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksYy5nZXRFbGVtZW50c0J5VGFnTmFtZT1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChuLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxjLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9WS50ZXN0KG4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksYy5nZXRCeUlkPWphKGZ1bmN0aW9uKGEpe3JldHVybiBvLmFwcGVuZENoaWxkKGEpLmlkPXUsIW4uZ2V0RWxlbWVudHNCeU5hbWV8fCFuLmdldEVsZW1lbnRzQnlOYW1lKHUpLmxlbmd0aH0pLGMuZ2V0QnlJZD8oZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKF8sYWEpO3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PWJ9fSxkLmZpbmQuSUQ9ZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50QnlJZCYmcCl7dmFyIGM9Yi5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz9bY106W119fSk6KGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKTtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlTm9kZSYmYS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIGMmJmMudmFsdWU9PT1ifX0sZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjLGQsZSxmPWIuZ2V0RWxlbWVudEJ5SWQoYSk7aWYoZil7aWYoYz1mLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSxjJiZjLnZhbHVlPT09YSlyZXR1cm5bZl07ZT1iLmdldEVsZW1lbnRzQnlOYW1lKGEpLGQ9MDt3aGlsZShmPWVbZCsrXSlpZihjPWYuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpLGMmJmMudmFsdWU9PT1hKXJldHVybltmXX1yZXR1cm5bXX19KSxkLmZpbmQuVEFHPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZT9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOmMucXNhP2IucXVlcnlTZWxlY3RvckFsbChhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKFwiKlwiPT09YSl7d2hpbGUoYz1mW2UrK10pMT09PWMubm9kZVR5cGUmJmQucHVzaChjKTtyZXR1cm4gZH1yZXR1cm4gZn0sZC5maW5kLkNMQVNTPWMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZwKXJldHVybiBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSl9LHI9W10scT1bXSwoYy5xc2E9WS50ZXN0KG4ucXVlcnlTZWxlY3RvckFsbCkpJiYoamEoZnVuY3Rpb24oYSl7by5hcHBlbmRDaGlsZChhKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrdStcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK3UrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnEucHVzaChcIlsqXiRdPVwiK0srXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHxxLnB1c2goXCJcXFxcW1wiK0srXCIqKD86dmFsdWV8XCIrSitcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIit1K1wiLV1cIikubGVuZ3RofHxxLnB1c2goXCJ+PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHEucHVzaChcIjpjaGVja2VkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcImEjXCIrdStcIisqXCIpLmxlbmd0aHx8cS5wdXNoKFwiLiMuK1srfl1cIil9KSxqYShmdW5jdGlvbihhKXthLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Iuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGEuYXBwZW5kQ2hpbGQoYikuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnEucHVzaChcIm5hbWVcIitLK1wiKlsqXiR8IX5dPz1cIiksMiE9PWEucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmcS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxvLmFwcGVuZENoaWxkKGEpLmRpc2FibGVkPSEwLDIhPT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZxLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIikscS5wdXNoKFwiLC4qOlwiKX0pKSwoYy5tYXRjaGVzU2VsZWN0b3I9WS50ZXN0KHM9by5tYXRjaGVzfHxvLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8by5tb3pNYXRjaGVzU2VsZWN0b3J8fG8ub01hdGNoZXNTZWxlY3Rvcnx8by5tc01hdGNoZXNTZWxlY3RvcikpJiZqYShmdW5jdGlvbihhKXtjLmRpc2Nvbm5lY3RlZE1hdGNoPXMuY2FsbChhLFwiKlwiKSxzLmNhbGwoYSxcIltzIT0nJ106eFwiKSxyLnB1c2goXCIhPVwiLE4pfSkscT1xLmxlbmd0aCYmbmV3IFJlZ0V4cChxLmpvaW4oXCJ8XCIpKSxyPXIubGVuZ3RoJiZuZXcgUmVnRXhwKHIuam9pbihcInxcIikpLGI9WS50ZXN0KG8uY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHQ9Ynx8WS50ZXN0KG8uY29udGFpbnMpP2Z1bmN0aW9uKGEsYil7dmFyIGM9OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YSxkPWImJmIucGFyZW50Tm9kZTtyZXR1cm4gYT09PWR8fCEoIWR8fDEhPT1kLm5vZGVUeXBlfHwhKGMuY29udGFpbnM/Yy5jb250YWlucyhkKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGQpKSl9OmZ1bmN0aW9uKGEsYil7aWYoYil3aGlsZShiPWIucGFyZW50Tm9kZSlpZihiPT09YSlyZXR1cm4hMDtyZXR1cm4hMX0sQj1iP2Z1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgZD0hYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gZD9kOihkPShhLm93bmVyRG9jdW1lbnR8fGEpPT09KGIub3duZXJEb2N1bWVudHx8Yik/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKToxLDEmZHx8IWMuc29ydERldGFjaGVkJiZiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpPT09ZD9hPT09bnx8YS5vd25lckRvY3VtZW50PT09diYmdCh2LGEpPy0xOmI9PT1ufHxiLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYik/MTprP0koayxhKS1JKGssYik6MDo0JmQ/LTE6MSl9OmZ1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgYyxkPTAsZT1hLnBhcmVudE5vZGUsZj1iLnBhcmVudE5vZGUsZz1bYV0saD1bYl07aWYoIWV8fCFmKXJldHVybiBhPT09bj8tMTpiPT09bj8xOmU/LTE6Zj8xOms/SShrLGEpLUkoayxiKTowO2lmKGU9PT1mKXJldHVybiBsYShhLGIpO2M9YTt3aGlsZShjPWMucGFyZW50Tm9kZSlnLnVuc2hpZnQoYyk7Yz1iO3doaWxlKGM9Yy5wYXJlbnROb2RlKWgudW5zaGlmdChjKTt3aGlsZShnW2RdPT09aFtkXSlkKys7cmV0dXJuIGQ/bGEoZ1tkXSxoW2RdKTpnW2RdPT09dj8tMTpoW2RdPT09dj8xOjB9LG4pOm59LGdhLm1hdGNoZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ2EoYSxudWxsLG51bGwsYil9LGdhLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihhLGIpe2lmKChhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSxiPWIucmVwbGFjZShTLFwiPSckMSddXCIpLGMubWF0Y2hlc1NlbGVjdG9yJiZwJiYhQVtiK1wiIFwiXSYmKCFyfHwhci50ZXN0KGIpKSYmKCFxfHwhcS50ZXN0KGIpKSl0cnl7dmFyIGQ9cy5jYWxsKGEsYik7aWYoZHx8Yy5kaXNjb25uZWN0ZWRNYXRjaHx8YS5kb2N1bWVudCYmMTEhPT1hLmRvY3VtZW50Lm5vZGVUeXBlKXJldHVybiBkfWNhdGNoKGUpe31yZXR1cm4gZ2EoYixuLG51bGwsW2FdKS5sZW5ndGg+MH0sZ2EuY29udGFpbnM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksdChhLGIpfSxnYS5hdHRyPWZ1bmN0aW9uKGEsYil7KGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpO3ZhciBlPWQuYXR0ckhhbmRsZVtiLnRvTG93ZXJDYXNlKCldLGY9ZSYmQy5jYWxsKGQuYXR0ckhhbmRsZSxiLnRvTG93ZXJDYXNlKCkpP2UoYSxiLCFwKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PWY/ZjpjLmF0dHJpYnV0ZXN8fCFwP2EuZ2V0QXR0cmlidXRlKGIpOihmPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmYuc3BlY2lmaWVkP2YudmFsdWU6bnVsbH0sZ2EuZXNjYXBlPWZ1bmN0aW9uKGEpe3JldHVybihhK1wiXCIpLnJlcGxhY2UoYmEsY2EpfSxnYS5lcnJvcj1mdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIithKX0sZ2EudW5pcXVlU29ydD1mdW5jdGlvbihhKXt2YXIgYixkPVtdLGU9MCxmPTA7aWYobD0hYy5kZXRlY3REdXBsaWNhdGVzLGs9IWMuc29ydFN0YWJsZSYmYS5zbGljZSgwKSxhLnNvcnQoQiksbCl7d2hpbGUoYj1hW2YrK10pYj09PWFbZl0mJihlPWQucHVzaChmKSk7d2hpbGUoZS0tKWEuc3BsaWNlKGRbZV0sMSl9cmV0dXJuIGs9bnVsbCxhfSxlPWdhLmdldFRleHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1cIlwiLGQ9MCxmPWEubm9kZVR5cGU7aWYoZil7aWYoMT09PWZ8fDk9PT1mfHwxMT09PWYpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhLnRleHRDb250ZW50KXJldHVybiBhLnRleHRDb250ZW50O2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZyljKz1lKGEpfWVsc2UgaWYoMz09PWZ8fDQ9PT1mKXJldHVybiBhLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKGI9YVtkKytdKWMrPWUoYik7cmV0dXJuIGN9LGQ9Z2Euc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86aWEsbWF0Y2g6VixhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0ucmVwbGFjZShfLGFhKSxhWzNdPShhWzNdfHxhWzRdfHxhWzVdfHxcIlwiKS5yZXBsYWNlKF8sYWEpLFwifj1cIj09PWFbMl0mJihhWzNdPVwiIFwiK2FbM10rXCIgXCIpLGEuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1hWzFdLnNsaWNlKDAsMyk/KGFbM118fGdhLmVycm9yKGFbMF0pLGFbNF09KyhhWzRdP2FbNV0rKGFbNl18fDEpOjIqKFwiZXZlblwiPT09YVszXXx8XCJvZGRcIj09PWFbM10pKSxhWzVdPSsoYVs3XSthWzhdfHxcIm9kZFwiPT09YVszXSkpOmFbM10mJmdhLmVycm9yKGFbMF0pLGF9LFBTRVVETzpmdW5jdGlvbihhKXt2YXIgYixjPSFhWzZdJiZhWzJdO3JldHVybiBWLkNISUxELnRlc3QoYVswXSk/bnVsbDooYVszXT9hWzJdPWFbNF18fGFbNV18fFwiXCI6YyYmVC50ZXN0KGMpJiYoYj1nKGMsITApKSYmKGI9Yy5pbmRleE9mKFwiKVwiLGMubGVuZ3RoLWIpLWMubGVuZ3RoKSYmKGFbMF09YVswXS5zbGljZSgwLGIpLGFbMl09Yy5zbGljZSgwLGIpKSxhLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKF8sYWEpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1hP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ifX0sQ0xBU1M6ZnVuY3Rpb24oYSl7dmFyIGI9eVthK1wiIFwiXTtyZXR1cm4gYnx8KGI9bmV3IFJlZ0V4cChcIihefFwiK0srXCIpXCIrYStcIihcIitLK1wifCQpXCIpKSYmeShhLGZ1bmN0aW9uKGEpe3JldHVybiBiLnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGEuY2xhc3NOYW1lJiZhLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlJiZhLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9Z2EuYXR0cihkLGEpO3JldHVybiBudWxsPT1lP1wiIT1cIj09PWI6IWJ8fChlKz1cIlwiLFwiPVwiPT09Yj9lPT09YzpcIiE9XCI9PT1iP2UhPT1jOlwiXj1cIj09PWI/YyYmMD09PWUuaW5kZXhPZihjKTpcIio9XCI9PT1iP2MmJmUuaW5kZXhPZihjKT4tMTpcIiQ9XCI9PT1iP2MmJmUuc2xpY2UoLWMubGVuZ3RoKT09PWM6XCJ+PVwiPT09Yj8oXCIgXCIrZS5yZXBsYWNlKE8sXCIgXCIpK1wiIFwiKS5pbmRleE9mKGMpPi0xOlwifD1cIj09PWImJihlPT09Y3x8ZS5zbGljZSgwLGMubGVuZ3RoKzEpPT09YytcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm50aFwiIT09YS5zbGljZSgwLDMpLGc9XCJsYXN0XCIhPT1hLnNsaWNlKC00KSxoPVwib2YtdHlwZVwiPT09YjtyZXR1cm4gMT09PWQmJjA9PT1lP2Z1bmN0aW9uKGEpe3JldHVybiEhYS5wYXJlbnROb2RlfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG0sbixvLHA9ZiE9PWc/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIscT1iLnBhcmVudE5vZGUscj1oJiZiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscz0haSYmIWgsdD0hMTtpZihxKXtpZihmKXt3aGlsZShwKXttPWI7d2hpbGUobT1tW3BdKWlmKGg/bS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bS5ub2RlVHlwZSlyZXR1cm4hMTtvPXA9XCJvbmx5XCI9PT1hJiYhbyYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKG89W2c/cS5maXJzdENoaWxkOnEubGFzdENoaWxkXSxnJiZzKXttPXEsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biYmalsyXSxtPW4mJnEuY2hpbGROb2Rlc1tuXTt3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigxPT09bS5ub2RlVHlwZSYmKyt0JiZtPT09Yil7a1thXT1bdyxuLHRdO2JyZWFrfX1lbHNlIGlmKHMmJihtPWIsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biksdD09PSExKXdoaWxlKG09KytuJiZtJiZtW3BdfHwodD1uPTApfHxvLnBvcCgpKWlmKChoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpJiYrK3QmJihzJiYobD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksa1thXT1bdyx0XSksbT09PWIpKWJyZWFrO3JldHVybiB0LT1lLHQ9PT1kfHx0JWQ9PT0wJiZ0L2Q+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGEsYil7dmFyIGMsZT1kLnBzZXVkb3NbYV18fGQuc2V0RmlsdGVyc1thLnRvTG93ZXJDYXNlKCldfHxnYS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrYSk7cmV0dXJuIGVbdV0/ZShiKTplLmxlbmd0aD4xPyhjPVthLGEsXCJcIixiXSxkLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoYS50b0xvd2VyQ2FzZSgpKT9pYShmdW5jdGlvbihhLGMpe3ZhciBkLGY9ZShhLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWQ9SShhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDppYShmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9aChhLnJlcGxhY2UoUCxcIiQxXCIpKTtyZXR1cm4gZFt1XT9pYShmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSxiWzBdPW51bGwsIWMucG9wKCl9fSksaGFzOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZ2EoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczppYShmdW5jdGlvbihhKXtyZXR1cm4gYT1hLnJlcGxhY2UoXyxhYSksZnVuY3Rpb24oYil7cmV0dXJuKGIudGV4dENvbnRlbnR8fGIuaW5uZXJUZXh0fHxlKGIpKS5pbmRleE9mKGEpPi0xfX0pLGxhbmc6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIFUudGVzdChhfHxcIlwiKXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIithKSxhPWEucmVwbGFjZShfLGFhKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGIpe3ZhciBjO2RvIGlmKGM9cD9iLmxhbmc6Yi5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8Yi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybiBjPWMudG9Mb3dlckNhc2UoKSxjPT09YXx8MD09PWMuaW5kZXhPZihhK1wiLVwiKTt3aGlsZSgoYj1iLnBhcmVudE5vZGUpJiYxPT09Yi5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGIpe3ZhciBjPWEubG9jYXRpb24mJmEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyYmYy5zbGljZSgxKT09PWIuaWR9LHJvb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1vfSxmb2N1czpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW4uYWN0aXZlRWxlbWVudCYmKCFuLmhhc0ZvY3VzfHxuLmhhc0ZvY3VzKCkpJiYhIShhLnR5cGV8fGEuaHJlZnx8fmEudGFiSW5kZXgpfSxlbmFibGVkOm9hKCExKSxkaXNhYmxlZDpvYSghMCksY2hlY2tlZDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmISFhLmNoZWNrZWR8fFwib3B0aW9uXCI9PT1iJiYhIWEuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LGEuc2VsZWN0ZWQ9PT0hMH0sZW1wdHk6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWlmKGEubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGEpe3JldHVybiFkLnBzZXVkb3MuZW1wdHkoYSl9LGhlYWRlcjpmdW5jdGlvbihhKXtyZXR1cm4gWC50ZXN0KGEubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihhKXtyZXR1cm4gVy50ZXN0KGEubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJlwiYnV0dG9uXCI9PT1hLnR5cGV8fFwiYnV0dG9uXCI9PT1ifSx0ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVyblwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmXCJ0ZXh0XCI9PT1hLnR5cGUmJihudWxsPT0oYj1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpfHxcInRleHRcIj09PWIudG9Mb3dlckNhc2UoKSl9LGZpcnN0OnBhKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpwYShmdW5jdGlvbihhLGIpe3JldHVybltiLTFdfSksZXE6cGEoZnVuY3Rpb24oYSxiLGMpe3JldHVybltjPDA/YytiOmNdfSksZXZlbjpwYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wO2M8YjtjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLG9kZDpwYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0xO2M8YjtjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLGx0OnBhKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YzwwP2MrYjpjOy0tZD49MDspYS5wdXNoKGQpO3JldHVybiBhfSksZ3Q6cGEoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1jPDA/YytiOmM7KytkPGI7KWEucHVzaChkKTtyZXR1cm4gYX0pfX0sZC5wc2V1ZG9zLm50aD1kLnBzZXVkb3MuZXE7Zm9yKGIgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pZC5wc2V1ZG9zW2JdPW1hKGIpO2ZvcihiIGlue3N1Ym1pdDohMCxyZXNldDohMH0pZC5wc2V1ZG9zW2JdPW5hKGIpO2Z1bmN0aW9uIHJhKCl7fXJhLnByb3RvdHlwZT1kLmZpbHRlcnM9ZC5wc2V1ZG9zLGQuc2V0RmlsdGVycz1uZXcgcmEsZz1nYS50b2tlbml6ZT1mdW5jdGlvbihhLGIpe3ZhciBjLGUsZixnLGgsaSxqLGs9elthK1wiIFwiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpe2MmJiEoZT1RLmV4ZWMoaCkpfHwoZSYmKGg9aC5zbGljZShlWzBdLmxlbmd0aCl8fGgpLGkucHVzaChmPVtdKSksYz0hMSwoZT1SLmV4ZWMoaCkpJiYoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZVswXS5yZXBsYWNlKFAsXCIgXCIpfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7Zm9yKGcgaW4gZC5maWx0ZXIpIShlPVZbZ10uZXhlYyhoKSl8fGpbZ10mJiEoZT1qW2ddKGUpKXx8KGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmcsbWF0Y2hlczplfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7aWYoIWMpYnJlYWt9cmV0dXJuIGI/aC5sZW5ndGg6aD9nYS5lcnJvcihhKTp6KGEsaSkuc2xpY2UoMCl9O2Z1bmN0aW9uIHNhKGEpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGgsZD1cIlwiO2I8YztiKyspZCs9YVtiXS52YWx1ZTtyZXR1cm4gZH1mdW5jdGlvbiB0YShhLGIsYyl7dmFyIGQ9Yi5kaXIsZT1iLm5leHQsZj1lfHxkLGc9YyYmXCJwYXJlbnROb2RlXCI9PT1mLGg9eCsrO3JldHVybiBiLmZpcnN0P2Z1bmN0aW9uKGIsYyxlKXt3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGcpcmV0dXJuIGEoYixjLGUpO3JldHVybiExfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG09W3csaF07aWYoaSl7d2hpbGUoYj1iW2RdKWlmKCgxPT09Yi5ub2RlVHlwZXx8ZykmJmEoYixjLGkpKXJldHVybiEwfWVsc2Ugd2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxnKWlmKGw9Ylt1XXx8KGJbdV09e30pLGs9bFtiLnVuaXF1ZUlEXXx8KGxbYi51bmlxdWVJRF09e30pLGUmJmU9PT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpYj1iW2RdfHxiO2Vsc2V7aWYoKGo9a1tmXSkmJmpbMF09PT13JiZqWzFdPT09aClyZXR1cm4gbVsyXT1qWzJdO2lmKGtbZl09bSxtWzJdPWEoYixjLGkpKXJldHVybiEwfXJldHVybiExfX1mdW5jdGlvbiB1YShhKXtyZXR1cm4gYS5sZW5ndGg+MT9mdW5jdGlvbihiLGMsZCl7dmFyIGU9YS5sZW5ndGg7d2hpbGUoZS0tKWlmKCFhW2VdKGIsYyxkKSlyZXR1cm4hMTtyZXR1cm4hMH06YVswXX1mdW5jdGlvbiB2YShhLGIsYyl7Zm9yKHZhciBkPTAsZT1iLmxlbmd0aDtkPGU7ZCsrKWdhKGEsYltkXSxjKTtyZXR1cm4gY31mdW5jdGlvbiB3YShhLGIsYyxkLGUpe2Zvcih2YXIgZixnPVtdLGg9MCxpPWEubGVuZ3RoLGo9bnVsbCE9YjtoPGk7aCsrKShmPWFbaF0pJiYoYyYmIWMoZixkLGUpfHwoZy5wdXNoKGYpLGomJmIucHVzaChoKSkpO3JldHVybiBnfWZ1bmN0aW9uIHhhKGEsYixjLGQsZSxmKXtyZXR1cm4gZCYmIWRbdV0mJihkPXhhKGQpKSxlJiYhZVt1XSYmKGU9eGEoZSxmKSksaWEoZnVuY3Rpb24oZixnLGgsaSl7dmFyIGosayxsLG09W10sbj1bXSxvPWcubGVuZ3RoLHA9Znx8dmEoYnx8XCIqXCIsaC5ub2RlVHlwZT9baF06aCxbXSkscT0hYXx8IWYmJmI/cDp3YShwLG0sYSxoLGkpLHI9Yz9lfHwoZj9hOm98fGQpP1tdOmc6cTtpZihjJiZjKHEscixoLGkpLGQpe2o9d2EocixuKSxkKGosW10saCxpKSxrPWoubGVuZ3RoO3doaWxlKGstLSkobD1qW2tdKSYmKHJbbltrXV09IShxW25ba11dPWwpKX1pZihmKXtpZihlfHxhKXtpZihlKXtqPVtdLGs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiZqLnB1c2gocVtrXT1sKTtlKG51bGwscj1bXSxqLGkpfWs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiYoaj1lP0koZixsKTptW2tdKT4tMSYmKGZbal09IShnW2pdPWwpKX19ZWxzZSByPXdhKHI9PT1nP3Iuc3BsaWNlKG8sci5sZW5ndGgpOnIpLGU/ZShudWxsLGcscixpKTpHLmFwcGx5KGcscil9KX1mdW5jdGlvbiB5YShhKXtmb3IodmFyIGIsYyxlLGY9YS5sZW5ndGgsZz1kLnJlbGF0aXZlW2FbMF0udHlwZV0saD1nfHxkLnJlbGF0aXZlW1wiIFwiXSxpPWc/MTowLGs9dGEoZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1ifSxoLCEwKSxsPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBJKGIsYSk+LTF9LGgsITApLG09W2Z1bmN0aW9uKGEsYyxkKXt2YXIgZT0hZyYmKGR8fGMhPT1qKXx8KChiPWMpLm5vZGVUeXBlP2soYSxjLGQpOmwoYSxjLGQpKTtyZXR1cm4gYj1udWxsLGV9XTtpPGY7aSsrKWlmKGM9ZC5yZWxhdGl2ZVthW2ldLnR5cGVdKW09W3RhKHVhKG0pLGMpXTtlbHNle2lmKGM9ZC5maWx0ZXJbYVtpXS50eXBlXS5hcHBseShudWxsLGFbaV0ubWF0Y2hlcyksY1t1XSl7Zm9yKGU9KytpO2U8ZjtlKyspaWYoZC5yZWxhdGl2ZVthW2VdLnR5cGVdKWJyZWFrO3JldHVybiB4YShpPjEmJnVhKG0pLGk+MSYmc2EoYS5zbGljZSgwLGktMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWFbaS0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZShQLFwiJDFcIiksYyxpPGUmJnlhKGEuc2xpY2UoaSxlKSksZTxmJiZ5YShhPWEuc2xpY2UoZSkpLGU8ZiYmc2EoYSkpfW0ucHVzaChjKX1yZXR1cm4gdWEobSl9ZnVuY3Rpb24gemEoYSxiKXt2YXIgYz1iLmxlbmd0aD4wLGU9YS5sZW5ndGg+MCxmPWZ1bmN0aW9uKGYsZyxoLGksayl7dmFyIGwsbyxxLHI9MCxzPVwiMFwiLHQ9ZiYmW10sdT1bXSx2PWoseD1mfHxlJiZkLmZpbmQuVEFHKFwiKlwiLGspLHk9dys9bnVsbD09dj8xOk1hdGgucmFuZG9tKCl8fC4xLHo9eC5sZW5ndGg7Zm9yKGsmJihqPWc9PT1ufHxnfHxrKTtzIT09eiYmbnVsbCE9KGw9eFtzXSk7cysrKXtpZihlJiZsKXtvPTAsZ3x8bC5vd25lckRvY3VtZW50PT09bnx8KG0obCksaD0hcCk7d2hpbGUocT1hW28rK10paWYocShsLGd8fG4saCkpe2kucHVzaChsKTticmVha31rJiYodz15KX1jJiYoKGw9IXEmJmwpJiZyLS0sZiYmdC5wdXNoKGwpKX1pZihyKz1zLGMmJnMhPT1yKXtvPTA7d2hpbGUocT1iW28rK10pcSh0LHUsZyxoKTtpZihmKXtpZihyPjApd2hpbGUocy0tKXRbc118fHVbc118fCh1W3NdPUUuY2FsbChpKSk7dT13YSh1KX1HLmFwcGx5KGksdSksayYmIWYmJnUubGVuZ3RoPjAmJnIrYi5sZW5ndGg+MSYmZ2EudW5pcXVlU29ydChpKX1yZXR1cm4gayYmKHc9eSxqPXYpLHR9O3JldHVybiBjP2lhKGYpOmZ9cmV0dXJuIGg9Z2EuY29tcGlsZT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1bXSxmPUFbYStcIiBcIl07aWYoIWYpe2J8fChiPWcoYSkpLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWY9eWEoYltjXSksZlt1XT9kLnB1c2goZik6ZS5wdXNoKGYpO2Y9QShhLHphKGUsZCkpLGYuc2VsZWN0b3I9YX1yZXR1cm4gZn0saT1nYS5zZWxlY3Q9ZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsaSxqLGssbCxtPVwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEsbj0hZSYmZyhhPW0uc2VsZWN0b3J8fGEpO2lmKGM9Y3x8W10sMT09PW4ubGVuZ3RoKXtpZihpPW5bMF09blswXS5zbGljZSgwKSxpLmxlbmd0aD4yJiZcIklEXCI9PT0oaj1pWzBdKS50eXBlJiY5PT09Yi5ub2RlVHlwZSYmcCYmZC5yZWxhdGl2ZVtpWzFdLnR5cGVdKXtpZihiPShkLmZpbmQuSUQoai5tYXRjaGVzWzBdLnJlcGxhY2UoXyxhYSksYil8fFtdKVswXSwhYilyZXR1cm4gYzttJiYoYj1iLnBhcmVudE5vZGUpLGE9YS5zbGljZShpLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1mPVYubmVlZHNDb250ZXh0LnRlc3QoYSk/MDppLmxlbmd0aDt3aGlsZShmLS0pe2lmKGo9aVtmXSxkLnJlbGF0aXZlW2s9ai50eXBlXSlicmVhaztpZigobD1kLmZpbmRba10pJiYoZT1sKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sYWEpLCQudGVzdChpWzBdLnR5cGUpJiZxYShiLnBhcmVudE5vZGUpfHxiKSkpe2lmKGkuc3BsaWNlKGYsMSksYT1lLmxlbmd0aCYmc2EoaSksIWEpcmV0dXJuIEcuYXBwbHkoYyxlKSxjO2JyZWFrfX19cmV0dXJuKG18fGgoYSxuKSkoZSxiLCFwLGMsIWJ8fCQudGVzdChhKSYmcWEoYi5wYXJlbnROb2RlKXx8YiksY30sYy5zb3J0U3RhYmxlPXUuc3BsaXQoXCJcIikuc29ydChCKS5qb2luKFwiXCIpPT09dSxjLmRldGVjdER1cGxpY2F0ZXM9ISFsLG0oKSxjLnNvcnREZXRhY2hlZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gMSZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKX0pLGphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fGthKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGEsYixjKXtpZighYylyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoYixcInR5cGVcIj09PWIudG9Mb3dlckNhc2UoKT8xOjIpfSksYy5hdHRyaWJ1dGVzJiZqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8aW5wdXQvPlwiLGEuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9KXx8a2EoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGEsYixjKXtpZighYyYmXCJpbnB1dFwiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBhLmRlZmF1bHRWYWx1ZX0pLGphKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSl8fGthKEosZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKCFjKXJldHVybiBhW2JdPT09ITA/Yi50b0xvd2VyQ2FzZSgpOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmQuc3BlY2lmaWVkP2QudmFsdWU6bnVsbH0pLGdhfShhKTtyLmZpbmQ9eCxyLmV4cHI9eC5zZWxlY3RvcnMsci5leHByW1wiOlwiXT1yLmV4cHIucHNldWRvcyxyLnVuaXF1ZVNvcnQ9ci51bmlxdWU9eC51bmlxdWVTb3J0LHIudGV4dD14LmdldFRleHQsci5pc1hNTERvYz14LmlzWE1MLHIuY29udGFpbnM9eC5jb250YWlucyxyLmVzY2FwZVNlbGVjdG9yPXguZXNjYXBlO3ZhciB5PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1bXSxlPXZvaWQgMCE9PWM7d2hpbGUoKGE9YVtiXSkmJjkhPT1hLm5vZGVUeXBlKWlmKDE9PT1hLm5vZGVUeXBlKXtpZihlJiZyKGEpLmlzKGMpKWJyZWFrO2QucHVzaChhKX1yZXR1cm4gZH0sej1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXTthO2E9YS5uZXh0U2libGluZykxPT09YS5ub2RlVHlwZSYmYSE9PWImJmMucHVzaChhKTtyZXR1cm4gY30sQT1yLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIEIoYSxiKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpfXZhciBDPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pLEQ9L14uW146I1xcW1xcLixdKiQvO2Z1bmN0aW9uIEUoYSxiLGMpe3JldHVybiByLmlzRnVuY3Rpb24oYik/ci5ncmVwKGEsZnVuY3Rpb24oYSxkKXtyZXR1cm4hIWIuY2FsbChhLGQsYSkhPT1jfSk6Yi5ub2RlVHlwZT9yLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09PWIhPT1jfSk6XCJzdHJpbmdcIiE9dHlwZW9mIGI/ci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGkuY2FsbChiLGEpPi0xIT09Y30pOkQudGVzdChiKT9yLmZpbHRlcihiLGEsYyk6KGI9ci5maWx0ZXIoYixhKSxyLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gaS5jYWxsKGIsYSk+LTEhPT1jJiYxPT09YS5ub2RlVHlwZX0pKX1yLmZpbHRlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YlswXTtyZXR1cm4gYyYmKGE9XCI6bm90KFwiK2ErXCIpXCIpLDE9PT1iLmxlbmd0aCYmMT09PWQubm9kZVR5cGU/ci5maW5kLm1hdGNoZXNTZWxlY3RvcihkLGEpP1tkXTpbXTpyLmZpbmQubWF0Y2hlcyhhLHIuZ3JlcChiLGZ1bmN0aW9uKGEpe3JldHVybiAxPT09YS5ub2RlVHlwZX0pKX0sci5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPXRoaXMubGVuZ3RoLGU9dGhpcztpZihcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gdGhpcy5wdXNoU3RhY2socihhKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IoYj0wO2I8ZDtiKyspaWYoci5jb250YWlucyhlW2JdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihjPXRoaXMucHVzaFN0YWNrKFtdKSxiPTA7YjxkO2IrKylyLmZpbmQoYSxlW2JdLGMpO3JldHVybiBkPjE/ci51bmlxdWVTb3J0KGMpOmN9LGZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soRSh0aGlzLGF8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soRSh0aGlzLGF8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiEhRSh0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBhJiZBLnRlc3QoYSk/cihhKTphfHxbXSwhMSkubGVuZ3RofX0pO3ZhciBGLEc9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sSD1yLmZuLmluaXQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlLGY7aWYoIWEpcmV0dXJuIHRoaXM7aWYoYz1jfHxGLFwic3RyaW5nXCI9PXR5cGVvZiBhKXtpZihlPVwiPFwiPT09YVswXSYmXCI+XCI9PT1hW2EubGVuZ3RoLTFdJiZhLmxlbmd0aD49Mz9bbnVsbCxhLG51bGxdOkcuZXhlYyhhKSwhZXx8IWVbMV0mJmIpcmV0dXJuIWJ8fGIuanF1ZXJ5PyhifHxjKS5maW5kKGEpOnRoaXMuY29uc3RydWN0b3IoYikuZmluZChhKTtpZihlWzFdKXtpZihiPWIgaW5zdGFuY2VvZiByP2JbMF06YixyLm1lcmdlKHRoaXMsci5wYXJzZUhUTUwoZVsxXSxiJiZiLm5vZGVUeXBlP2Iub3duZXJEb2N1bWVudHx8YjpkLCEwKSksQy50ZXN0KGVbMV0pJiZyLmlzUGxhaW5PYmplY3QoYikpZm9yKGUgaW4gYilyLmlzRnVuY3Rpb24odGhpc1tlXSk/dGhpc1tlXShiW2VdKTp0aGlzLmF0dHIoZSxiW2VdKTtyZXR1cm4gdGhpc31yZXR1cm4gZj1kLmdldEVsZW1lbnRCeUlkKGVbMl0pLGYmJih0aGlzWzBdPWYsdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gYS5ub2RlVHlwZT8odGhpc1swXT1hLHRoaXMubGVuZ3RoPTEsdGhpcyk6ci5pc0Z1bmN0aW9uKGEpP3ZvaWQgMCE9PWMucmVhZHk/Yy5yZWFkeShhKTphKHIpOnIubWFrZUFycmF5KGEsdGhpcyl9O0gucHJvdG90eXBlPXIuZm4sRj1yKGQpO3ZhciBJPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEo9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07ci5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihhKXt2YXIgYj1yKGEsdGhpcyksYz1iLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPGM7YSsrKWlmKHIuY29udGFpbnModGhpcyxiW2FdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wLGU9dGhpcy5sZW5ndGgsZj1bXSxnPVwic3RyaW5nXCIhPXR5cGVvZiBhJiZyKGEpO2lmKCFBLnRlc3QoYSkpZm9yKDtkPGU7ZCsrKWZvcihjPXRoaXNbZF07YyYmYyE9PWI7Yz1jLnBhcmVudE5vZGUpaWYoYy5ub2RlVHlwZTwxMSYmKGc/Zy5pbmRleChjKT4tMToxPT09Yy5ub2RlVHlwZSYmci5maW5kLm1hdGNoZXNTZWxlY3RvcihjLGEpKSl7Zi5wdXNoKGMpO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhmLmxlbmd0aD4xP3IudW5pcXVlU29ydChmKTpmKX0saW5kZXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XCJzdHJpbmdcIj09dHlwZW9mIGE/aS5jYWxsKHIoYSksdGhpc1swXSk6aS5jYWxsKHRoaXMsYS5qcXVlcnk/YVswXTphKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnB1c2hTdGFjayhyLnVuaXF1ZVNvcnQoci5tZXJnZSh0aGlzLmdldCgpLHIoYSxiKSkpKX0sYWRkQmFjazpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09YT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihhKSl9fSk7ZnVuY3Rpb24gSyhhLGIpe3doaWxlKChhPWFbYl0pJiYxIT09YS5ub2RlVHlwZSk7cmV0dXJuIGF9ci5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiYxMSE9PWIubm9kZVR5cGU/YjpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJwYXJlbnROb2RlXCIsYyl9LG5leHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIEsoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGEpe3JldHVybiBLKGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcIm5leHRTaWJsaW5nXCIsYyl9LHByZXZVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcInByZXZpb3VzU2libGluZ1wiLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4geigoYS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxhKX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7cmV0dXJuIHooYS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIEIoYSxcImlmcmFtZVwiKT9hLmNvbnRlbnREb2N1bWVudDooQihhLFwidGVtcGxhdGVcIikmJihhPWEuY29udGVudHx8YSksci5tZXJnZShbXSxhLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKGEsYil7ci5mblthXT1mdW5jdGlvbihjLGQpe3ZhciBlPXIubWFwKHRoaXMsYixjKTtyZXR1cm5cIlVudGlsXCIhPT1hLnNsaWNlKC01KSYmKGQ9YyksZCYmXCJzdHJpbmdcIj09dHlwZW9mIGQmJihlPXIuZmlsdGVyKGQsZSkpLHRoaXMubGVuZ3RoPjEmJihKW2FdfHxyLnVuaXF1ZVNvcnQoZSksSS50ZXN0KGEpJiZlLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIEw9L1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO2Z1bmN0aW9uIE0oYSl7dmFyIGI9e307cmV0dXJuIHIuZWFjaChhLm1hdGNoKEwpfHxbXSxmdW5jdGlvbihhLGMpe2JbY109ITB9KSxifXIuQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/TShhKTpyLmV4dGVuZCh7fSxhKTt2YXIgYixjLGQsZSxmPVtdLGc9W10saD0tMSxpPWZ1bmN0aW9uKCl7Zm9yKGU9ZXx8YS5vbmNlLGQ9Yj0hMDtnLmxlbmd0aDtoPS0xKXtjPWcuc2hpZnQoKTt3aGlsZSgrK2g8Zi5sZW5ndGgpZltoXS5hcHBseShjWzBdLGNbMV0pPT09ITEmJmEuc3RvcE9uRmFsc2UmJihoPWYubGVuZ3RoLGM9ITEpfWEubWVtb3J5fHwoYz0hMSksYj0hMSxlJiYoZj1jP1tdOlwiXCIpfSxqPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gZiYmKGMmJiFiJiYoaD1mLmxlbmd0aC0xLGcucHVzaChjKSksZnVuY3Rpb24gZChiKXtyLmVhY2goYixmdW5jdGlvbihiLGMpe3IuaXNGdW5jdGlvbihjKT9hLnVuaXF1ZSYmai5oYXMoYyl8fGYucHVzaChjKTpjJiZjLmxlbmd0aCYmXCJzdHJpbmdcIiE9PXIudHlwZShjKSYmZChjKX0pfShhcmd1bWVudHMpLGMmJiFiJiZpKCkpLHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiByLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYil7dmFyIGM7d2hpbGUoKGM9ci5pbkFycmF5KGIsZixjKSk+LTEpZi5zcGxpY2UoYywxKSxjPD1oJiZoLS19KSx0aGlzfSxoYXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/ci5pbkFycmF5KGEsZik+LTE6Zi5sZW5ndGg+MH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gZiYmKGY9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gZT1nPVtdLGY9Yz1cIlwiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWZ9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gZT1nPVtdLGN8fGJ8fChmPWM9XCJcIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFlfSxmaXJlV2l0aDpmdW5jdGlvbihhLGMpe3JldHVybiBlfHwoYz1jfHxbXSxjPVthLGMuc2xpY2U/Yy5zbGljZSgpOmNdLGcucHVzaChjKSxifHxpKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gai5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWR9fTtyZXR1cm4gan07ZnVuY3Rpb24gTihhKXtyZXR1cm4gYX1mdW5jdGlvbiBPKGEpe3Rocm93IGF9ZnVuY3Rpb24gUChhLGIsYyxkKXt2YXIgZTt0cnl7YSYmci5pc0Z1bmN0aW9uKGU9YS5wcm9taXNlKT9lLmNhbGwoYSkuZG9uZShiKS5mYWlsKGMpOmEmJnIuaXNGdW5jdGlvbihlPWEudGhlbik/ZS5jYWxsKGEsYixjKTpiLmFwcGx5KHZvaWQgMCxbYV0uc2xpY2UoZCkpfWNhdGNoKGEpe2MuYXBwbHkodm9pZCAwLFthXSl9fXIuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihiKXt2YXIgYz1bW1wibm90aWZ5XCIsXCJwcm9ncmVzc1wiLHIuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLHIuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLDJdLFtcInJlc29sdmVcIixcImRvbmVcIixyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMCxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwxLFwicmVqZWN0ZWRcIl1dLGQ9XCJwZW5kaW5nXCIsZT17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGYuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSxcImNhdGNoXCI6ZnVuY3Rpb24oYSl7cmV0dXJuIGUudGhlbihudWxsLGEpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzO3JldHVybiByLkRlZmVycmVkKGZ1bmN0aW9uKGIpe3IuZWFjaChjLGZ1bmN0aW9uKGMsZCl7dmFyIGU9ci5pc0Z1bmN0aW9uKGFbZFs0XV0pJiZhW2RbNF1dO2ZbZFsxXV0oZnVuY3Rpb24oKXt2YXIgYT1lJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTthJiZyLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9hLnByb21pc2UoKS5wcm9ncmVzcyhiLm5vdGlmeSkuZG9uZShiLnJlc29sdmUpLmZhaWwoYi5yZWplY3QpOmJbZFswXStcIldpdGhcIl0odGhpcyxlP1thXTphcmd1bWVudHMpfSl9KSxhPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24oYixkLGUpe3ZhciBmPTA7ZnVuY3Rpb24gZyhiLGMsZCxlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaD10aGlzLGk9YXJndW1lbnRzLGo9ZnVuY3Rpb24oKXt2YXIgYSxqO2lmKCEoYjxmKSl7aWYoYT1kLmFwcGx5KGgsaSksYT09PWMucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7aj1hJiYoXCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGEpJiZhLnRoZW4sci5pc0Z1bmN0aW9uKGopP2U/ai5jYWxsKGEsZyhmLGMsTixlKSxnKGYsYyxPLGUpKTooZisrLGouY2FsbChhLGcoZixjLE4sZSksZyhmLGMsTyxlKSxnKGYsYyxOLGMubm90aWZ5V2l0aCkpKTooZCE9PU4mJihoPXZvaWQgMCxpPVthXSksKGV8fGMucmVzb2x2ZVdpdGgpKGgsaSkpfX0saz1lP2o6ZnVuY3Rpb24oKXt0cnl7aigpfWNhdGNoKGEpe3IuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayYmci5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGEsay5zdGFja1RyYWNlKSxiKzE+PWYmJihkIT09TyYmKGg9dm9pZCAwLGk9W2FdKSxjLnJlamVjdFdpdGgoaCxpKSl9fTtiP2soKTooci5EZWZlcnJlZC5nZXRTdGFja0hvb2smJihrLnN0YWNrVHJhY2U9ci5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksYS5zZXRUaW1lb3V0KGspKX19cmV0dXJuIHIuRGVmZXJyZWQoZnVuY3Rpb24oYSl7Y1swXVszXS5hZGQoZygwLGEsci5pc0Z1bmN0aW9uKGUpP2U6TixhLm5vdGlmeVdpdGgpKSxjWzFdWzNdLmFkZChnKDAsYSxyLmlzRnVuY3Rpb24oYik/YjpOKSksY1syXVszXS5hZGQoZygwLGEsci5pc0Z1bmN0aW9uKGQpP2Q6TykpfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hP3IuZXh0ZW5kKGEsZSk6ZX19LGY9e307cmV0dXJuIHIuZWFjaChjLGZ1bmN0aW9uKGEsYil7dmFyIGc9YlsyXSxoPWJbNV07ZVtiWzFdXT1nLmFkZCxoJiZnLmFkZChmdW5jdGlvbigpe2Q9aH0sY1szLWFdWzJdLmRpc2FibGUsY1swXVsyXS5sb2NrKSxnLmFkZChiWzNdLmZpcmUpLGZbYlswXV09ZnVuY3Rpb24oKXtyZXR1cm4gZltiWzBdK1wiV2l0aFwiXSh0aGlzPT09Zj92b2lkIDA6dGhpcyxhcmd1bWVudHMpLHRoaXN9LGZbYlswXStcIldpdGhcIl09Zy5maXJlV2l0aH0pLGUucHJvbWlzZShmKSxiJiZiLmNhbGwoZixmKSxmfSx3aGVuOmZ1bmN0aW9uKGEpe3ZhciBiPWFyZ3VtZW50cy5sZW5ndGgsYz1iLGQ9QXJyYXkoYyksZT1mLmNhbGwoYXJndW1lbnRzKSxnPXIuRGVmZXJyZWQoKSxoPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjKXtkW2FdPXRoaXMsZVthXT1hcmd1bWVudHMubGVuZ3RoPjE/Zi5jYWxsKGFyZ3VtZW50cyk6YywtLWJ8fGcucmVzb2x2ZVdpdGgoZCxlKX19O2lmKGI8PTEmJihQKGEsZy5kb25lKGgoYykpLnJlc29sdmUsZy5yZWplY3QsIWIpLFwicGVuZGluZ1wiPT09Zy5zdGF0ZSgpfHxyLmlzRnVuY3Rpb24oZVtjXSYmZVtjXS50aGVuKSkpcmV0dXJuIGcudGhlbigpO3doaWxlKGMtLSlQKGVbY10saChjKSxnLnJlamVjdCk7cmV0dXJuIGcucHJvbWlzZSgpfX0pO3ZhciBRPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO3IuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihiLGMpe2EuY29uc29sZSYmYS5jb25zb2xlLndhcm4mJmImJlEudGVzdChiLm5hbWUpJiZhLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK2IubWVzc2FnZSxiLnN0YWNrLGMpfSxyLnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKGIpe2Euc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGJ9KX07dmFyIFI9ci5EZWZlcnJlZCgpO3IuZm4ucmVhZHk9ZnVuY3Rpb24oYSl7cmV0dXJuIFIudGhlbihhKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3IucmVhZHlFeGNlcHRpb24oYSl9KSx0aGlzfSxyLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihhKXsoYT09PSEwPy0tci5yZWFkeVdhaXQ6ci5pc1JlYWR5KXx8KHIuaXNSZWFkeT0hMCxhIT09ITAmJi0tci5yZWFkeVdhaXQ+MHx8Ui5yZXNvbHZlV2l0aChkLFtyXSkpfX0pLHIucmVhZHkudGhlbj1SLnRoZW47ZnVuY3Rpb24gUygpe2QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixTKSxcbmEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixTKSxyLnJlYWR5KCl9XCJjb21wbGV0ZVwiPT09ZC5yZWFkeVN0YXRlfHxcImxvYWRpbmdcIiE9PWQucmVhZHlTdGF0ZSYmIWQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP2Euc2V0VGltZW91dChyLnJlYWR5KTooZC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLFMpLGEuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixTKSk7dmFyIFQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dmFyIGg9MCxpPWEubGVuZ3RoLGo9bnVsbD09YztpZihcIm9iamVjdFwiPT09ci50eXBlKGMpKXtlPSEwO2ZvcihoIGluIGMpVChhLGIsaCxjW2hdLCEwLGYsZyl9ZWxzZSBpZih2b2lkIDAhPT1kJiYoZT0hMCxyLmlzRnVuY3Rpb24oZCl8fChnPSEwKSxqJiYoZz8oYi5jYWxsKGEsZCksYj1udWxsKTooaj1iLGI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqLmNhbGwocihhKSxjKX0pKSxiKSlmb3IoO2g8aTtoKyspYihhW2hdLGMsZz9kOmQuY2FsbChhW2hdLGgsYihhW2hdLGMpKSk7cmV0dXJuIGU/YTpqP2IuY2FsbChhKTppP2IoYVswXSxjKTpmfSxVPWZ1bmN0aW9uKGEpe3JldHVybiAxPT09YS5ub2RlVHlwZXx8OT09PWEubm9kZVR5cGV8fCErYS5ub2RlVHlwZX07ZnVuY3Rpb24gVigpe3RoaXMuZXhwYW5kbz1yLmV4cGFuZG8rVi51aWQrK31WLnVpZD0xLFYucHJvdG90eXBlPXtjYWNoZTpmdW5jdGlvbihhKXt2YXIgYj1hW3RoaXMuZXhwYW5kb107cmV0dXJuIGJ8fChiPXt9LFUoYSkmJihhLm5vZGVUeXBlP2FbdGhpcy5leHBhbmRvXT1iOk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLHRoaXMuZXhwYW5kbyx7dmFsdWU6Yixjb25maWd1cmFibGU6ITB9KSkpLGJ9LHNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZT10aGlzLmNhY2hlKGEpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiKWVbci5jYW1lbENhc2UoYildPWM7ZWxzZSBmb3IoZCBpbiBiKWVbci5jYW1lbENhc2UoZCldPWJbZF07cmV0dXJuIGV9LGdldDpmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDA9PT1iP3RoaXMuY2FjaGUoYSk6YVt0aGlzLmV4cGFuZG9dJiZhW3RoaXMuZXhwYW5kb11bci5jYW1lbENhc2UoYildfSxhY2Nlc3M6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB2b2lkIDA9PT1ifHxiJiZcInN0cmluZ1wiPT10eXBlb2YgYiYmdm9pZCAwPT09Yz90aGlzLmdldChhLGIpOih0aGlzLnNldChhLGIsYyksdm9pZCAwIT09Yz9jOmIpfSxyZW1vdmU6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPWFbdGhpcy5leHBhbmRvXTtpZih2b2lkIDAhPT1kKXtpZih2b2lkIDAhPT1iKXtBcnJheS5pc0FycmF5KGIpP2I9Yi5tYXAoci5jYW1lbENhc2UpOihiPXIuY2FtZWxDYXNlKGIpLGI9YiBpbiBkP1tiXTpiLm1hdGNoKEwpfHxbXSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZGVsZXRlIGRbYltjXV19KHZvaWQgMD09PWJ8fHIuaXNFbXB0eU9iamVjdChkKSkmJihhLm5vZGVUeXBlP2FbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGFbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGEpe3ZhciBiPWFbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09YiYmIXIuaXNFbXB0eU9iamVjdChiKX19O3ZhciBXPW5ldyBWLFg9bmV3IFYsWT0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sWj0vW0EtWl0vZztmdW5jdGlvbiAkKGEpe3JldHVyblwidHJ1ZVwiPT09YXx8XCJmYWxzZVwiIT09YSYmKFwibnVsbFwiPT09YT9udWxsOmE9PT0rYStcIlwiPythOlkudGVzdChhKT9KU09OLnBhcnNlKGEpOmEpfWZ1bmN0aW9uIF8oYSxiLGMpe3ZhciBkO2lmKHZvaWQgMD09PWMmJjE9PT1hLm5vZGVUeXBlKWlmKGQ9XCJkYXRhLVwiK2IucmVwbGFjZShaLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksYz1hLmdldEF0dHJpYnV0ZShkKSxcInN0cmluZ1wiPT10eXBlb2YgYyl7dHJ5e2M9JChjKX1jYXRjaChlKXt9WC5zZXQoYSxiLGMpfWVsc2UgYz12b2lkIDA7cmV0dXJuIGN9ci5leHRlbmQoe2hhc0RhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIFguaGFzRGF0YShhKXx8Vy5oYXNEYXRhKGEpfSxkYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWC5hY2Nlc3MoYSxiLGMpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7WC5yZW1vdmUoYSxiKX0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBXLmFjY2VzcyhhLGIsYyl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7Vy5yZW1vdmUoYSxiKX19KSxyLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPXRoaXNbMF0sZz1mJiZmLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09YSl7aWYodGhpcy5sZW5ndGgmJihlPVguZ2V0KGYpLDE9PT1mLm5vZGVUeXBlJiYhVy5nZXQoZixcImhhc0RhdGFBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPXIuY2FtZWxDYXNlKGQuc2xpY2UoNSkpLF8oZixkLGVbZF0pKSk7Vy5zZXQoZixcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gZX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtYLnNldCh0aGlzLGEpfSk6VCh0aGlzLGZ1bmN0aW9uKGIpe3ZhciBjO2lmKGYmJnZvaWQgMD09PWIpe2lmKGM9WC5nZXQoZixhKSx2b2lkIDAhPT1jKXJldHVybiBjO2lmKGM9XyhmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGN9ZWxzZSB0aGlzLmVhY2goZnVuY3Rpb24oKXtYLnNldCh0aGlzLGEsYil9KX0sbnVsbCxiLGFyZ3VtZW50cy5sZW5ndGg+MSxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7WC5yZW1vdmUodGhpcyxhKX0pfX0pLHIuZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoYSlyZXR1cm4gYj0oYnx8XCJmeFwiKStcInF1ZXVlXCIsZD1XLmdldChhLGIpLGMmJighZHx8QXJyYXkuaXNBcnJheShjKT9kPVcuYWNjZXNzKGEsYixyLm1ha2VBcnJheShjKSk6ZC5wdXNoKGMpKSxkfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihhLGIpe2I9Ynx8XCJmeFwiO3ZhciBjPXIucXVldWUoYSxiKSxkPWMubGVuZ3RoLGU9Yy5zaGlmdCgpLGY9ci5fcXVldWVIb29rcyhhLGIpLGc9ZnVuY3Rpb24oKXtyLmRlcXVldWUoYSxiKX07XCJpbnByb2dyZXNzXCI9PT1lJiYoZT1jLnNoaWZ0KCksZC0tKSxlJiYoXCJmeFwiPT09YiYmYy51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSxkZWxldGUgZi5zdG9wLGUuY2FsbChhLGcsZikpLCFkJiZmJiZmLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz1iK1wicXVldWVIb29rc1wiO3JldHVybiBXLmdldChhLGMpfHxXLmFjY2VzcyhhLGMse2VtcHR5OnIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7Vy5yZW1vdmUoYSxbYitcInF1ZXVlXCIsY10pfSl9KX19KSxyLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz0yO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9XCJmeFwiLGMtLSksYXJndW1lbnRzLmxlbmd0aDxjP3IucXVldWUodGhpc1swXSxhKTp2b2lkIDA9PT1iP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9ci5xdWV1ZSh0aGlzLGEsYik7ci5fcXVldWVIb29rcyh0aGlzLGEpLFwiZnhcIj09PWEmJlwiaW5wcm9ncmVzc1wiIT09Y1swXSYmci5kZXF1ZXVlKHRoaXMsYSl9KX0sZGVxdWV1ZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5kZXF1ZXVlKHRoaXMsYSl9KX0sY2xlYXJRdWV1ZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0xLGU9ci5EZWZlcnJlZCgpLGY9dGhpcyxnPXRoaXMubGVuZ3RoLGg9ZnVuY3Rpb24oKXstLWR8fGUucmVzb2x2ZVdpdGgoZixbZl0pfTtcInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYT1hfHxcImZ4XCI7d2hpbGUoZy0tKWM9Vy5nZXQoZltnXSxhK1wicXVldWVIb29rc1wiKSxjJiZjLmVtcHR5JiYoZCsrLGMuZW1wdHkuYWRkKGgpKTtyZXR1cm4gaCgpLGUucHJvbWlzZShiKX19KTt2YXIgYWE9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLGJhPW5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK2FhK1wiKShbYS16JV0qKSRcIixcImlcIiksY2E9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLGRhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9Ynx8YSxcIm5vbmVcIj09PWEuc3R5bGUuZGlzcGxheXx8XCJcIj09PWEuc3R5bGUuZGlzcGxheSYmci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSkmJlwibm9uZVwiPT09ci5jc3MoYSxcImRpc3BsYXlcIil9LGVhPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZz17fTtmb3IoZiBpbiBiKWdbZl09YS5zdHlsZVtmXSxhLnN0eWxlW2ZdPWJbZl07ZT1jLmFwcGx5KGEsZHx8W10pO2ZvcihmIGluIGIpYS5zdHlsZVtmXT1nW2ZdO3JldHVybiBlfTtmdW5jdGlvbiBmYShhLGIsYyxkKXt2YXIgZSxmPTEsZz0yMCxoPWQ/ZnVuY3Rpb24oKXtyZXR1cm4gZC5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gci5jc3MoYSxiLFwiXCIpfSxpPWgoKSxqPWMmJmNbM118fChyLmNzc051bWJlcltiXT9cIlwiOlwicHhcIiksaz0oci5jc3NOdW1iZXJbYl18fFwicHhcIiE9PWomJitpKSYmYmEuZXhlYyhyLmNzcyhhLGIpKTtpZihrJiZrWzNdIT09ail7aj1qfHxrWzNdLGM9Y3x8W10saz0raXx8MTtkbyBmPWZ8fFwiLjVcIixrLz1mLHIuc3R5bGUoYSxiLGsraik7d2hpbGUoZiE9PShmPWgoKS9pKSYmMSE9PWYmJi0tZyl9cmV0dXJuIGMmJihrPStrfHwraXx8MCxlPWNbMV0/aysoY1sxXSsxKSpjWzJdOitjWzJdLGQmJihkLnVuaXQ9aixkLnN0YXJ0PWssZC5lbmQ9ZSkpLGV9dmFyIGdhPXt9O2Z1bmN0aW9uIGhhKGEpe3ZhciBiLGM9YS5vd25lckRvY3VtZW50LGQ9YS5ub2RlTmFtZSxlPWdhW2RdO3JldHVybiBlP2U6KGI9Yy5ib2R5LmFwcGVuZENoaWxkKGMuY3JlYXRlRWxlbWVudChkKSksZT1yLmNzcyhiLFwiZGlzcGxheVwiKSxiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksXCJub25lXCI9PT1lJiYoZT1cImJsb2NrXCIpLGdhW2RdPWUsZSl9ZnVuY3Rpb24gaWEoYSxiKXtmb3IodmFyIGMsZCxlPVtdLGY9MCxnPWEubGVuZ3RoO2Y8ZztmKyspZD1hW2ZdLGQuc3R5bGUmJihjPWQuc3R5bGUuZGlzcGxheSxiPyhcIm5vbmVcIj09PWMmJihlW2ZdPVcuZ2V0KGQsXCJkaXNwbGF5XCIpfHxudWxsLGVbZl18fChkLnN0eWxlLmRpc3BsYXk9XCJcIikpLFwiXCI9PT1kLnN0eWxlLmRpc3BsYXkmJmRhKGQpJiYoZVtmXT1oYShkKSkpOlwibm9uZVwiIT09YyYmKGVbZl09XCJub25lXCIsVy5zZXQoZCxcImRpc3BsYXlcIixjKSkpO2ZvcihmPTA7ZjxnO2YrKyludWxsIT1lW2ZdJiYoYVtmXS5zdHlsZS5kaXNwbGF5PWVbZl0pO3JldHVybiBhfXIuZm4uZXh0ZW5kKHtzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIGlhKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIGlhKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGEodGhpcyk/cih0aGlzKS5zaG93KCk6cih0aGlzKS5oaWRlKCl9KX19KTt2YXIgamE9L14oPzpjaGVja2JveHxyYWRpbykkL2ksa2E9LzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLGxhPS9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksbWE9e29wdGlvbjpbMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTttYS5vcHRncm91cD1tYS5vcHRpb24sbWEudGJvZHk9bWEudGZvb3Q9bWEuY29sZ3JvdXA9bWEuY2FwdGlvbj1tYS50aGVhZCxtYS50aD1tYS50ZDtmdW5jdGlvbiBuYShhLGIpe3ZhciBjO3JldHVybiBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYnx8XCIqXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnF1ZXJ5U2VsZWN0b3JBbGw/YS5xdWVyeVNlbGVjdG9yQWxsKGJ8fFwiKlwiKTpbXSx2b2lkIDA9PT1ifHxiJiZCKGEsYik/ci5tZXJnZShbYV0sYyk6Y31mdW5jdGlvbiBvYShhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKylXLnNldChhW2NdLFwiZ2xvYmFsRXZhbFwiLCFifHxXLmdldChiW2NdLFwiZ2xvYmFsRXZhbFwiKSl9dmFyIHBhPS88fCYjP1xcdys7LztmdW5jdGlvbiBxYShhLGIsYyxkLGUpe2Zvcih2YXIgZixnLGgsaSxqLGssbD1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxtPVtdLG49MCxvPWEubGVuZ3RoO248bztuKyspaWYoZj1hW25dLGZ8fDA9PT1mKWlmKFwib2JqZWN0XCI9PT1yLnR5cGUoZikpci5tZXJnZShtLGYubm9kZVR5cGU/W2ZdOmYpO2Vsc2UgaWYocGEudGVzdChmKSl7Zz1nfHxsLmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksaD0oa2EuZXhlYyhmKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksaT1tYVtoXXx8bWEuX2RlZmF1bHQsZy5pbm5lckhUTUw9aVsxXStyLmh0bWxQcmVmaWx0ZXIoZikraVsyXSxrPWlbMF07d2hpbGUoay0tKWc9Zy5sYXN0Q2hpbGQ7ci5tZXJnZShtLGcuY2hpbGROb2RlcyksZz1sLmZpcnN0Q2hpbGQsZy50ZXh0Q29udGVudD1cIlwifWVsc2UgbS5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoZikpO2wudGV4dENvbnRlbnQ9XCJcIixuPTA7d2hpbGUoZj1tW24rK10paWYoZCYmci5pbkFycmF5KGYsZCk+LTEpZSYmZS5wdXNoKGYpO2Vsc2UgaWYoaj1yLmNvbnRhaW5zKGYub3duZXJEb2N1bWVudCxmKSxnPW5hKGwuYXBwZW5kQ2hpbGQoZiksXCJzY3JpcHRcIiksaiYmb2EoZyksYyl7az0wO3doaWxlKGY9Z1trKytdKWxhLnRlc3QoZi50eXBlfHxcIlwiKSYmYy5wdXNoKGYpfXJldHVybiBsfSFmdW5jdGlvbigpe3ZhciBhPWQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGI9YS5hcHBlbmRDaGlsZChkLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGM9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxjLnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIixcImNoZWNrZWRcIiksYy5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJ0XCIpLGIuYXBwZW5kQ2hpbGQoYyksby5jaGVja0Nsb25lPWIuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLGIuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLG8ubm9DbG9uZUNoZWNrZWQ9ISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZX0oKTt2YXIgcmE9ZC5kb2N1bWVudEVsZW1lbnQsc2E9L15rZXkvLHRhPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyx1YT0vXihbXi5dKikoPzpcXC4oLispfCkvO2Z1bmN0aW9uIHZhKCl7cmV0dXJuITB9ZnVuY3Rpb24gd2EoKXtyZXR1cm4hMX1mdW5jdGlvbiB4YSgpe3RyeXtyZXR1cm4gZC5hY3RpdmVFbGVtZW50fWNhdGNoKGEpe319ZnVuY3Rpb24geWEoYSxiLGMsZCxlLGYpe3ZhciBnLGg7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpe1wic3RyaW5nXCIhPXR5cGVvZiBjJiYoZD1kfHxjLGM9dm9pZCAwKTtmb3IoaCBpbiBiKXlhKGEsaCxjLGQsYltoXSxmKTtyZXR1cm4gYX1pZihudWxsPT1kJiZudWxsPT1lPyhlPWMsZD1jPXZvaWQgMCk6bnVsbD09ZSYmKFwic3RyaW5nXCI9PXR5cGVvZiBjPyhlPWQsZD12b2lkIDApOihlPWQsZD1jLGM9dm9pZCAwKSksZT09PSExKWU9d2E7ZWxzZSBpZighZSlyZXR1cm4gYTtyZXR1cm4gMT09PWYmJihnPWUsZT1mdW5jdGlvbihhKXtyZXR1cm4gcigpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1yLmd1aWQrKykpLGEuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQuYWRkKHRoaXMsYixlLGQsYyl9KX1yLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxuLG8scCxxPVcuZ2V0KGEpO2lmKHEpe2MuaGFuZGxlciYmKGY9YyxjPWYuaGFuZGxlcixlPWYuc2VsZWN0b3IpLGUmJnIuZmluZC5tYXRjaGVzU2VsZWN0b3IocmEsZSksYy5ndWlkfHwoYy5ndWlkPXIuZ3VpZCsrKSwoaT1xLmV2ZW50cyl8fChpPXEuZXZlbnRzPXt9KSwoZz1xLmhhbmRsZSl8fChnPXEuaGFuZGxlPWZ1bmN0aW9uKGIpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiByJiZyLmV2ZW50LnRyaWdnZXJlZCE9PWIudHlwZT9yLmV2ZW50LmRpc3BhdGNoLmFwcGx5KGEsYXJndW1lbnRzKTp2b2lkIDB9KSxiPShifHxcIlwiKS5tYXRjaChMKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWg9dWEuZXhlYyhiW2pdKXx8W10sbj1wPWhbMV0sbz0oaFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxuJiYobD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LG49KGU/bC5kZWxlZ2F0ZVR5cGU6bC5iaW5kVHlwZSl8fG4sbD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LGs9ci5leHRlbmQoe3R5cGU6bixvcmlnVHlwZTpwLGRhdGE6ZCxoYW5kbGVyOmMsZ3VpZDpjLmd1aWQsc2VsZWN0b3I6ZSxuZWVkc0NvbnRleHQ6ZSYmci5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGUpLG5hbWVzcGFjZTpvLmpvaW4oXCIuXCIpfSxmKSwobT1pW25dKXx8KG09aVtuXT1bXSxtLmRlbGVnYXRlQ291bnQ9MCxsLnNldHVwJiZsLnNldHVwLmNhbGwoYSxkLG8sZykhPT0hMXx8YS5hZGRFdmVudExpc3RlbmVyJiZhLmFkZEV2ZW50TGlzdGVuZXIobixnKSksbC5hZGQmJihsLmFkZC5jYWxsKGEsayksay5oYW5kbGVyLmd1aWR8fChrLmhhbmRsZXIuZ3VpZD1jLmd1aWQpKSxlP20uc3BsaWNlKG0uZGVsZWdhdGVDb3VudCsrLDAsayk6bS5wdXNoKGspLHIuZXZlbnQuZ2xvYmFsW25dPSEwKX19LHJlbW92ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG0sbixvLHAscT1XLmhhc0RhdGEoYSkmJlcuZ2V0KGEpO2lmKHEmJihpPXEuZXZlbnRzKSl7Yj0oYnx8XCJcIikubWF0Y2goTCl8fFtcIlwiXSxqPWIubGVuZ3RoO3doaWxlKGotLSlpZihoPXVhLmV4ZWMoYltqXSl8fFtdLG49cD1oWzFdLG89KGhbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksbil7bD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LG49KGQ/bC5kZWxlZ2F0ZVR5cGU6bC5iaW5kVHlwZSl8fG4sbT1pW25dfHxbXSxoPWhbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitvLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxnPWY9bS5sZW5ndGg7d2hpbGUoZi0tKWs9bVtmXSwhZSYmcCE9PWsub3JpZ1R5cGV8fGMmJmMuZ3VpZCE9PWsuZ3VpZHx8aCYmIWgudGVzdChrLm5hbWVzcGFjZSl8fGQmJmQhPT1rLnNlbGVjdG9yJiYoXCIqKlwiIT09ZHx8IWsuc2VsZWN0b3IpfHwobS5zcGxpY2UoZiwxKSxrLnNlbGVjdG9yJiZtLmRlbGVnYXRlQ291bnQtLSxsLnJlbW92ZSYmbC5yZW1vdmUuY2FsbChhLGspKTtnJiYhbS5sZW5ndGgmJihsLnRlYXJkb3duJiZsLnRlYXJkb3duLmNhbGwoYSxvLHEuaGFuZGxlKSE9PSExfHxyLnJlbW92ZUV2ZW50KGEsbixxLmhhbmRsZSksZGVsZXRlIGlbbl0pfWVsc2UgZm9yKG4gaW4gaSlyLmV2ZW50LnJlbW92ZShhLG4rYltqXSxjLGQsITApO3IuaXNFbXB0eU9iamVjdChpKSYmVy5yZW1vdmUoYSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihhKXt2YXIgYj1yLmV2ZW50LmZpeChhKSxjLGQsZSxmLGcsaCxpPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxqPShXLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXXx8W10saz1yLmV2ZW50LnNwZWNpYWxbYi50eXBlXXx8e307Zm9yKGlbMF09YixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylpW2NdPWFyZ3VtZW50c1tjXTtpZihiLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWsucHJlRGlzcGF0Y2h8fGsucHJlRGlzcGF0Y2guY2FsbCh0aGlzLGIpIT09ITEpe2g9ci5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsYixqKSxjPTA7d2hpbGUoKGY9aFtjKytdKSYmIWIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7Yi5jdXJyZW50VGFyZ2V0PWYuZWxlbSxkPTA7d2hpbGUoKGc9Zi5oYW5kbGVyc1tkKytdKSYmIWIuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSliLnJuYW1lc3BhY2UmJiFiLnJuYW1lc3BhY2UudGVzdChnLm5hbWVzcGFjZSl8fChiLmhhbmRsZU9iaj1nLGIuZGF0YT1nLmRhdGEsZT0oKHIuZXZlbnQuc3BlY2lhbFtnLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8Zy5oYW5kbGVyKS5hcHBseShmLmVsZW0saSksdm9pZCAwIT09ZSYmKGIucmVzdWx0PWUpPT09ITEmJihiLnByZXZlbnREZWZhdWx0KCksYi5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBrLnBvc3REaXNwYXRjaCYmay5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLGIpLGIucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnLGg9W10saT1iLmRlbGVnYXRlQ291bnQsaj1hLnRhcmdldDtpZihpJiZqLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWEudHlwZSYmYS5idXR0b24+PTEpKWZvcig7aiE9PXRoaXM7aj1qLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWoubm9kZVR5cGUmJihcImNsaWNrXCIhPT1hLnR5cGV8fGouZGlzYWJsZWQhPT0hMCkpe2ZvcihmPVtdLGc9e30sYz0wO2M8aTtjKyspZD1iW2NdLGU9ZC5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1nW2VdJiYoZ1tlXT1kLm5lZWRzQ29udGV4dD9yKGUsdGhpcykuaW5kZXgoaik+LTE6ci5maW5kKGUsdGhpcyxudWxsLFtqXSkubGVuZ3RoKSxnW2VdJiZmLnB1c2goZCk7Zi5sZW5ndGgmJmgucHVzaCh7ZWxlbTpqLGhhbmRsZXJzOmZ9KX1yZXR1cm4gaj10aGlzLGk8Yi5sZW5ndGgmJmgucHVzaCh7ZWxlbTpqLGhhbmRsZXJzOmIuc2xpY2UoaSl9KSxofSxhZGRQcm9wOmZ1bmN0aW9uKGEsYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIuRXZlbnQucHJvdG90eXBlLGEse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpyLmlzRnVuY3Rpb24oYik/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGIodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFthXX0sc2V0OmZ1bmN0aW9uKGIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGEse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmJ9KX19KX0sZml4OmZ1bmN0aW9uKGEpe3JldHVybiBhW3IuZXhwYW5kb10/YTpuZXcgci5FdmVudChhKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGZvY3VzOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcyE9PXhhKCkmJnRoaXMuZm9jdXMpcmV0dXJuIHRoaXMuZm9jdXMoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNpblwifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcz09PXhhKCkmJnRoaXMuYmx1cilyZXR1cm4gdGhpcy5ibHVyKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3Vzb3V0XCJ9LGNsaWNrOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYoXCJjaGVja2JveFwiPT09dGhpcy50eXBlJiZ0aGlzLmNsaWNrJiZCKHRoaXMsXCJpbnB1dFwiKSlyZXR1cm4gdGhpcy5jbGljaygpLCExfSxfZGVmYXVsdDpmdW5jdGlvbihhKXtyZXR1cm4gQihhLnRhcmdldCxcImFcIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihhKXt2b2lkIDAhPT1hLnJlc3VsdCYmYS5vcmlnaW5hbEV2ZW50JiYoYS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWEucmVzdWx0KX19fX0sci5yZW1vdmVFdmVudD1mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjKX0sci5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygci5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/dmE6d2EsdGhpcy50YXJnZXQ9YS50YXJnZXQmJjM9PT1hLnRhcmdldC5ub2RlVHlwZT9hLnRhcmdldC5wYXJlbnROb2RlOmEudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1hLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWEucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWEsYiYmci5leHRlbmQodGhpcyxiKSx0aGlzLnRpbWVTdGFtcD1hJiZhLnRpbWVTdGFtcHx8ci5ub3coKSx2b2lkKHRoaXNbci5leHBhbmRvXT0hMCkpOm5ldyByLkV2ZW50KGEsYil9LHIuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpyLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDp3YSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDp3YSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDp3YSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD12YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9dmEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LHIuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCxcImNoYXJcIjohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihhKXt2YXIgYj1hLmJ1dHRvbjtyZXR1cm4gbnVsbD09YS53aGljaCYmc2EudGVzdChhLnR5cGUpP251bGwhPWEuY2hhckNvZGU/YS5jaGFyQ29kZTphLmtleUNvZGU6IWEud2hpY2gmJnZvaWQgMCE9PWImJnRhLnRlc3QoYS50eXBlKT8xJmI/MToyJmI/Mzo0JmI/MjowOmEud2hpY2h9fSxyLmV2ZW50LmFkZFByb3ApLHIuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihhLGIpe3IuZXZlbnQuc3BlY2lhbFthXT17ZGVsZWdhdGVUeXBlOmIsYmluZFR5cGU6YixoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGMsZD10aGlzLGU9YS5yZWxhdGVkVGFyZ2V0LGY9YS5oYW5kbGVPYmo7cmV0dXJuIGUmJihlPT09ZHx8ci5jb250YWlucyhkLGUpKXx8KGEudHlwZT1mLm9yaWdUeXBlLGM9Zi5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhLnR5cGU9YiksY319fSksci5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB5YSh0aGlzLGEsYixjLGQpfSxvbmU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHlhKHRoaXMsYSxiLGMsZCwxKX0sb2ZmOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2lmKGEmJmEucHJldmVudERlZmF1bHQmJmEuaGFuZGxlT2JqKXJldHVybiBkPWEuaGFuZGxlT2JqLHIoYS5kZWxlZ2F0ZVRhcmdldCkub2ZmKGQubmFtZXNwYWNlP2Qub3JpZ1R5cGUrXCIuXCIrZC5uYW1lc3BhY2U6ZC5vcmlnVHlwZSxkLnNlbGVjdG9yLGQuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGIhPT0hMSYmXCJmdW5jdGlvblwiIT10eXBlb2YgYnx8KGM9YixiPXZvaWQgMCksYz09PSExJiYoYz13YSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC5yZW1vdmUodGhpcyxhLGMsYil9KX19KTt2YXIgemE9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksQWE9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksQmE9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxDYT0vXnRydWVcXC8oLiopLyxEYT0vXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7ZnVuY3Rpb24gRWEoYSxiKXtyZXR1cm4gQihhLFwidGFibGVcIikmJkIoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/cihcIj50Ym9keVwiLGEpWzBdfHxhOmF9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrYS50eXBlLGF9ZnVuY3Rpb24gR2EoYSl7dmFyIGI9Q2EuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxhfWZ1bmN0aW9uIEhhKGEsYil7dmFyIGMsZCxlLGYsZyxoLGksajtpZigxPT09Yi5ub2RlVHlwZSl7aWYoVy5oYXNEYXRhKGEpJiYoZj1XLmFjY2VzcyhhKSxnPVcuc2V0KGIsZiksaj1mLmV2ZW50cykpe2RlbGV0ZSBnLmhhbmRsZSxnLmV2ZW50cz17fTtmb3IoZSBpbiBqKWZvcihjPTAsZD1qW2VdLmxlbmd0aDtjPGQ7YysrKXIuZXZlbnQuYWRkKGIsZSxqW2VdW2NdKX1YLmhhc0RhdGEoYSkmJihoPVguYWNjZXNzKGEpLGk9ci5leHRlbmQoe30saCksWC5zZXQoYixpKSl9fWZ1bmN0aW9uIElhKGEsYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wiaW5wdXRcIj09PWMmJmphLnRlc3QoYS50eXBlKT9iLmNoZWNrZWQ9YS5jaGVja2VkOlwiaW5wdXRcIiE9PWMmJlwidGV4dGFyZWFcIiE9PWN8fChiLmRlZmF1bHRWYWx1ZT1hLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gSmEoYSxiLGMsZCl7Yj1nLmFwcGx5KFtdLGIpO3ZhciBlLGYsaCxpLGosayxsPTAsbT1hLmxlbmd0aCxuPW0tMSxxPWJbMF0scz1yLmlzRnVuY3Rpb24ocSk7aWYoc3x8bT4xJiZcInN0cmluZ1wiPT10eXBlb2YgcSYmIW8uY2hlY2tDbG9uZSYmQmEudGVzdChxKSlyZXR1cm4gYS5lYWNoKGZ1bmN0aW9uKGUpe3ZhciBmPWEuZXEoZSk7cyYmKGJbMF09cS5jYWxsKHRoaXMsZSxmLmh0bWwoKSkpLEphKGYsYixjLGQpfSk7aWYobSYmKGU9cWEoYixhWzBdLm93bmVyRG9jdW1lbnQsITEsYSxkKSxmPWUuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9ZiksZnx8ZCkpe2ZvcihoPXIubWFwKG5hKGUsXCJzY3JpcHRcIiksRmEpLGk9aC5sZW5ndGg7bDxtO2wrKylqPWUsbCE9PW4mJihqPXIuY2xvbmUoaiwhMCwhMCksaSYmci5tZXJnZShoLG5hKGosXCJzY3JpcHRcIikpKSxjLmNhbGwoYVtsXSxqLGwpO2lmKGkpZm9yKGs9aFtoLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHIubWFwKGgsR2EpLGw9MDtsPGk7bCsrKWo9aFtsXSxsYS50ZXN0KGoudHlwZXx8XCJcIikmJiFXLmFjY2VzcyhqLFwiZ2xvYmFsRXZhbFwiKSYmci5jb250YWlucyhrLGopJiYoai5zcmM/ci5fZXZhbFVybCYmci5fZXZhbFVybChqLnNyYyk6cChqLnRleHRDb250ZW50LnJlcGxhY2UoRGEsXCJcIiksaykpfXJldHVybiBhfWZ1bmN0aW9uIEthKGEsYixjKXtmb3IodmFyIGQsZT1iP3IuZmlsdGVyKGIsYSk6YSxmPTA7bnVsbCE9KGQ9ZVtmXSk7ZisrKWN8fDEhPT1kLm5vZGVUeXBlfHxyLmNsZWFuRGF0YShuYShkKSksZC5wYXJlbnROb2RlJiYoYyYmci5jb250YWlucyhkLm93bmVyRG9jdW1lbnQsZCkmJm9hKG5hKGQsXCJzY3JpcHRcIikpLGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkKSk7cmV0dXJuIGF9ci5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSh6YSxcIjwkMT48LyQyPlwiKX0sY2xvbmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5jbG9uZU5vZGUoITApLGk9ci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSk7aWYoIShvLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxyLmlzWE1MRG9jKGEpKSlmb3IoZz1uYShoKSxmPW5hKGEpLGQ9MCxlPWYubGVuZ3RoO2Q8ZTtkKyspSWEoZltkXSxnW2RdKTtpZihiKWlmKGMpZm9yKGY9Znx8bmEoYSksZz1nfHxuYShoKSxkPTAsZT1mLmxlbmd0aDtkPGU7ZCsrKUhhKGZbZF0sZ1tkXSk7ZWxzZSBIYShhLGgpO3JldHVybiBnPW5hKGgsXCJzY3JpcHRcIiksZy5sZW5ndGg+MCYmb2EoZywhaSYmbmEoYSxcInNjcmlwdFwiKSksaH0sY2xlYW5EYXRhOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYixjLGQsZT1yLmV2ZW50LnNwZWNpYWwsZj0wO3ZvaWQgMCE9PShjPWFbZl0pO2YrKylpZihVKGMpKXtpZihiPWNbVy5leHBhbmRvXSl7aWYoYi5ldmVudHMpZm9yKGQgaW4gYi5ldmVudHMpZVtkXT9yLmV2ZW50LnJlbW92ZShjLGQpOnIucmVtb3ZlRXZlbnQoYyxkLGIuaGFuZGxlKTtjW1cuZXhwYW5kb109dm9pZCAwfWNbWC5leHBhbmRvXSYmKGNbWC5leHBhbmRvXT12b2lkIDApfX19KSxyLmZuLmV4dGVuZCh7ZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiBLYSh0aGlzLGEsITApfSxyZW1vdmU6ZnVuY3Rpb24oYSl7cmV0dXJuIEthKHRoaXMsYSl9LHRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyxmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YT9yLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9YSl9KX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSmEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPUVhKHRoaXMsYSk7Yi5hcHBlbmRDaGlsZChhKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9RWEodGhpcyxhKTtiLmluc2VydEJlZm9yZShhLGIuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzLm5leHRTaWJsaW5nKX0pfSxlbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgYSxiPTA7bnVsbCE9KGE9dGhpc1tiXSk7YisrKTE9PT1hLm5vZGVUeXBlJiYoci5jbGVhbkRhdGEobmEoYSwhMSkpLGEudGV4dENvbnRlbnQ9XCJcIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bnVsbCE9YSYmYSxiPW51bGw9PWI/YTpiLHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIHIuY2xvbmUodGhpcyxhLGIpfSl9LGh0bWw6ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyxmdW5jdGlvbihhKXt2YXIgYj10aGlzWzBdfHx7fSxjPTAsZD10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1hJiYxPT09Yi5ub2RlVHlwZSlyZXR1cm4gYi5pbm5lckhUTUw7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJiFBYS50ZXN0KGEpJiYhbWFbKGthLmV4ZWMoYSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7YT1yLmh0bWxQcmVmaWx0ZXIoYSk7dHJ5e2Zvcig7YzxkO2MrKyliPXRoaXNbY118fHt9LDE9PT1iLm5vZGVUeXBlJiYoci5jbGVhbkRhdGEobmEoYiwhMSkpLGIuaW5uZXJIVE1MPWEpO2I9MH1jYXRjaChlKXt9fWImJnRoaXMuZW1wdHkoKS5hcHBlbmQoYSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgYT1bXTtyZXR1cm4gSmEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5wYXJlbnROb2RlO3IuaW5BcnJheSh0aGlzLGEpPDAmJihyLmNsZWFuRGF0YShuYSh0aGlzKSksYyYmYy5yZXBsYWNlQ2hpbGQoYix0aGlzKSl9LGEpfX0pLHIuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYSl7Zm9yKHZhciBjLGQ9W10sZT1yKGEpLGY9ZS5sZW5ndGgtMSxnPTA7Zzw9ZjtnKyspYz1nPT09Zj90aGlzOnRoaXMuY2xvbmUoITApLHIoZVtnXSlbYl0oYyksaC5hcHBseShkLGMuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhkKX19KTt2YXIgTGE9L15tYXJnaW4vLE1hPW5ldyBSZWdFeHAoXCJeKFwiK2FhK1wiKSg/IXB4KVthLXolXSskXCIsXCJpXCIpLE5hPWZ1bmN0aW9uKGIpe3ZhciBjPWIub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztyZXR1cm4gYyYmYy5vcGVuZXJ8fChjPWEpLGMuZ2V0Q29tcHV0ZWRTdHlsZShiKX07IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYigpe2lmKGkpe2kuc3R5bGUuY3NzVGV4dD1cImJveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7dG9wOjElO3dpZHRoOjUwJVwiLGkuaW5uZXJIVE1MPVwiXCIscmEuYXBwZW5kQ2hpbGQoaCk7dmFyIGI9YS5nZXRDb21wdXRlZFN0eWxlKGkpO2M9XCIxJVwiIT09Yi50b3AsZz1cIjJweFwiPT09Yi5tYXJnaW5MZWZ0LGU9XCI0cHhcIj09PWIud2lkdGgsaS5zdHlsZS5tYXJnaW5SaWdodD1cIjUwJVwiLGY9XCI0cHhcIj09PWIubWFyZ2luUmlnaHQscmEucmVtb3ZlQ2hpbGQoaCksaT1udWxsfX12YXIgYyxlLGYsZyxoPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxpPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLnN0eWxlJiYoaS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsaS5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsby5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09aS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxoLnN0eWxlLmNzc1RleHQ9XCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O3BhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiLGguYXBwZW5kQ2hpbGQoaSksci5leHRlbmQobyx7cGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBiKCksY30sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGV9LHBpeGVsTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGZ9LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBiKCksZ319KSl9KCk7ZnVuY3Rpb24gT2EoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5zdHlsZTtyZXR1cm4gYz1jfHxOYShhKSxjJiYoZz1jLmdldFByb3BlcnR5VmFsdWUoYil8fGNbYl0sXCJcIiE9PWd8fHIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfHwoZz1yLnN0eWxlKGEsYikpLCFvLnBpeGVsTWFyZ2luUmlnaHQoKSYmTWEudGVzdChnKSYmTGEudGVzdChiKSYmKGQ9aC53aWR0aCxlPWgubWluV2lkdGgsZj1oLm1heFdpZHRoLGgubWluV2lkdGg9aC5tYXhXaWR0aD1oLndpZHRoPWcsZz1jLndpZHRoLGgud2lkdGg9ZCxoLm1pbldpZHRoPWUsaC5tYXhXaWR0aD1mKSksdm9pZCAwIT09Zz9nK1wiXCI6Z31mdW5jdGlvbiBQYShhLGIpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpP3ZvaWQgZGVsZXRlIHRoaXMuZ2V0Oih0aGlzLmdldD1iKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fX12YXIgUWE9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFJhPS9eLS0vLFNhPXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxUYT17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9LFVhPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxWYT1kLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7ZnVuY3Rpb24gV2EoYSl7aWYoYSBpbiBWYSlyZXR1cm4gYTt2YXIgYj1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxjPVVhLmxlbmd0aDt3aGlsZShjLS0paWYoYT1VYVtjXStiLGEgaW4gVmEpcmV0dXJuIGF9ZnVuY3Rpb24gWGEoYSl7dmFyIGI9ci5jc3NQcm9wc1thXTtyZXR1cm4gYnx8KGI9ci5jc3NQcm9wc1thXT1XYShhKXx8YSksYn1mdW5jdGlvbiBZYShhLGIsYyl7dmFyIGQ9YmEuZXhlYyhiKTtyZXR1cm4gZD9NYXRoLm1heCgwLGRbMl0tKGN8fDApKSsoZFszXXx8XCJweFwiKTpifWZ1bmN0aW9uIFphKGEsYixjLGQsZSl7dmFyIGYsZz0wO2ZvcihmPWM9PT0oZD9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PWI/MTowO2Y8NDtmKz0yKVwibWFyZ2luXCI9PT1jJiYoZys9ci5jc3MoYSxjK2NhW2ZdLCEwLGUpKSxkPyhcImNvbnRlbnRcIj09PWMmJihnLT1yLmNzcyhhLFwicGFkZGluZ1wiK2NhW2ZdLCEwLGUpKSxcIm1hcmdpblwiIT09YyYmKGctPXIuY3NzKGEsXCJib3JkZXJcIitjYVtmXStcIldpZHRoXCIsITAsZSkpKTooZys9ci5jc3MoYSxcInBhZGRpbmdcIitjYVtmXSwhMCxlKSxcInBhZGRpbmdcIiE9PWMmJihnKz1yLmNzcyhhLFwiYm9yZGVyXCIrY2FbZl0rXCJXaWR0aFwiLCEwLGUpKSk7cmV0dXJuIGd9ZnVuY3Rpb24gJGEoYSxiLGMpe3ZhciBkLGU9TmEoYSksZj1PYShhLGIsZSksZz1cImJvcmRlci1ib3hcIj09PXIuY3NzKGEsXCJib3hTaXppbmdcIiwhMSxlKTtyZXR1cm4gTWEudGVzdChmKT9mOihkPWcmJihvLmJveFNpemluZ1JlbGlhYmxlKCl8fGY9PT1hLnN0eWxlW2JdKSxcImF1dG9cIj09PWYmJihmPWFbXCJvZmZzZXRcIitiWzBdLnRvVXBwZXJDYXNlKCkrYi5zbGljZSgxKV0pLGY9cGFyc2VGbG9hdChmKXx8MCxmK1phKGEsYixjfHwoZz9cImJvcmRlclwiOlwiY29udGVudFwiKSxkLGUpK1wicHhcIil9ci5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oYSxiKXtpZihiKXt2YXIgYz1PYShhLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09Yz9cIjFcIjpjfX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOntcImZsb2F0XCI6XCJjc3NGbG9hdFwifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPXIuY2FtZWxDYXNlKGIpLGk9UmEudGVzdChiKSxqPWEuc3R5bGU7cmV0dXJuIGl8fChiPVhhKGgpKSxnPXIuY3NzSG9va3NbYl18fHIuY3NzSG9va3NbaF0sdm9pZCAwPT09Yz9nJiZcImdldFwiaW4gZyYmdm9pZCAwIT09KGU9Zy5nZXQoYSwhMSxkKSk/ZTpqW2JdOihmPXR5cGVvZiBjLFwic3RyaW5nXCI9PT1mJiYoZT1iYS5leGVjKGMpKSYmZVsxXSYmKGM9ZmEoYSxiLGUpLGY9XCJudW1iZXJcIiksbnVsbCE9YyYmYz09PWMmJihcIm51bWJlclwiPT09ZiYmKGMrPWUmJmVbM118fChyLmNzc051bWJlcltoXT9cIlwiOlwicHhcIikpLG8uY2xlYXJDbG9uZVN0eWxlfHxcIlwiIT09Y3x8MCE9PWIuaW5kZXhPZihcImJhY2tncm91bmRcIil8fChqW2JdPVwiaW5oZXJpdFwiKSxnJiZcInNldFwiaW4gZyYmdm9pZCAwPT09KGM9Zy5zZXQoYSxjLGQpKXx8KGk/ai5zZXRQcm9wZXJ0eShiLGMpOmpbYl09YykpLHZvaWQgMCl9fSxjc3M6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGg9ci5jYW1lbENhc2UoYiksaT1SYS50ZXN0KGIpO3JldHVybiBpfHwoYj1YYShoKSksZz1yLmNzc0hvb2tzW2JdfHxyLmNzc0hvb2tzW2hdLGcmJlwiZ2V0XCJpbiBnJiYoZT1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1lJiYoZT1PYShhLGIsZCkpLFwibm9ybWFsXCI9PT1lJiZiIGluIFRhJiYoZT1UYVtiXSksXCJcIj09PWN8fGM/KGY9cGFyc2VGbG9hdChlKSxjPT09ITB8fGlzRmluaXRlKGYpP2Z8fDA6ZSk6ZX19KSxyLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYl09e2dldDpmdW5jdGlvbihhLGMsZCl7aWYoYylyZXR1cm4hUWEudGVzdChyLmNzcyhhLFwiZGlzcGxheVwiKSl8fGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/JGEoYSxiLGQpOmVhKGEsU2EsZnVuY3Rpb24oKXtyZXR1cm4gJGEoYSxiLGQpfSl9LHNldDpmdW5jdGlvbihhLGMsZCl7dmFyIGUsZj1kJiZOYShhKSxnPWQmJlphKGEsYixkLFwiYm9yZGVyLWJveFwiPT09ci5jc3MoYSxcImJveFNpemluZ1wiLCExLGYpLGYpO3JldHVybiBnJiYoZT1iYS5leGVjKGMpKSYmXCJweFwiIT09KGVbM118fFwicHhcIikmJihhLnN0eWxlW2JdPWMsYz1yLmNzcyhhLGIpKSxZYShhLGMsZyl9fX0pLHIuY3NzSG9va3MubWFyZ2luTGVmdD1QYShvLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihhLGIpe2lmKGIpcmV0dXJuKHBhcnNlRmxvYXQoT2EoYSxcIm1hcmdpbkxlZnRcIikpfHxhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtZWEoYSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksci5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmNzc0hvb2tzW2ErYl09e2V4cGFuZDpmdW5jdGlvbihjKXtmb3IodmFyIGQ9MCxlPXt9LGY9XCJzdHJpbmdcIj09dHlwZW9mIGM/Yy5zcGxpdChcIiBcIik6W2NdO2Q8NDtkKyspZVthK2NhW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LExhLnRlc3QoYSl8fChyLmNzc0hvb2tzW2ErYl0uc2V0PVlhKX0pLHIuZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKEFycmF5LmlzQXJyYXkoYikpe2ZvcihkPU5hKGEpLGU9Yi5sZW5ndGg7ZzxlO2crKylmW2JbZ11dPXIuY3NzKGEsYltnXSwhMSxkKTtyZXR1cm4gZn1yZXR1cm4gdm9pZCAwIT09Yz9yLnN0eWxlKGEsYixjKTpyLmNzcyhhLGIpfSxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX19KTtmdW5jdGlvbiBfYShhLGIsYyxkLGUpe3JldHVybiBuZXcgX2EucHJvdG90eXBlLmluaXQoYSxiLGMsZCxlKX1yLlR3ZWVuPV9hLF9hLnByb3RvdHlwZT17Y29uc3RydWN0b3I6X2EsaW5pdDpmdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5lbGVtPWEsdGhpcy5wcm9wPWMsdGhpcy5lYXNpbmc9ZXx8ci5lYXNpbmcuX2RlZmF1bHQsdGhpcy5vcHRpb25zPWIsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPWQsdGhpcy51bml0PWZ8fChyLmNzc051bWJlcltjXT9cIlwiOlwicHhcIil9LGN1cjpmdW5jdGlvbigpe3ZhciBhPV9hLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBhJiZhLmdldD9hLmdldCh0aGlzKTpfYS5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oYSl7dmFyIGIsYz1fYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uP3RoaXMucG9zPWI9ci5lYXNpbmdbdGhpcy5lYXNpbmddKGEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmEsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9Yj1hLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSpiK3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLGMmJmMuc2V0P2Muc2V0KHRoaXMpOl9hLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319LF9hLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1fYS5wcm90b3R5cGUsX2EucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiAxIT09YS5lbGVtLm5vZGVUeXBlfHxudWxsIT1hLmVsZW1bYS5wcm9wXSYmbnVsbD09YS5lbGVtLnN0eWxlW2EucHJvcF0/YS5lbGVtW2EucHJvcF06KGI9ci5jc3MoYS5lbGVtLGEucHJvcCxcIlwiKSxiJiZcImF1dG9cIiE9PWI/YjowKX0sc2V0OmZ1bmN0aW9uKGEpe3IuZnguc3RlcFthLnByb3BdP3IuZnguc3RlcFthLnByb3BdKGEpOjEhPT1hLmVsZW0ubm9kZVR5cGV8fG51bGw9PWEuZWxlbS5zdHlsZVtyLmNzc1Byb3BzW2EucHJvcF1dJiYhci5jc3NIb29rc1thLnByb3BdP2EuZWxlbVthLnByb3BdPWEubm93OnIuc3R5bGUoYS5lbGVtLGEucHJvcCxhLm5vdythLnVuaXQpfX19LF9hLnByb3BIb29rcy5zY3JvbGxUb3A9X2EucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihhKXthLmVsZW0ubm9kZVR5cGUmJmEuZWxlbS5wYXJlbnROb2RlJiYoYS5lbGVtW2EucHJvcF09YS5ub3cpfX0sci5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihhKXtyZXR1cm4gYX0sc3dpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuLjUtTWF0aC5jb3MoYSpNYXRoLlBJKS8yfSxfZGVmYXVsdDpcInN3aW5nXCJ9LHIuZng9X2EucHJvdG90eXBlLmluaXQsci5meC5zdGVwPXt9O3ZhciBhYixiYixjYj0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sZGI9L3F1ZXVlSG9va3MkLztmdW5jdGlvbiBlYigpe2JiJiYoZC5oaWRkZW49PT0hMSYmYS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/YS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZWIpOmEuc2V0VGltZW91dChlYixyLmZ4LmludGVydmFsKSxyLmZ4LnRpY2soKSl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4gYS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YWI9dm9pZCAwfSksYWI9ci5ub3coKX1mdW5jdGlvbiBnYihhLGIpe3ZhciBjLGQ9MCxlPXtoZWlnaHQ6YX07Zm9yKGI9Yj8xOjA7ZDw0O2QrPTItYiljPWNhW2RdLGVbXCJtYXJnaW5cIitjXT1lW1wicGFkZGluZ1wiK2NdPWE7cmV0dXJuIGImJihlLm9wYWNpdHk9ZS53aWR0aD1hKSxlfWZ1bmN0aW9uIGhiKGEsYixjKXtmb3IodmFyIGQsZT0oa2IudHdlZW5lcnNbYl18fFtdKS5jb25jYXQoa2IudHdlZW5lcnNbXCIqXCJdKSxmPTAsZz1lLmxlbmd0aDtmPGc7ZisrKWlmKGQ9ZVtmXS5jYWxsKGMsYixhKSlyZXR1cm4gZH1mdW5jdGlvbiBpYihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosayxsPVwid2lkdGhcImluIGJ8fFwiaGVpZ2h0XCJpbiBiLG09dGhpcyxuPXt9LG89YS5zdHlsZSxwPWEubm9kZVR5cGUmJmRhKGEpLHE9Vy5nZXQoYSxcImZ4c2hvd1wiKTtjLnF1ZXVlfHwoZz1yLl9xdWV1ZUhvb2tzKGEsXCJmeFwiKSxudWxsPT1nLnVucXVldWVkJiYoZy51bnF1ZXVlZD0wLGg9Zy5lbXB0eS5maXJlLGcuZW1wdHkuZmlyZT1mdW5jdGlvbigpe2cudW5xdWV1ZWR8fGgoKX0pLGcudW5xdWV1ZWQrKyxtLmFsd2F5cyhmdW5jdGlvbigpe20uYWx3YXlzKGZ1bmN0aW9uKCl7Zy51bnF1ZXVlZC0tLHIucXVldWUoYSxcImZ4XCIpLmxlbmd0aHx8Zy5lbXB0eS5maXJlKCl9KX0pKTtmb3IoZCBpbiBiKWlmKGU9YltkXSxjYi50ZXN0KGUpKXtpZihkZWxldGUgYltkXSxmPWZ8fFwidG9nZ2xlXCI9PT1lLGU9PT0ocD9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09ZXx8IXF8fHZvaWQgMD09PXFbZF0pY29udGludWU7cD0hMH1uW2RdPXEmJnFbZF18fHIuc3R5bGUoYSxkKX1pZihpPSFyLmlzRW1wdHlPYmplY3QoYiksaXx8IXIuaXNFbXB0eU9iamVjdChuKSl7bCYmMT09PWEubm9kZVR5cGUmJihjLm92ZXJmbG93PVtvLm92ZXJmbG93LG8ub3ZlcmZsb3dYLG8ub3ZlcmZsb3dZXSxqPXEmJnEuZGlzcGxheSxudWxsPT1qJiYoaj1XLmdldChhLFwiZGlzcGxheVwiKSksaz1yLmNzcyhhLFwiZGlzcGxheVwiKSxcIm5vbmVcIj09PWsmJihqP2s9ajooaWEoW2FdLCEwKSxqPWEuc3R5bGUuZGlzcGxheXx8aixrPXIuY3NzKGEsXCJkaXNwbGF5XCIpLGlhKFthXSkpKSwoXCJpbmxpbmVcIj09PWt8fFwiaW5saW5lLWJsb2NrXCI9PT1rJiZudWxsIT1qKSYmXCJub25lXCI9PT1yLmNzcyhhLFwiZmxvYXRcIikmJihpfHwobS5kb25lKGZ1bmN0aW9uKCl7by5kaXNwbGF5PWp9KSxudWxsPT1qJiYoaz1vLmRpc3BsYXksaj1cIm5vbmVcIj09PWs/XCJcIjprKSksby5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYoby5vdmVyZmxvdz1cImhpZGRlblwiLG0uYWx3YXlzKGZ1bmN0aW9uKCl7by5vdmVyZmxvdz1jLm92ZXJmbG93WzBdLG8ub3ZlcmZsb3dYPWMub3ZlcmZsb3dbMV0sby5vdmVyZmxvd1k9Yy5vdmVyZmxvd1syXX0pKSxpPSExO2ZvcihkIGluIG4paXx8KHE/XCJoaWRkZW5cImluIHEmJihwPXEuaGlkZGVuKTpxPVcuYWNjZXNzKGEsXCJmeHNob3dcIix7ZGlzcGxheTpqfSksZiYmKHEuaGlkZGVuPSFwKSxwJiZpYShbYV0sITApLG0uZG9uZShmdW5jdGlvbigpe3B8fGlhKFthXSksVy5yZW1vdmUoYSxcImZ4c2hvd1wiKTtmb3IoZCBpbiBuKXIuc3R5bGUoYSxkLG5bZF0pfSkpLGk9aGIocD9xW2RdOjAsZCxtKSxkIGluIHF8fChxW2RdPWkuc3RhcnQscCYmKGkuZW5kPWkuc3RhcnQsaS5zdGFydD0wKSl9fWZ1bmN0aW9uIGpiKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoYyBpbiBhKWlmKGQ9ci5jYW1lbENhc2UoYyksZT1iW2RdLGY9YVtjXSxBcnJheS5pc0FycmF5KGYpJiYoZT1mWzFdLGY9YVtjXT1mWzBdKSxjIT09ZCYmKGFbZF09ZixkZWxldGUgYVtjXSksZz1yLmNzc0hvb2tzW2RdLGcmJlwiZXhwYW5kXCJpbiBnKXtmPWcuZXhwYW5kKGYpLGRlbGV0ZSBhW2RdO2ZvcihjIGluIGYpYyBpbiBhfHwoYVtjXT1mW2NdLGJbY109ZSl9ZWxzZSBiW2RdPWV9ZnVuY3Rpb24ga2IoYSxiLGMpe3ZhciBkLGUsZj0wLGc9a2IucHJlZmlsdGVycy5sZW5ndGgsaD1yLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIGkuZWxlbX0pLGk9ZnVuY3Rpb24oKXtpZihlKXJldHVybiExO2Zvcih2YXIgYj1hYnx8ZmIoKSxjPU1hdGgubWF4KDAsai5zdGFydFRpbWUrai5kdXJhdGlvbi1iKSxkPWMvai5kdXJhdGlvbnx8MCxmPTEtZCxnPTAsaT1qLnR3ZWVucy5sZW5ndGg7ZzxpO2crKylqLnR3ZWVuc1tnXS5ydW4oZik7cmV0dXJuIGgubm90aWZ5V2l0aChhLFtqLGYsY10pLGY8MSYmaT9jOihpfHxoLm5vdGlmeVdpdGgoYSxbaiwxLDBdKSxoLnJlc29sdmVXaXRoKGEsW2pdKSwhMSl9LGo9aC5wcm9taXNlKHtlbGVtOmEscHJvcHM6ci5leHRlbmQoe30sYiksb3B0czpyLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fSxlYXNpbmc6ci5lYXNpbmcuX2RlZmF1bHR9LGMpLG9yaWdpbmFsUHJvcGVydGllczpiLG9yaWdpbmFsT3B0aW9uczpjLHN0YXJ0VGltZTphYnx8ZmIoKSxkdXJhdGlvbjpjLmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbihiLGMpe3ZhciBkPXIuVHdlZW4oYSxqLm9wdHMsYixjLGoub3B0cy5zcGVjaWFsRWFzaW5nW2JdfHxqLm9wdHMuZWFzaW5nKTtyZXR1cm4gai50d2VlbnMucHVzaChkKSxkfSxzdG9wOmZ1bmN0aW9uKGIpe3ZhciBjPTAsZD1iP2oudHdlZW5zLmxlbmd0aDowO2lmKGUpcmV0dXJuIHRoaXM7Zm9yKGU9ITA7YzxkO2MrKylqLnR3ZWVuc1tjXS5ydW4oMSk7cmV0dXJuIGI/KGgubm90aWZ5V2l0aChhLFtqLDEsMF0pLGgucmVzb2x2ZVdpdGgoYSxbaixiXSkpOmgucmVqZWN0V2l0aChhLFtqLGJdKSx0aGlzfX0pLGs9ai5wcm9wcztmb3IoamIoayxqLm9wdHMuc3BlY2lhbEVhc2luZyk7ZjxnO2YrKylpZihkPWtiLnByZWZpbHRlcnNbZl0uY2FsbChqLGEsayxqLm9wdHMpKXJldHVybiByLmlzRnVuY3Rpb24oZC5zdG9wKSYmKHIuX3F1ZXVlSG9va3Moai5lbGVtLGoub3B0cy5xdWV1ZSkuc3RvcD1yLnByb3h5KGQuc3RvcCxkKSksZDtyZXR1cm4gci5tYXAoayxoYixqKSxyLmlzRnVuY3Rpb24oai5vcHRzLnN0YXJ0KSYmai5vcHRzLnN0YXJ0LmNhbGwoYSxqKSxqLnByb2dyZXNzKGoub3B0cy5wcm9ncmVzcykuZG9uZShqLm9wdHMuZG9uZSxqLm9wdHMuY29tcGxldGUpLmZhaWwoai5vcHRzLmZhaWwpLmFsd2F5cyhqLm9wdHMuYWx3YXlzKSxyLmZ4LnRpbWVyKHIuZXh0ZW5kKGkse2VsZW06YSxhbmltOmoscXVldWU6ai5vcHRzLnF1ZXVlfSkpLGp9ci5BbmltYXRpb249ci5leHRlbmQoa2Ise3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNyZWF0ZVR3ZWVuKGEsYik7cmV0dXJuIGZhKGMuZWxlbSxhLGJhLmV4ZWMoYiksYyksY31dfSx0d2VlbmVyOmZ1bmN0aW9uKGEsYil7ci5pc0Z1bmN0aW9uKGEpPyhiPWEsYT1bXCIqXCJdKTphPWEubWF0Y2goTCk7Zm9yKHZhciBjLGQ9MCxlPWEubGVuZ3RoO2Q8ZTtkKyspYz1hW2RdLGtiLnR3ZWVuZXJzW2NdPWtiLnR3ZWVuZXJzW2NdfHxbXSxrYi50d2VlbmVyc1tjXS51bnNoaWZ0KGIpfSxwcmVmaWx0ZXJzOltpYl0scHJlZmlsdGVyOmZ1bmN0aW9uKGEsYil7Yj9rYi5wcmVmaWx0ZXJzLnVuc2hpZnQoYSk6a2IucHJlZmlsdGVycy5wdXNoKGEpfX0pLHIuc3BlZWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEmJlwib2JqZWN0XCI9PXR5cGVvZiBhP3IuZXh0ZW5kKHt9LGEpOntjb21wbGV0ZTpjfHwhYyYmYnx8ci5pc0Z1bmN0aW9uKGEpJiZhLGR1cmF0aW9uOmEsZWFzaW5nOmMmJmJ8fGImJiFyLmlzRnVuY3Rpb24oYikmJmJ9O3JldHVybiByLmZ4Lm9mZj9kLmR1cmF0aW9uPTA6XCJudW1iZXJcIiE9dHlwZW9mIGQuZHVyYXRpb24mJihkLmR1cmF0aW9uIGluIHIuZnguc3BlZWRzP2QuZHVyYXRpb249ci5meC5zcGVlZHNbZC5kdXJhdGlvbl06ZC5kdXJhdGlvbj1yLmZ4LnNwZWVkcy5fZGVmYXVsdCksbnVsbCE9ZC5xdWV1ZSYmZC5xdWV1ZSE9PSEwfHwoZC5xdWV1ZT1cImZ4XCIpLGQub2xkPWQuY29tcGxldGUsZC5jb21wbGV0ZT1mdW5jdGlvbigpe3IuaXNGdW5jdGlvbihkLm9sZCkmJmQub2xkLmNhbGwodGhpcyksZC5xdWV1ZSYmci5kZXF1ZXVlKHRoaXMsZC5xdWV1ZSl9LGR9LHIuZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuZmlsdGVyKGRhKS5jc3MoXCJvcGFjaXR5XCIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6Yn0sYSxjLGQpfSxhbmltYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXIuaXNFbXB0eU9iamVjdChhKSxmPXIuc3BlZWQoYixjLGQpLGc9ZnVuY3Rpb24oKXt2YXIgYj1rYih0aGlzLHIuZXh0ZW5kKHt9LGEpLGYpOyhlfHxXLmdldCh0aGlzLFwiZmluaXNoXCIpKSYmYi5zdG9wKCEwKX07cmV0dXJuIGcuZmluaXNoPWcsZXx8Zi5xdWV1ZT09PSExP3RoaXMuZWFjaChnKTp0aGlzLnF1ZXVlKGYucXVldWUsZyl9LHN0b3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWZ1bmN0aW9uKGEpe3ZhciBiPWEuc3RvcDtkZWxldGUgYS5zdG9wLGIoYyl9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBhJiYoYz1iLGI9YSxhPXZvaWQgMCksYiYmYSE9PSExJiZ0aGlzLnF1ZXVlKGF8fFwiZnhcIixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9ITAsZT1udWxsIT1hJiZhK1wicXVldWVIb29rc1wiLGY9ci50aW1lcnMsZz1XLmdldCh0aGlzKTtpZihlKWdbZV0mJmdbZV0uc3RvcCYmZChnW2VdKTtlbHNlIGZvcihlIGluIGcpZ1tlXSYmZ1tlXS5zdG9wJiZkYi50ZXN0KGUpJiZkKGdbZV0pO2ZvcihlPWYubGVuZ3RoO2UtLTspZltlXS5lbGVtIT09dGhpc3x8bnVsbCE9YSYmZltlXS5xdWV1ZSE9PWF8fChmW2VdLmFuaW0uc3RvcChjKSxiPSExLGYuc3BsaWNlKGUsMSkpOyFiJiZjfHxyLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixjPVcuZ2V0KHRoaXMpLGQ9Y1thK1wicXVldWVcIl0sZT1jW2ErXCJxdWV1ZUhvb2tzXCJdLGY9ci50aW1lcnMsZz1kP2QubGVuZ3RoOjA7Zm9yKGMuZmluaXNoPSEwLHIucXVldWUodGhpcyxhLFtdKSxlJiZlLnN0b3AmJmUuc3RvcC5jYWxsKHRoaXMsITApLGI9Zi5sZW5ndGg7Yi0tOylmW2JdLmVsZW09PT10aGlzJiZmW2JdLnF1ZXVlPT09YSYmKGZbYl0uYW5pbS5zdG9wKCEwKSxmLnNwbGljZShiLDEpKTtmb3IoYj0wO2I8ZztiKyspZFtiXSYmZFtiXS5maW5pc2gmJmRbYl0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIGMuZmluaXNofSl9fSksci5lYWNoKFtcInRvZ2dsZVwiLFwic2hvd1wiLFwiaGlkZVwiXSxmdW5jdGlvbihhLGIpe3ZhciBjPXIuZm5bYl07ci5mbltiXT1mdW5jdGlvbihhLGQsZSl7cmV0dXJuIG51bGw9PWF8fFwiYm9vbGVhblwiPT10eXBlb2YgYT9jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUoZ2IoYiwhMCksYSxkLGUpfX0pLHIuZWFjaCh7c2xpZGVEb3duOmdiKFwic2hvd1wiKSxzbGlkZVVwOmdiKFwiaGlkZVwiKSxzbGlkZVRvZ2dsZTpnYihcInRvZ2dsZVwiKSxmYWRlSW46e29wYWNpdHk6XCJzaG93XCJ9LGZhZGVPdXQ6e29wYWNpdHk6XCJoaWRlXCJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6XCJ0b2dnbGVcIn19LGZ1bmN0aW9uKGEsYil7ci5mblthXT1mdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuYW5pbWF0ZShiLGEsYyxkKX19KSxyLnRpbWVycz1bXSxyLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgYSxiPTAsYz1yLnRpbWVycztmb3IoYWI9ci5ub3coKTtiPGMubGVuZ3RoO2IrKylhPWNbYl0sYSgpfHxjW2JdIT09YXx8Yy5zcGxpY2UoYi0tLDEpO2MubGVuZ3RofHxyLmZ4LnN0b3AoKSxhYj12b2lkIDB9LHIuZngudGltZXI9ZnVuY3Rpb24oYSl7ci50aW1lcnMucHVzaChhKSxyLmZ4LnN0YXJ0KCl9LHIuZnguaW50ZXJ2YWw9MTMsci5meC5zdGFydD1mdW5jdGlvbigpe2JifHwoYmI9ITAsZWIoKSl9LHIuZnguc3RvcD1mdW5jdGlvbigpe2JiPW51bGx9LHIuZnguc3BlZWRzPXtzbG93OjYwMCxmYXN0OjIwMCxfZGVmYXVsdDo0MDB9LHIuZm4uZGVsYXk9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj1yLmZ4P3IuZnguc3BlZWRzW2JdfHxiOmIsYz1jfHxcImZ4XCIsdGhpcy5xdWV1ZShjLGZ1bmN0aW9uKGMsZCl7dmFyIGU9YS5zZXRUaW1lb3V0KGMsYik7ZC5zdG9wPWZ1bmN0aW9uKCl7YS5jbGVhclRpbWVvdXQoZSl9fSl9LGZ1bmN0aW9uKCl7dmFyIGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYj1kLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksYz1iLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7YS50eXBlPVwiY2hlY2tib3hcIixvLmNoZWNrT249XCJcIiE9PWEudmFsdWUsby5vcHRTZWxlY3RlZD1jLnNlbGVjdGVkLGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS52YWx1ZT1cInRcIixhLnR5cGU9XCJyYWRpb1wiLG8ucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIGxiLG1iPXIuZXhwci5hdHRySGFuZGxlO3IuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxyLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksci5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuZ2V0QXR0cmlidXRlP3IucHJvcChhLGIsYyk6KDE9PT1mJiZyLmlzWE1MRG9jKGEpfHwoZT1yLmF0dHJIb29rc1tiLnRvTG93ZXJDYXNlKCldfHwoci5leHByLm1hdGNoLmJvb2wudGVzdChiKT9sYjp2b2lkIDApKSx2b2lkIDAhPT1jP251bGw9PT1jP3ZvaWQgci5yZW1vdmVBdHRyKGEsYik6ZSYmXCJzZXRcImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDooZD1yLmZpbmQuYXR0cihhLGIpLFxubnVsbD09ZD92b2lkIDA6ZCkpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihhLGIpe2lmKCFvLnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PWImJkIoYSxcImlucHV0XCIpKXt2YXIgYz1hLnZhbHVlO3JldHVybiBhLnNldEF0dHJpYnV0ZShcInR5cGVcIixiKSxjJiYoYS52YWx1ZT1jKSxifX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wLGU9YiYmYi5tYXRjaChMKTtpZihlJiYxPT09YS5ub2RlVHlwZSl3aGlsZShjPWVbZCsrXSlhLnJlbW92ZUF0dHJpYnV0ZShjKX19KSxsYj17c2V0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj09PSExP3IucmVtb3ZlQXR0cihhLGMpOmEuc2V0QXR0cmlidXRlKGMsYyksY319LHIuZWFjaChyLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksZnVuY3Rpb24oYSxiKXt2YXIgYz1tYltiXXx8ci5maW5kLmF0dHI7bWJbYl09ZnVuY3Rpb24oYSxiLGQpe3ZhciBlLGYsZz1iLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGR8fChmPW1iW2ddLG1iW2ddPWUsZT1udWxsIT1jKGEsYixkKT9nOm51bGwsbWJbZ109ZiksZX19KTt2YXIgbmI9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxvYj0vXig/OmF8YXJlYSkkL2k7ci5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVCh0aGlzLHIucHJvcCxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXNbci5wcm9wRml4W2FdfHxhXX0pfX0pLHIuZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9YS5ub2RlVHlwZTtpZigzIT09ZiYmOCE9PWYmJjIhPT1mKXJldHVybiAxPT09ZiYmci5pc1hNTERvYyhhKXx8KGI9ci5wcm9wRml4W2JdfHxiLGU9ci5wcm9wSG9va3NbYl0pLHZvaWQgMCE9PWM/ZSYmXCJzZXRcImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDphW2JdPWM6ZSYmXCJnZXRcImluIGUmJm51bGwhPT0oZD1lLmdldChhLGIpKT9kOmFbYl19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihhKXt2YXIgYj1yLmZpbmQuYXR0cihhLFwidGFiaW5kZXhcIik7cmV0dXJuIGI/cGFyc2VJbnQoYiwxMCk6bmIudGVzdChhLm5vZGVOYW1lKXx8b2IudGVzdChhLm5vZGVOYW1lKSYmYS5ocmVmPzA6LTF9fX0scHJvcEZpeDp7XCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIn19KSxvLm9wdFNlbGVjdGVkfHwoci5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJmIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsbnVsbH0sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtiJiYoYi5zZWxlY3RlZEluZGV4LGIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpfX0pLHIuZWFjaChbXCJ0YWJJbmRleFwiLFwicmVhZE9ubHlcIixcIm1heExlbmd0aFwiLFwiY2VsbFNwYWNpbmdcIixcImNlbGxQYWRkaW5nXCIsXCJyb3dTcGFuXCIsXCJjb2xTcGFuXCIsXCJ1c2VNYXBcIixcImZyYW1lQm9yZGVyXCIsXCJjb250ZW50RWRpdGFibGVcIl0sZnVuY3Rpb24oKXtyLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSk7ZnVuY3Rpb24gcGIoYSl7dmFyIGI9YS5tYXRjaChMKXx8W107cmV0dXJuIGIuam9pbihcIiBcIil9ZnVuY3Rpb24gcWIoYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlJiZhLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifXIuZm4uZXh0ZW5kKHthZGRDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpPTA7aWYoci5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7cih0aGlzKS5hZGRDbGFzcyhhLmNhbGwodGhpcyxiLHFiKHRoaXMpKSl9KTtpZihcInN0cmluZ1wiPT10eXBlb2YgYSYmYSl7Yj1hLm1hdGNoKEwpfHxbXTt3aGlsZShjPXRoaXNbaSsrXSlpZihlPXFiKGMpLGQ9MT09PWMubm9kZVR5cGUmJlwiIFwiK3BiKGUpK1wiIFwiKXtnPTA7d2hpbGUoZj1iW2crK10pZC5pbmRleE9mKFwiIFwiK2YrXCIgXCIpPDAmJihkKz1mK1wiIFwiKTtoPXBiKGQpLGUhPT1oJiZjLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsaCl9fXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpPTA7aWYoci5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7cih0aGlzKS5yZW1vdmVDbGFzcyhhLmNhbGwodGhpcyxiLHFiKHRoaXMpKSl9KTtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5hdHRyKFwiY2xhc3NcIixcIlwiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgYSYmYSl7Yj1hLm1hdGNoKEwpfHxbXTt3aGlsZShjPXRoaXNbaSsrXSlpZihlPXFiKGMpLGQ9MT09PWMubm9kZVR5cGUmJlwiIFwiK3BiKGUpK1wiIFwiKXtnPTA7d2hpbGUoZj1iW2crK10pd2hpbGUoZC5pbmRleE9mKFwiIFwiK2YrXCIgXCIpPi0xKWQ9ZC5yZXBsYWNlKFwiIFwiK2YrXCIgXCIsXCIgXCIpO2g9cGIoZCksZSE9PWgmJmMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixoKX19cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dHlwZW9mIGE7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBiJiZcInN0cmluZ1wiPT09Yz9iP3RoaXMuYWRkQ2xhc3MoYSk6dGhpcy5yZW1vdmVDbGFzcyhhKTpyLmlzRnVuY3Rpb24oYSk/dGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3IodGhpcykudG9nZ2xlQ2xhc3MoYS5jYWxsKHRoaXMsYyxxYih0aGlzKSxiKSxiKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiLGQsZSxmO2lmKFwic3RyaW5nXCI9PT1jKXtkPTAsZT1yKHRoaXMpLGY9YS5tYXRjaChMKXx8W107d2hpbGUoYj1mW2QrK10pZS5oYXNDbGFzcyhiKT9lLnJlbW92ZUNsYXNzKGIpOmUuYWRkQ2xhc3MoYil9ZWxzZSB2b2lkIDAhPT1hJiZcImJvb2xlYW5cIiE9PWN8fChiPXFiKHRoaXMpLGImJlcuc2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIsYiksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixifHxhPT09ITE/XCJcIjpXLmdldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIikpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZD0wO2I9XCIgXCIrYStcIiBcIjt3aGlsZShjPXRoaXNbZCsrXSlpZigxPT09Yy5ub2RlVHlwZSYmKFwiIFwiK3BiKHFiKGMpKStcIiBcIikuaW5kZXhPZihiKT4tMSlyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgcmI9L1xcci9nO3IuZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZD1yLmlzRnVuY3Rpb24oYSksdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBlOzE9PT10aGlzLm5vZGVUeXBlJiYoZT1kP2EuY2FsbCh0aGlzLGMscih0aGlzKS52YWwoKSk6YSxudWxsPT1lP2U9XCJcIjpcIm51bWJlclwiPT10eXBlb2YgZT9lKz1cIlwiOkFycmF5LmlzQXJyYXkoZSkmJihlPXIubWFwKGUsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjphK1wiXCJ9KSksYj1yLnZhbEhvb2tzW3RoaXMudHlwZV18fHIudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcInNldFwiaW4gYiYmdm9pZCAwIT09Yi5zZXQodGhpcyxlLFwidmFsdWVcIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9ci52YWxIb29rc1tlLnR5cGVdfHxyLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJnZXRcImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsXCJ2YWx1ZVwiKSk/YzooYz1lLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiBjP2MucmVwbGFjZShyYixcIlwiKTpudWxsPT1jP1wiXCI6Yyl9fX0pLHIuZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ci5maW5kLmF0dHIoYSxcInZhbHVlXCIpO3JldHVybiBudWxsIT1iP2I6cGIoci50ZXh0KGEpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPWEub3B0aW9ucyxmPWEuc2VsZWN0ZWRJbmRleCxnPVwic2VsZWN0LW9uZVwiPT09YS50eXBlLGg9Zz9udWxsOltdLGk9Zz9mKzE6ZS5sZW5ndGg7Zm9yKGQ9ZjwwP2k6Zz9mOjA7ZDxpO2QrKylpZihjPWVbZF0sKGMuc2VsZWN0ZWR8fGQ9PT1mKSYmIWMuZGlzYWJsZWQmJighYy5wYXJlbnROb2RlLmRpc2FibGVkfHwhQihjLnBhcmVudE5vZGUsXCJvcHRncm91cFwiKSkpe2lmKGI9cihjKS52YWwoKSxnKXJldHVybiBiO2gucHVzaChiKX1yZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPWEub3B0aW9ucyxmPXIubWFrZUFycmF5KGIpLGc9ZS5sZW5ndGg7d2hpbGUoZy0tKWQ9ZVtnXSwoZC5zZWxlY3RlZD1yLmluQXJyYXkoci52YWxIb29rcy5vcHRpb24uZ2V0KGQpLGYpPi0xKSYmKGM9ITApO3JldHVybiBjfHwoYS5zZWxlY3RlZEluZGV4PS0xKSxmfX19fSksci5lYWNoKFtcInJhZGlvXCIsXCJjaGVja2JveFwiXSxmdW5jdGlvbigpe3IudmFsSG9va3NbdGhpc109e3NldDpmdW5jdGlvbihhLGIpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEuY2hlY2tlZD1yLmluQXJyYXkocihhKS52YWwoKSxiKT4tMX19LG8uY2hlY2tPbnx8KHIudmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09YS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9cIm9uXCI6YS52YWx1ZX0pfSk7dmFyIHNiPS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztyLmV4dGVuZChyLmV2ZW50LHt0cmlnZ2VyOmZ1bmN0aW9uKGIsYyxlLGYpe3ZhciBnLGgsaSxqLGssbSxuLG89W2V8fGRdLHA9bC5jYWxsKGIsXCJ0eXBlXCIpP2IudHlwZTpiLHE9bC5jYWxsKGIsXCJuYW1lc3BhY2VcIik/Yi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKGg9aT1lPWV8fGQsMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiYhc2IudGVzdChwK3IuZXZlbnQudHJpZ2dlcmVkKSYmKHAuaW5kZXhPZihcIi5cIik+LTEmJihxPXAuc3BsaXQoXCIuXCIpLHA9cS5zaGlmdCgpLHEuc29ydCgpKSxrPXAuaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK3AsYj1iW3IuZXhwYW5kb10/YjpuZXcgci5FdmVudChwLFwib2JqZWN0XCI9PXR5cGVvZiBiJiZiKSxiLmlzVHJpZ2dlcj1mPzI6MyxiLm5hbWVzcGFjZT1xLmpvaW4oXCIuXCIpLGIucm5hbWVzcGFjZT1iLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcS5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxiLnJlc3VsdD12b2lkIDAsYi50YXJnZXR8fChiLnRhcmdldD1lKSxjPW51bGw9PWM/W2JdOnIubWFrZUFycmF5KGMsW2JdKSxuPXIuZXZlbnQuc3BlY2lhbFtwXXx8e30sZnx8IW4udHJpZ2dlcnx8bi50cmlnZ2VyLmFwcGx5KGUsYykhPT0hMSkpe2lmKCFmJiYhbi5ub0J1YmJsZSYmIXIuaXNXaW5kb3coZSkpe2ZvcihqPW4uZGVsZWdhdGVUeXBlfHxwLHNiLnRlc3QoaitwKXx8KGg9aC5wYXJlbnROb2RlKTtoO2g9aC5wYXJlbnROb2RlKW8ucHVzaChoKSxpPWg7aT09PShlLm93bmVyRG9jdW1lbnR8fGQpJiZvLnB1c2goaS5kZWZhdWx0Vmlld3x8aS5wYXJlbnRXaW5kb3d8fGEpfWc9MDt3aGlsZSgoaD1vW2crK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1nPjE/ajpuLmJpbmRUeXBlfHxwLG09KFcuZ2V0KGgsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdJiZXLmdldChoLFwiaGFuZGxlXCIpLG0mJm0uYXBwbHkoaCxjKSxtPWsmJmhba10sbSYmbS5hcHBseSYmVShoKSYmKGIucmVzdWx0PW0uYXBwbHkoaCxjKSxiLnJlc3VsdD09PSExJiZiLnByZXZlbnREZWZhdWx0KCkpO3JldHVybiBiLnR5cGU9cCxmfHxiLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxuLl9kZWZhdWx0JiZuLl9kZWZhdWx0LmFwcGx5KG8ucG9wKCksYykhPT0hMXx8IVUoZSl8fGsmJnIuaXNGdW5jdGlvbihlW3BdKSYmIXIuaXNXaW5kb3coZSkmJihpPWVba10saSYmKGVba109bnVsbCksci5ldmVudC50cmlnZ2VyZWQ9cCxlW3BdKCksci5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGkmJihlW2tdPWkpKSxiLnJlc3VsdH19LHNpbXVsYXRlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1yLmV4dGVuZChuZXcgci5FdmVudCxjLHt0eXBlOmEsaXNTaW11bGF0ZWQ6ITB9KTtyLmV2ZW50LnRyaWdnZXIoZCxudWxsLGIpfX0pLHIuZm4uZXh0ZW5kKHt0cmlnZ2VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQudHJpZ2dlcihhLGIsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzWzBdO2lmKGMpcmV0dXJuIHIuZXZlbnQudHJpZ2dlcihhLGIsYywhMCl9fSksci5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe3IuZm5bYl09ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24oYixudWxsLGEsYyk6dGhpcy50cmlnZ2VyKGIpfX0pLHIuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoYSkubW91c2VsZWF2ZShifHxhKX19KSxvLmZvY3VzaW49XCJvbmZvY3VzaW5cImluIGEsby5mb2N1c2lufHxyLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe3IuZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxyLmV2ZW50LmZpeChhKSl9O3IuZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1XLmFjY2VzcyhkLGIpO2V8fGQuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApLFcuYWNjZXNzKGQsYiwoZXx8MCkrMSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9Vy5hY2Nlc3MoZCxiKS0xO2U/Vy5hY2Nlc3MoZCxiLGUpOihkLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxjLCEwKSxXLnJlbW92ZShkLGIpKX19fSk7dmFyIHRiPWEubG9jYXRpb24sdWI9ci5ub3coKSx2Yj0vXFw/LztyLnBhcnNlWE1MPWZ1bmN0aW9uKGIpe3ZhciBjO2lmKCFifHxcInN0cmluZ1wiIT10eXBlb2YgYilyZXR1cm4gbnVsbDt0cnl7Yz0obmV3IGEuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoYixcInRleHQveG1sXCIpfWNhdGNoKGQpe2M9dm9pZCAwfXJldHVybiBjJiYhYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aHx8ci5lcnJvcihcIkludmFsaWQgWE1MOiBcIitiKSxjfTt2YXIgd2I9L1xcW1xcXSQvLHhiPS9cXHI/XFxuL2cseWI9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLHpiPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBBYihhLGIsYyxkKXt2YXIgZTtpZihBcnJheS5pc0FycmF5KGIpKXIuZWFjaChiLGZ1bmN0aW9uKGIsZSl7Y3x8d2IudGVzdChhKT9kKGEsZSk6QWIoYStcIltcIisoXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPWU/YjpcIlwiKStcIl1cIixlLGMsZCl9KTtlbHNlIGlmKGN8fFwib2JqZWN0XCIhPT1yLnR5cGUoYikpZChhLGIpO2Vsc2UgZm9yKGUgaW4gYilBYihhK1wiW1wiK2UrXCJdXCIsYltlXSxjLGQpfXIucGFyYW09ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1yLmlzRnVuY3Rpb24oYik/YigpOmI7ZFtkLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGEpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChudWxsPT1jP1wiXCI6Yyl9O2lmKEFycmF5LmlzQXJyYXkoYSl8fGEuanF1ZXJ5JiYhci5pc1BsYWluT2JqZWN0KGEpKXIuZWFjaChhLGZ1bmN0aW9uKCl7ZSh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihjIGluIGEpQWIoYyxhW2NdLGIsZSk7cmV0dXJuIGQuam9pbihcIiZcIil9LHIuZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gci5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpfSxzZXJpYWxpemVBcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPXIucHJvcCh0aGlzLFwiZWxlbWVudHNcIik7cmV0dXJuIGE/ci5tYWtlQXJyYXkoYSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBhPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhcih0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSYmemIudGVzdCh0aGlzLm5vZGVOYW1lKSYmIXliLnRlc3QoYSkmJih0aGlzLmNoZWNrZWR8fCFqYS50ZXN0KGEpKX0pLm1hcChmdW5jdGlvbihhLGIpe3ZhciBjPXIodGhpcykudmFsKCk7cmV0dXJuIG51bGw9PWM/bnVsbDpBcnJheS5pc0FycmF5KGMpP3IubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZSh4YixcIlxcclxcblwiKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKHhiLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pO3ZhciBCYj0vJTIwL2csQ2I9LyMuKiQvLERiPS8oWz8mXSlfPVteJl0qLyxFYj0vXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLEZiPS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLEdiPS9eKD86R0VUfEhFQUQpJC8sSGI9L15cXC9cXC8vLEliPXt9LEpiPXt9LEtiPVwiKi9cIi5jb25jYXQoXCIqXCIpLExiPWQuY3JlYXRlRWxlbWVudChcImFcIik7TGIuaHJlZj10Yi5ocmVmO2Z1bmN0aW9uIE1iKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1iLGI9XCIqXCIpO3ZhciBkLGU9MCxmPWIudG9Mb3dlckNhc2UoKS5tYXRjaChMKXx8W107aWYoci5pc0Z1bmN0aW9uKGMpKXdoaWxlKGQ9ZltlKytdKVwiK1wiPT09ZFswXT8oZD1kLnNsaWNlKDEpfHxcIipcIiwoYVtkXT1hW2RdfHxbXSkudW5zaGlmdChjKSk6KGFbZF09YVtkXXx8W10pLnB1c2goYyl9fWZ1bmN0aW9uIE5iKGEsYixjLGQpe3ZhciBlPXt9LGY9YT09PUpiO2Z1bmN0aW9uIGcoaCl7dmFyIGk7cmV0dXJuIGVbaF09ITAsci5lYWNoKGFbaF18fFtdLGZ1bmN0aW9uKGEsaCl7dmFyIGo9aChiLGMsZCk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlW1wiKlwiXSYmZyhcIipcIil9ZnVuY3Rpb24gT2IoYSxiKXt2YXIgYyxkLGU9ci5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihjIGluIGIpdm9pZCAwIT09YltjXSYmKChlW2NdP2E6ZHx8KGQ9e30pKVtjXT1iW2NdKTtyZXR1cm4gZCYmci5leHRlbmQoITAsYSxkKSxhfWZ1bmN0aW9uIFBiKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY29udGVudHMsaT1hLmRhdGFUeXBlczt3aGlsZShcIipcIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWQmJihkPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKGQpZm9yKGUgaW4gaClpZihoW2VdJiZoW2VdLnRlc3QoZCkpe2kudW5zaGlmdChlKTticmVha31pZihpWzBdaW4gYylmPWlbMF07ZWxzZXtmb3IoZSBpbiBjKXtpZighaVswXXx8YS5jb252ZXJ0ZXJzW2UrXCIgXCIraVswXV0pe2Y9ZTticmVha31nfHwoZz1lKX1mPWZ8fGd9aWYoZilyZXR1cm4gZiE9PWlbMF0mJmkudW5zaGlmdChmKSxjW2ZdfWZ1bmN0aW9uIFFiKGEsYixjLGQpe3ZhciBlLGYsZyxoLGksaj17fSxrPWEuZGF0YVR5cGVzLnNsaWNlKCk7aWYoa1sxXSlmb3IoZyBpbiBhLmNvbnZlcnRlcnMpaltnLnRvTG93ZXJDYXNlKCldPWEuY29udmVydGVyc1tnXTtmPWsuc2hpZnQoKTt3aGlsZShmKWlmKGEucmVzcG9uc2VGaWVsZHNbZl0mJihjW2EucmVzcG9uc2VGaWVsZHNbZl1dPWIpLCFpJiZkJiZhLmRhdGFGaWx0ZXImJihiPWEuZGF0YUZpbHRlcihiLGEuZGF0YVR5cGUpKSxpPWYsZj1rLnNoaWZ0KCkpaWYoXCIqXCI9PT1mKWY9aTtlbHNlIGlmKFwiKlwiIT09aSYmaSE9PWYpe2lmKGc9altpK1wiIFwiK2ZdfHxqW1wiKiBcIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdChcIiBcIiksaFsxXT09PWYmJihnPWpbaStcIiBcIitoWzBdXXx8altcIiogXCIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhW1widGhyb3dzXCJdKWI9ZyhiKTtlbHNlIHRyeXtiPWcoYil9Y2F0Y2gobCl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjpnP2w6XCJObyBjb252ZXJzaW9uIGZyb20gXCIraStcIiB0byBcIitmfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6Yn19ci5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOnRiLmhyZWYsdHlwZTpcIkdFVFwiLGlzTG9jYWw6RmIudGVzdCh0Yi5wcm90b2NvbCksZ2xvYmFsOiEwLHByb2Nlc3NEYXRhOiEwLGFzeW5jOiEwLGNvbnRlbnRUeXBlOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsYWNjZXB0czp7XCIqXCI6S2IsdGV4dDpcInRleHQvcGxhaW5cIixodG1sOlwidGV4dC9odG1sXCIseG1sOlwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLGpzb246XCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIn0sY29udGVudHM6e3htbDovXFxieG1sXFxiLyxodG1sOi9cXGJodG1sLyxqc29uOi9cXGJqc29uXFxiL30scmVzcG9uc2VGaWVsZHM6e3htbDpcInJlc3BvbnNlWE1MXCIsdGV4dDpcInJlc3BvbnNlVGV4dFwiLGpzb246XCJyZXNwb25zZUpTT05cIn0sY29udmVydGVyczp7XCIqIHRleHRcIjpTdHJpbmcsXCJ0ZXh0IGh0bWxcIjohMCxcInRleHQganNvblwiOkpTT04ucGFyc2UsXCJ0ZXh0IHhtbFwiOnIucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP09iKE9iKGEsci5hamF4U2V0dGluZ3MpLGIpOk9iKHIuYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOk1iKEliKSxhamF4VHJhbnNwb3J0Ok1iKEpiKSxhamF4OmZ1bmN0aW9uKGIsYyl7XCJvYmplY3RcIj09dHlwZW9mIGImJihjPWIsYj12b2lkIDApLGM9Y3x8e307dmFyIGUsZixnLGgsaSxqLGssbCxtLG4sbz1yLmFqYXhTZXR1cCh7fSxjKSxwPW8uY29udGV4dHx8byxxPW8uY29udGV4dCYmKHAubm9kZVR5cGV8fHAuanF1ZXJ5KT9yKHApOnIuZXZlbnQscz1yLkRlZmVycmVkKCksdD1yLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHU9by5zdGF0dXNDb2RlfHx7fSx2PXt9LHc9e30seD1cImNhbmNlbGVkXCIseT17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGspe2lmKCFoKXtoPXt9O3doaWxlKGI9RWIuZXhlYyhnKSloW2JbMV0udG9Mb3dlckNhc2UoKV09YlsyXX1iPWhbYS50b0xvd2VyQ2FzZSgpXX1yZXR1cm4gbnVsbD09Yj9udWxsOmJ9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiBrP2c6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1rJiYoYT13W2EudG9Mb3dlckNhc2UoKV09d1thLnRvTG93ZXJDYXNlKCldfHxhLHZbYV09YiksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09ayYmKG8ubWltZVR5cGU9YSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihhKXt2YXIgYjtpZihhKWlmKGspeS5hbHdheXMoYVt5LnN0YXR1c10pO2Vsc2UgZm9yKGIgaW4gYSl1W2JdPVt1W2JdLGFbYl1dO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihhKXt2YXIgYj1hfHx4O3JldHVybiBlJiZlLmFib3J0KGIpLEEoMCxiKSx0aGlzfX07aWYocy5wcm9taXNlKHkpLG8udXJsPSgoYnx8by51cmx8fHRiLmhyZWYpK1wiXCIpLnJlcGxhY2UoSGIsdGIucHJvdG9jb2wrXCIvL1wiKSxvLnR5cGU9Yy5tZXRob2R8fGMudHlwZXx8by5tZXRob2R8fG8udHlwZSxvLmRhdGFUeXBlcz0oby5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goTCl8fFtcIlwiXSxudWxsPT1vLmNyb3NzRG9tYWluKXtqPWQuY3JlYXRlRWxlbWVudChcImFcIik7dHJ5e2ouaHJlZj1vLnVybCxqLmhyZWY9ai5ocmVmLG8uY3Jvc3NEb21haW49TGIucHJvdG9jb2wrXCIvL1wiK0xiLmhvc3QhPWoucHJvdG9jb2wrXCIvL1wiK2ouaG9zdH1jYXRjaCh6KXtvLmNyb3NzRG9tYWluPSEwfX1pZihvLmRhdGEmJm8ucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiBvLmRhdGEmJihvLmRhdGE9ci5wYXJhbShvLmRhdGEsby50cmFkaXRpb25hbCkpLE5iKEliLG8sYyx5KSxrKXJldHVybiB5O2w9ci5ldmVudCYmby5nbG9iYWwsbCYmMD09PXIuYWN0aXZlKysmJnIuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxvLnR5cGU9by50eXBlLnRvVXBwZXJDYXNlKCksby5oYXNDb250ZW50PSFHYi50ZXN0KG8udHlwZSksZj1vLnVybC5yZXBsYWNlKENiLFwiXCIpLG8uaGFzQ29udGVudD9vLmRhdGEmJm8ucHJvY2Vzc0RhdGEmJjA9PT0oby5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKG8uZGF0YT1vLmRhdGEucmVwbGFjZShCYixcIitcIikpOihuPW8udXJsLnNsaWNlKGYubGVuZ3RoKSxvLmRhdGEmJihmKz0odmIudGVzdChmKT9cIiZcIjpcIj9cIikrby5kYXRhLGRlbGV0ZSBvLmRhdGEpLG8uY2FjaGU9PT0hMSYmKGY9Zi5yZXBsYWNlKERiLFwiJDFcIiksbj0odmIudGVzdChmKT9cIiZcIjpcIj9cIikrXCJfPVwiK3ViKysgK24pLG8udXJsPWYrbiksby5pZk1vZGlmaWVkJiYoci5sYXN0TW9kaWZpZWRbZl0mJnkuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsci5sYXN0TW9kaWZpZWRbZl0pLHIuZXRhZ1tmXSYmeS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLHIuZXRhZ1tmXSkpLChvLmRhdGEmJm8uaGFzQ29udGVudCYmby5jb250ZW50VHlwZSE9PSExfHxjLmNvbnRlbnRUeXBlKSYmeS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsby5jb250ZW50VHlwZSkseS5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsby5kYXRhVHlwZXNbMF0mJm8uYWNjZXB0c1tvLmRhdGFUeXBlc1swXV0/by5hY2NlcHRzW28uZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1vLmRhdGFUeXBlc1swXT9cIiwgXCIrS2IrXCI7IHE9MC4wMVwiOlwiXCIpOm8uYWNjZXB0c1tcIipcIl0pO2ZvcihtIGluIG8uaGVhZGVycyl5LnNldFJlcXVlc3RIZWFkZXIobSxvLmhlYWRlcnNbbV0pO2lmKG8uYmVmb3JlU2VuZCYmKG8uYmVmb3JlU2VuZC5jYWxsKHAseSxvKT09PSExfHxrKSlyZXR1cm4geS5hYm9ydCgpO2lmKHg9XCJhYm9ydFwiLHQuYWRkKG8uY29tcGxldGUpLHkuZG9uZShvLnN1Y2Nlc3MpLHkuZmFpbChvLmVycm9yKSxlPU5iKEpiLG8sYyx5KSl7aWYoeS5yZWFkeVN0YXRlPTEsbCYmcS50cmlnZ2VyKFwiYWpheFNlbmRcIixbeSxvXSksaylyZXR1cm4geTtvLmFzeW5jJiZvLnRpbWVvdXQ+MCYmKGk9YS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7eS5hYm9ydChcInRpbWVvdXRcIil9LG8udGltZW91dCkpO3RyeXtrPSExLGUuc2VuZCh2LEEpfWNhdGNoKHope2lmKGspdGhyb3cgejtBKC0xLHopfX1lbHNlIEEoLTEsXCJObyBUcmFuc3BvcnRcIik7ZnVuY3Rpb24gQShiLGMsZCxoKXt2YXIgaixtLG4sdix3LHg9YztrfHwoaz0hMCxpJiZhLmNsZWFyVGltZW91dChpKSxlPXZvaWQgMCxnPWh8fFwiXCIseS5yZWFkeVN0YXRlPWI+MD80OjAsaj1iPj0yMDAmJmI8MzAwfHwzMDQ9PT1iLGQmJih2PVBiKG8seSxkKSksdj1RYihvLHYseSxqKSxqPyhvLmlmTW9kaWZpZWQmJih3PXkuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLHcmJihyLmxhc3RNb2RpZmllZFtmXT13KSx3PXkuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLHcmJihyLmV0YWdbZl09dykpLDIwND09PWJ8fFwiSEVBRFwiPT09by50eXBlP3g9XCJub2NvbnRlbnRcIjozMDQ9PT1iP3g9XCJub3Rtb2RpZmllZFwiOih4PXYuc3RhdGUsbT12LmRhdGEsbj12LmVycm9yLGo9IW4pKToobj14LCFiJiZ4fHwoeD1cImVycm9yXCIsYjwwJiYoYj0wKSkpLHkuc3RhdHVzPWIseS5zdGF0dXNUZXh0PShjfHx4KStcIlwiLGo/cy5yZXNvbHZlV2l0aChwLFttLHgseV0pOnMucmVqZWN0V2l0aChwLFt5LHgsbl0pLHkuc3RhdHVzQ29kZSh1KSx1PXZvaWQgMCxsJiZxLnRyaWdnZXIoaj9cImFqYXhTdWNjZXNzXCI6XCJhamF4RXJyb3JcIixbeSxvLGo/bTpuXSksdC5maXJlV2l0aChwLFt5LHhdKSxsJiYocS50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsW3ksb10pLC0tci5hY3RpdmV8fHIuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSl9cmV0dXJuIHl9LGdldEpTT046ZnVuY3Rpb24oYSxiLGMpe3JldHVybiByLmdldChhLGIsYyxcImpzb25cIil9LGdldFNjcmlwdDpmdW5jdGlvbihhLGIpe3JldHVybiByLmdldChhLHZvaWQgMCxiLFwic2NyaXB0XCIpfX0pLHIuZWFjaChbXCJnZXRcIixcInBvc3RcIl0sZnVuY3Rpb24oYSxiKXtyW2JdPWZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiByLmlzRnVuY3Rpb24oYykmJihlPWV8fGQsZD1jLGM9dm9pZCAwKSxyLmFqYXgoci5leHRlbmQoe3VybDphLHR5cGU6YixkYXRhVHlwZTplLGRhdGE6YyxzdWNjZXNzOmR9LHIuaXNQbGFpbk9iamVjdChhKSYmYSkpfX0pLHIuX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIHIuYWpheCh7dXJsOmEsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sci5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIHRoaXNbMF0mJihyLmlzRnVuY3Rpb24oYSkmJihhPWEuY2FsbCh0aGlzWzBdKSksYj1yKGEsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZiLmluc2VydEJlZm9yZSh0aGlzWzBdKSxiLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXM7d2hpbGUoYS5maXJzdEVsZW1lbnRDaGlsZClhPWEuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcykpLHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1yKHRoaXMpLGM9Yi5jb250ZW50cygpO2MubGVuZ3RoP2Mud3JhcEFsbChhKTpiLmFwcGVuZChhKX0pfSx3cmFwOmZ1bmN0aW9uKGEpe3ZhciBiPXIuaXNGdW5jdGlvbihhKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3IodGhpcykud3JhcEFsbChiP2EuY2FsbCh0aGlzLGMpOmEpfSl9LHVud3JhcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wYXJlbnQoYSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7cih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxyLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oYSl7cmV0dXJuIXIuZXhwci5wc2V1ZG9zLnZpc2libGUoYSl9LHIuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oYSl7cmV0dXJuISEoYS5vZmZzZXRXaWR0aHx8YS5vZmZzZXRIZWlnaHR8fGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxyLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGIpe319O3ZhciBSYj17MDoyMDAsMTIyMzoyMDR9LFNiPXIuYWpheFNldHRpbmdzLnhocigpO28uY29ycz0hIVNiJiZcIndpdGhDcmVkZW50aWFsc1wiaW4gU2Isby5hamF4PVNiPSEhU2Isci5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGIpe3ZhciBjLGQ7aWYoby5jb3JzfHxTYiYmIWIuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSxmKXt2YXIgZyxoPWIueGhyKCk7aWYoaC5vcGVuKGIudHlwZSxiLnVybCxiLmFzeW5jLGIudXNlcm5hbWUsYi5wYXNzd29yZCksYi54aHJGaWVsZHMpZm9yKGcgaW4gYi54aHJGaWVsZHMpaFtnXT1iLnhockZpZWxkc1tnXTtiLm1pbWVUeXBlJiZoLm92ZXJyaWRlTWltZVR5cGUmJmgub3ZlcnJpZGVNaW1lVHlwZShiLm1pbWVUeXBlKSxiLmNyb3NzRG9tYWlufHxlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIik7Zm9yKGcgaW4gZSloLnNldFJlcXVlc3RIZWFkZXIoZyxlW2ddKTtjPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe2MmJihjPWQ9aC5vbmxvYWQ9aC5vbmVycm9yPWgub25hYm9ydD1oLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWE/aC5hYm9ydCgpOlwiZXJyb3JcIj09PWE/XCJudW1iZXJcIiE9dHlwZW9mIGguc3RhdHVzP2YoMCxcImVycm9yXCIpOmYoaC5zdGF0dXMsaC5zdGF0dXNUZXh0KTpmKFJiW2guc3RhdHVzXXx8aC5zdGF0dXMsaC5zdGF0dXNUZXh0LFwidGV4dFwiIT09KGgucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBoLnJlc3BvbnNlVGV4dD97YmluYXJ5OmgucmVzcG9uc2V9Ont0ZXh0OmgucmVzcG9uc2VUZXh0fSxoLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxoLm9ubG9hZD1jKCksZD1oLm9uZXJyb3I9YyhcImVycm9yXCIpLHZvaWQgMCE9PWgub25hYm9ydD9oLm9uYWJvcnQ9ZDpoLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1oLnJlYWR5U3RhdGUmJmEuc2V0VGltZW91dChmdW5jdGlvbigpe2MmJmQoKX0pfSxjPWMoXCJhYm9ydFwiKTt0cnl7aC5zZW5kKGIuaGFzQ29udGVudCYmYi5kYXRhfHxudWxsKX1jYXRjaChpKXtpZihjKXRocm93IGl9fSxhYm9ydDpmdW5jdGlvbigpe2MmJmMoKX19fSksci5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGEpe2EuY3Jvc3NEb21haW4mJihhLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxyLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihhKXtyZXR1cm4gci5nbG9iYWxFdmFsKGEpLGF9fX0pLHIuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEuY2FjaGUmJihhLmNhY2hlPSExKSxhLmNyb3NzRG9tYWluJiYoYS50eXBlPVwiR0VUXCIpfSksci5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7aWYoYS5jcm9zc0RvbWFpbil7dmFyIGIsYztyZXR1cm57c2VuZDpmdW5jdGlvbihlLGYpe2I9cihcIjxzY3JpcHQ+XCIpLnByb3Aoe2NoYXJzZXQ6YS5zY3JpcHRDaGFyc2V0LHNyYzphLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLGM9ZnVuY3Rpb24oYSl7Yi5yZW1vdmUoKSxjPW51bGwsYSYmZihcImVycm9yXCI9PT1hLnR5cGU/NDA0OjIwMCxhLnR5cGUpfSksZC5oZWFkLmFwcGVuZENoaWxkKGJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2MmJmMoKX19fX0pO3ZhciBUYj1bXSxVYj0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO3IuYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBhPVRiLnBvcCgpfHxyLmV4cGFuZG8rXCJfXCIrdWIrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLHIuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihiLGMsZCl7dmFyIGUsZixnLGg9Yi5qc29ucCE9PSExJiYoVWIudGVzdChiLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgYi5kYXRhJiYwPT09KGIuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlViLnRlc3QoYi5kYXRhKSYmXCJkYXRhXCIpO2lmKGh8fFwianNvbnBcIj09PWIuZGF0YVR5cGVzWzBdKXJldHVybiBlPWIuanNvbnBDYWxsYmFjaz1yLmlzRnVuY3Rpb24oYi5qc29ucENhbGxiYWNrKT9iLmpzb25wQ2FsbGJhY2soKTpiLmpzb25wQ2FsbGJhY2ssaD9iW2hdPWJbaF0ucmVwbGFjZShVYixcIiQxXCIrZSk6Yi5qc29ucCE9PSExJiYoYi51cmwrPSh2Yi50ZXN0KGIudXJsKT9cIiZcIjpcIj9cIikrYi5qc29ucCtcIj1cIitlKSxiLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXT1mdW5jdGlvbigpe3JldHVybiBnfHxyLmVycm9yKGUrXCIgd2FzIG5vdCBjYWxsZWRcIiksZ1swXX0sYi5kYXRhVHlwZXNbMF09XCJqc29uXCIsZj1hW2VdLGFbZV09ZnVuY3Rpb24oKXtnPWFyZ3VtZW50c30sZC5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1mP3IoYSkucmVtb3ZlUHJvcChlKTphW2VdPWYsYltlXSYmKGIuanNvbnBDYWxsYmFjaz1jLmpzb25wQ2FsbGJhY2ssVGIucHVzaChlKSksZyYmci5pc0Z1bmN0aW9uKGYpJiZmKGdbMF0pLGc9Zj12b2lkIDB9KSxcInNjcmlwdFwifSksby5jcmVhdGVIVE1MRG9jdW1lbnQ9ZnVuY3Rpb24oKXt2YXIgYT1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O3JldHVybiBhLmlubmVySFRNTD1cIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCIsMj09PWEuY2hpbGROb2Rlcy5sZW5ndGh9KCksci5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybltdO1wiYm9vbGVhblwiPT10eXBlb2YgYiYmKGM9YixiPSExKTt2YXIgZSxmLGc7cmV0dXJuIGJ8fChvLmNyZWF0ZUhUTUxEb2N1bWVudD8oYj1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSxlPWIuY3JlYXRlRWxlbWVudChcImJhc2VcIiksZS5ocmVmPWQubG9jYXRpb24uaHJlZixiLmhlYWQuYXBwZW5kQ2hpbGQoZSkpOmI9ZCksZj1DLmV4ZWMoYSksZz0hYyYmW10sZj9bYi5jcmVhdGVFbGVtZW50KGZbMV0pXTooZj1xYShbYV0sYixnKSxnJiZnLmxlbmd0aCYmcihnKS5yZW1vdmUoKSxyLm1lcmdlKFtdLGYuY2hpbGROb2RlcykpfSxyLmZuLmxvYWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnPXRoaXMsaD1hLmluZGV4T2YoXCIgXCIpO3JldHVybiBoPi0xJiYoZD1wYihhLnNsaWNlKGgpKSxhPWEuc2xpY2UoMCxoKSksci5pc0Z1bmN0aW9uKGIpPyhjPWIsYj12b2lkIDApOmImJlwib2JqZWN0XCI9PXR5cGVvZiBiJiYoZT1cIlBPU1RcIiksZy5sZW5ndGg+MCYmci5hamF4KHt1cmw6YSx0eXBlOmV8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTpifSkuZG9uZShmdW5jdGlvbihhKXtmPWFyZ3VtZW50cyxnLmh0bWwoZD9yKFwiPGRpdj5cIikuYXBwZW5kKHIucGFyc2VIVE1MKGEpKS5maW5kKGQpOmEpfSkuYWx3YXlzKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGZ1bmN0aW9uKCl7Yy5hcHBseSh0aGlzLGZ8fFthLnJlc3BvbnNlVGV4dCxiLGFdKX0pfSksdGhpc30sci5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oYSxiKXtyLmZuW2JdPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm9uKGIsYSl9fSksci5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHIuZ3JlcChyLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH0sci5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosaz1yLmNzcyhhLFwicG9zaXRpb25cIiksbD1yKGEpLG09e307XCJzdGF0aWNcIj09PWsmJihhLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIiksaD1sLm9mZnNldCgpLGY9ci5jc3MoYSxcInRvcFwiKSxpPXIuY3NzKGEsXCJsZWZ0XCIpLGo9KFwiYWJzb2x1dGVcIj09PWt8fFwiZml4ZWRcIj09PWspJiYoZitpKS5pbmRleE9mKFwiYXV0b1wiKT4tMSxqPyhkPWwucG9zaXRpb24oKSxnPWQudG9wLGU9ZC5sZWZ0KTooZz1wYXJzZUZsb2F0KGYpfHwwLGU9cGFyc2VGbG9hdChpKXx8MCksci5pc0Z1bmN0aW9uKGIpJiYoYj1iLmNhbGwoYSxjLHIuZXh0ZW5kKHt9LGgpKSksbnVsbCE9Yi50b3AmJihtLnRvcD1iLnRvcC1oLnRvcCtnKSxudWxsIT1iLmxlZnQmJihtLmxlZnQ9Yi5sZWZ0LWgubGVmdCtlKSxcInVzaW5nXCJpbiBiP2IudXNpbmcuY2FsbChhLG0pOmwuY3NzKG0pfX0sci5mbi5leHRlbmQoe29mZnNldDpmdW5jdGlvbihhKXtpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiB2b2lkIDA9PT1hP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3Iub2Zmc2V0LnNldE9mZnNldCh0aGlzLGEsYil9KTt2YXIgYixjLGQsZSxmPXRoaXNbMF07aWYoZilyZXR1cm4gZi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8oZD1mLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGI9Zi5vd25lckRvY3VtZW50LGM9Yi5kb2N1bWVudEVsZW1lbnQsZT1iLmRlZmF1bHRWaWV3LHt0b3A6ZC50b3ArZS5wYWdlWU9mZnNldC1jLmNsaWVudFRvcCxsZWZ0OmQubGVmdCtlLnBhZ2VYT2Zmc2V0LWMuY2xpZW50TGVmdH0pOnt0b3A6MCxsZWZ0OjB9fSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBhLGIsYz10aGlzWzBdLGQ9e3RvcDowLGxlZnQ6MH07cmV0dXJuXCJmaXhlZFwiPT09ci5jc3MoYyxcInBvc2l0aW9uXCIpP2I9Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooYT10aGlzLm9mZnNldFBhcmVudCgpLGI9dGhpcy5vZmZzZXQoKSxCKGFbMF0sXCJodG1sXCIpfHwoZD1hLm9mZnNldCgpKSxkPXt0b3A6ZC50b3Arci5jc3MoYVswXSxcImJvcmRlclRvcFdpZHRoXCIsITApLGxlZnQ6ZC5sZWZ0K3IuY3NzKGFbMF0sXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCl9KSx7dG9wOmIudG9wLWQudG9wLXIuY3NzKGMsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDpiLmxlZnQtZC5sZWZ0LXIuY3NzKGMsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGEmJlwic3RhdGljXCI9PT1yLmNzcyhhLFwicG9zaXRpb25cIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8cmF9KX19KSxyLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9XCJwYWdlWU9mZnNldFwiPT09YjtyLmZuW2FdPWZ1bmN0aW9uKGQpe3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYSxkLGUpe3ZhciBmO3JldHVybiByLmlzV2luZG93KGEpP2Y9YTo5PT09YS5ub2RlVHlwZSYmKGY9YS5kZWZhdWx0Vmlldyksdm9pZCAwPT09ZT9mP2ZbYl06YVtkXTp2b2lkKGY/Zi5zY3JvbGxUbyhjP2YucGFnZVhPZmZzZXQ6ZSxjP2U6Zi5wYWdlWU9mZnNldCk6YVtkXT1lKX0sYSxkLGFyZ3VtZW50cy5sZW5ndGgpfX0pLHIuZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oYSxiKXtyLmNzc0hvb2tzW2JdPVBhKG8ucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihhLGMpe2lmKGMpcmV0dXJuIGM9T2EoYSxiKSxNYS50ZXN0KGMpP3IoYSkucG9zaXRpb24oKVtiXStcInB4XCI6Y30pfSksci5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7ci5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIithLGNvbnRlbnQ6YixcIlwiOlwib3V0ZXJcIithfSxmdW5jdGlvbihjLGQpe3IuZm5bZF09ZnVuY3Rpb24oZSxmKXt2YXIgZz1hcmd1bWVudHMubGVuZ3RoJiYoY3x8XCJib29sZWFuXCIhPXR5cGVvZiBlKSxoPWN8fChlPT09ITB8fGY9PT0hMD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYixjLGUpe3ZhciBmO3JldHVybiByLmlzV2luZG93KGIpPzA9PT1kLmluZGV4T2YoXCJvdXRlclwiKT9iW1wiaW5uZXJcIithXTpiLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1iLm5vZGVUeXBlPyhmPWIuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiK2FdLGZbXCJzY3JvbGxcIithXSxiLmJvZHlbXCJvZmZzZXRcIithXSxmW1wib2Zmc2V0XCIrYV0sZltcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09ZT9yLmNzcyhiLGMsaCk6ci5zdHlsZShiLGMsZSxoKX0sYixnP2U6dm9pZCAwLGcpfX0pfSksci5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLm9uKGEsbnVsbCxiLGMpfSx1bmJpbmQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5vZmYoYSxudWxsLGIpfSxkZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5vbihiLGEsYyxkKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGEsXCIqKlwiKTp0aGlzLm9mZihiLGF8fFwiKipcIixjKX19KSxyLmhvbGRSZWFkeT1mdW5jdGlvbihhKXthP3IucmVhZHlXYWl0Kys6ci5yZWFkeSghMCl9LHIuaXNBcnJheT1BcnJheS5pc0FycmF5LHIucGFyc2VKU09OPUpTT04ucGFyc2Usci5ub2RlTmFtZT1CLFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gcn0pO3ZhciBWYj1hLmpRdWVyeSxXYj1hLiQ7cmV0dXJuIHIubm9Db25mbGljdD1mdW5jdGlvbihiKXtyZXR1cm4gYS4kPT09ciYmKGEuJD1XYiksYiYmYS5qUXVlcnk9PT1yJiYoYS5qUXVlcnk9VmIpLHJ9LGJ8fChhLmpRdWVyeT1hLiQ9cikscn0pO1xuIl0sIm5hbWVzIjpbImEiLCJiIiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwiRXJyb3IiLCJ3aW5kb3ciLCJjIiwiZCIsImUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImYiLCJzbGljZSIsImciLCJjb25jYXQiLCJoIiwicHVzaCIsImkiLCJpbmRleE9mIiwiaiIsImsiLCJ0b1N0cmluZyIsImwiLCJoYXNPd25Qcm9wZXJ0eSIsIm0iLCJuIiwiY2FsbCIsIm8iLCJwIiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJxIiwiciIsImZuIiwiaW5pdCIsInMiLCJ0IiwidSIsInYiLCJ0b1VwcGVyQ2FzZSIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwidG9BcnJheSIsImdldCIsInB1c2hTdGFjayIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJtYXAiLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibm9vcCIsInR5cGUiLCJpc1dpbmRvdyIsImlzTnVtZXJpYyIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY2FtZWxDYXNlIiwidyIsInRyaW0iLCJtYWtlQXJyYXkiLCJpbkFycmF5IiwiZ3JlcCIsImd1aWQiLCJwcm94eSIsIm5vdyIsIkRhdGUiLCJzdXBwb3J0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwieCIsInkiLCJoYSIsInoiLCJBIiwiQiIsIkMiLCJEIiwiRSIsInBvcCIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIkwiLCJNIiwiTiIsIk8iLCJSZWdFeHAiLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJXIiwiWCIsIlkiLCJaIiwiJCIsIl8iLCJhYSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImJhIiwiY2EiLCJjaGFyQ29kZUF0IiwiZGEiLCJlYSIsInRhIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZmEiLCJnYSIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNhIiwiam9pbiIsInFhIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJpYSIsImphIiwia2EiLCJhdHRySGFuZGxlIiwibGEiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwibWEiLCJuYSIsIm9hIiwiaXNEaXNhYmxlZCIsInBhIiwiaXNYTUwiLCJkb2N1bWVudEVsZW1lbnQiLCJzZXREb2N1bWVudCIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiYXR0cmlidXRlcyIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInZhbHVlIiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjb250YWlucyIsInNvcnREZXRhY2hlZCIsInVuc2hpZnQiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwidW5pcXVlU29ydCIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiZ2V0VGV4dCIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIm1hdGNoIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsInRhcmdldCIsImxvY2F0aW9uIiwiaGFzaCIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJwYXJlbnQiLCJoZWFkZXIiLCJpbnB1dCIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJyYSIsImZpbHRlcnMiLCJ0b2tlbml6ZSIsInVhIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsImNvbXBpbGUiLCJzZWxlY3RvciIsInNlbGVjdCIsImRlZmF1bHRWYWx1ZSIsImV4cHIiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwiaXMiLCJwYXJzZUhUTUwiLCJyZWFkeSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJtZW1vcnkiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZSIsImZpcmVkIiwicHJvbWlzZSIsImRvbmUiLCJmYWlsIiwidGhlbiIsIkRlZmVycmVkIiwic3RhdGUiLCJhbHdheXMiLCJwaXBlIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJyZXNvbHZlIiwicmVqZWN0IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsIndoZW4iLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJtZXNzYWdlIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5V2FpdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJ1aWQiLCJjYWNoZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiYWNjZXNzIiwiaGFzRGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsInF1ZXVlIiwiZGVxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsImNsZWFyUXVldWUiLCJzb3VyY2UiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJjdXIiLCJjc3NOdW1iZXIiLCJ1bml0Iiwic3RhcnQiLCJib2R5Iiwic2hvdyIsImhpZGUiLCJ0b2dnbGUiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9mZiIsImV2ZW50IiwiZ2xvYmFsIiwiaGFuZGxlciIsImV2ZW50cyIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwic3BlY2lhbCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwib3JpZ1R5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImhhbmRsZXJzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiZWxlbSIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsImhhbmRsZU9iaiIsInJlc3VsdCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwiYWRkUHJvcCIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Iiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9uIiwib25lIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJodG1sIiwiY2xvbmUiLCJzcmMiLCJfZXZhbFVybCIsIkthIiwiY2xlYW5EYXRhIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIkxhIiwiTWEiLCJOYSIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjc3NUZXh0IiwibWFyZ2luTGVmdCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJPYSIsImdldFByb3BlcnR5VmFsdWUiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJUYSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiVWEiLCJWYSIsIldhIiwiWGEiLCJjc3NQcm9wcyIsIllhIiwibWF4IiwiWmEiLCIkYSIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJleHBhbmQiLCJfYSIsIlR3ZWVuIiwicHJvcCIsImVhc2luZyIsIm9wdGlvbnMiLCJwcm9wSG9va3MiLCJydW4iLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImZiIiwiZ2IiLCJoZWlnaHQiLCJoYiIsImtiIiwidHdlZW5lcnMiLCJpYiIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJqYiIsInByZWZpbHRlcnMiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsIm9sZCIsImZhZGVUbyIsImFuaW1hdGUiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwibGIiLCJtYiIsInJlbW92ZUF0dHIiLCJhdHRySG9va3MiLCJuYiIsIm9iIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJwYXJzZUludCIsInBiIiwicWIiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJoYXNDbGFzcyIsInJiIiwidmFsIiwidmFsSG9va3MiLCJzYiIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZvY3VzaW4iLCJ0YiIsInViIiwidmIiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIndiIiwieGIiLCJ5YiIsInpiIiwiQWIiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJkYXRhVHlwZXMiLCJPYiIsImFqYXhTZXR0aW5ncyIsImZsYXRPcHRpb25zIiwiUGIiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsIlFiIiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwiZGF0YVR5cGUiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsImpzb24iLCJjb250ZXh0IiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzQ29kZSIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJtZXRob2QiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwidGltZW91dCIsInNlbmQiLCJzdGF0dXNUZXh0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsIndyYXAiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIlJiIiwiU2IiLCJjb3JzIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJyZXNwb25zZSIsInNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiVGIiLCJVYiIsImpzb25wIiwianNvbnBDYWxsYmFjayIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJwYXJzZUpTT04iLCJkZWZpbmUiLCJhbWQiLCJWYiIsImpRdWVyeSIsIldiIiwibm9Db25mbGljdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/core/jquery.min.js\n");

/***/ }),

/***/ "./resources/js/core/popper.min.js":
/*!*****************************************!*\
  !*** ./resources/js/core/popper.min.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n Copyright (C) Federico Zivolo 2017\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n(function (e, t) {\n  'object' == ( false ? 0 : _typeof(exports)) && 'undefined' != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = window.getComputedStyle(e, null);\n    return t ? o[t] : o;\n  }\n\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function n(e) {\n    if (!e || -1 !== ['HTML', 'BODY', '#document'].indexOf(e.nodeName)) return window.document.body;\n    var i = t(e),\n        r = i.overflow,\n        p = i.overflowX,\n        s = i.overflowY;\n    return /(auto|scroll)/.test(r + s + p) ? e : n(o(e));\n  }\n\n  function r(e) {\n    var o = e && e.offsetParent,\n        i = o && o.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(o.nodeName) && 'static' === t(o, 'position') ? r(o) : o : window.document.documentElement;\n  }\n\n  function p(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || r(e.firstElementChild) === e);\n  }\n\n  function s(e) {\n    return null === e.parentNode ? e : s(e.parentNode);\n  }\n\n  function d(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return window.document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = o ? e : t,\n        n = o ? t : e,\n        a = document.createRange();\n    a.setStart(i, 0), a.setEnd(n, 0);\n    var f = a.commonAncestorContainer;\n    if (e !== f && t !== f || i.contains(n)) return p(f) ? f : r(f);\n    var l = s(e);\n    return l.host ? d(l.host, t) : d(e, s(t).host);\n  }\n\n  function a(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n        o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n        i = e.nodeName;\n\n    if ('BODY' === i || 'HTML' === i) {\n      var n = window.document.documentElement,\n          r = window.document.scrollingElement || n;\n      return r[o];\n    }\n\n    return e[o];\n  }\n\n  function f(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        i = a(t, 'top'),\n        n = a(t, 'left'),\n        r = o ? -1 : 1;\n    return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;\n  }\n\n  function l(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n        i = 'Left' == o ? 'Right' : 'Bottom';\n    return +e['border' + o + 'Width'].split('px')[0] + +e['border' + i + 'Width'].split('px')[0];\n  }\n\n  function m(e, t, o, i) {\n    return _(t['offset' + e], o['client' + e], o['offset' + e], ie() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);\n  }\n\n  function h() {\n    var e = window.document.body,\n        t = window.document.documentElement,\n        o = ie() && window.getComputedStyle(t);\n    return {\n      height: m('Height', e, t, o),\n      width: m('Width', e, t, o)\n    };\n  }\n\n  function c(e) {\n    return se({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function g(e) {\n    var o = {};\n    if (ie()) try {\n      o = e.getBoundingClientRect();\n      var i = a(e, 'top'),\n          n = a(e, 'left');\n      o.top += i, o.left += n, o.bottom += i, o.right += n;\n    } catch (e) {} else o = e.getBoundingClientRect();\n    var r = {\n      left: o.left,\n      top: o.top,\n      width: o.right - o.left,\n      height: o.bottom - o.top\n    },\n        p = 'HTML' === e.nodeName ? h() : {},\n        s = p.width || e.clientWidth || r.right - r.left,\n        d = p.height || e.clientHeight || r.bottom - r.top,\n        f = e.offsetWidth - s,\n        m = e.offsetHeight - d;\n\n    if (f || m) {\n      var g = t(e);\n      f -= l(g, 'x'), m -= l(g, 'y'), r.width -= f, r.height -= m;\n    }\n\n    return c(r);\n  }\n\n  function u(e, o) {\n    var i = ie(),\n        r = 'HTML' === o.nodeName,\n        p = g(e),\n        s = g(o),\n        d = n(e),\n        a = t(o),\n        l = +a.borderTopWidth.split('px')[0],\n        m = +a.borderLeftWidth.split('px')[0],\n        h = c({\n      top: p.top - s.top - l,\n      left: p.left - s.left - m,\n      width: p.width,\n      height: p.height\n    });\n\n    if (h.marginTop = 0, h.marginLeft = 0, !i && r) {\n      var u = +a.marginTop.split('px')[0],\n          b = +a.marginLeft.split('px')[0];\n      h.top -= l - u, h.bottom -= l - u, h.left -= m - b, h.right -= m - b, h.marginTop = u, h.marginLeft = b;\n    }\n\n    return (i ? o.contains(d) : o === d && 'BODY' !== d.nodeName) && (h = f(h, o)), h;\n  }\n\n  function b(e) {\n    var t = window.document.documentElement,\n        o = u(e, t),\n        i = _(t.clientWidth, window.innerWidth || 0),\n        n = _(t.clientHeight, window.innerHeight || 0),\n        r = a(t),\n        p = a(t, 'left'),\n        s = {\n      top: r - o.top + o.marginTop,\n      left: p - o.left + o.marginLeft,\n      width: i,\n      height: n\n    };\n\n    return c(s);\n  }\n\n  function y(e) {\n    var i = e.nodeName;\n    return 'BODY' === i || 'HTML' === i ? !1 : 'fixed' === t(e, 'position') || y(o(e));\n  }\n\n  function w(e, t, i, r) {\n    var p = {\n      top: 0,\n      left: 0\n    },\n        s = d(e, t);\n    if ('viewport' === r) p = b(s);else {\n      var a;\n      'scrollParent' === r ? (a = n(o(e)), 'BODY' === a.nodeName && (a = window.document.documentElement)) : 'window' === r ? a = window.document.documentElement : a = r;\n      var f = u(a, s);\n\n      if ('HTML' === a.nodeName && !y(s)) {\n        var l = h(),\n            m = l.height,\n            c = l.width;\n        p.top += f.top - f.marginTop, p.bottom = m + f.top, p.left += f.left - f.marginLeft, p.right = c + f.left;\n      } else p = f;\n    }\n    return p.left += i, p.top += i, p.right -= i, p.bottom -= i, p;\n  }\n\n  function v(e) {\n    var t = e.width,\n        o = e.height;\n    return t * o;\n  }\n\n  function E(e, t, o, i, n) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = w(o, i, r, n),\n        s = {\n      top: {\n        width: p.width,\n        height: t.top - p.top\n      },\n      right: {\n        width: p.right - t.right,\n        height: p.height\n      },\n      bottom: {\n        width: p.width,\n        height: p.bottom - t.bottom\n      },\n      left: {\n        width: t.left - p.left,\n        height: p.height\n      }\n    },\n        d = Object.keys(s).map(function (e) {\n      return se({\n        key: e\n      }, s[e], {\n        area: v(s[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        a = d.filter(function (e) {\n      var t = e.width,\n          i = e.height;\n      return t >= o.clientWidth && i >= o.clientHeight;\n    }),\n        f = 0 < a.length ? a[0].key : d[0].key,\n        l = e.split('-')[1];\n    return f + (l ? '-' + l : '');\n  }\n\n  function x(e, t, o) {\n    var i = d(t, o);\n    return u(o, i);\n  }\n\n  function O(e) {\n    var t = window.getComputedStyle(e),\n        o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),\n        i = parseFloat(t.marginLeft) + parseFloat(t.marginRight),\n        n = {\n      width: e.offsetWidth + i,\n      height: e.offsetHeight + o\n    };\n    return n;\n  }\n\n  function L(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function S(e, t, o) {\n    o = o.split('-')[0];\n    var i = O(e),\n        n = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== ['right', 'left'].indexOf(o),\n        p = r ? 'top' : 'left',\n        s = r ? 'left' : 'top',\n        d = r ? 'height' : 'width',\n        a = r ? 'width' : 'height';\n    return n[p] = t[p] + t[d] / 2 - i[d] / 2, n[s] = o === s ? t[s] - i[a] : t[L(s)], n;\n  }\n\n  function T(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function C(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var i = T(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(i);\n  }\n\n  function N(t, o, i) {\n    var n = void 0 === i ? t : t.slice(0, C(t, 'name', i));\n    return n.forEach(function (t) {\n      t[\"function\"] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var i = t[\"function\"] || t.fn;\n      t.enabled && e(i) && (o.offsets.popper = c(o.offsets.popper), o.offsets.reference = c(o.offsets.reference), o = i(o, t));\n    }), o;\n  }\n\n  function k() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = x(this.state, this.popper, this.reference), e.placement = E(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = S(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = 'absolute', e = N(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n\n  function W(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n          i = e.enabled;\n      return i && o === t;\n    });\n  }\n\n  function B(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length - 1; n++) {\n      var i = t[n],\n          r = i ? '' + i + o : e;\n      if ('undefined' != typeof window.document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function D() {\n    return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.left = '', this.popper.style.position = '', this.popper.style.top = '', this.popper.style[B('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function H(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n        p = r ? window : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || H(n(p.parentNode), t, o, i), i.push(p);\n  }\n\n  function P(e, t, o, i) {\n    o.updateBound = i, window.addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return H(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n\n  function A() {\n    this.state.eventsEnabled || (this.state = P(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function M(e, t) {\n    return window.removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n\n  function I() {\n    this.state.eventsEnabled && (window.cancelAnimationFrame(this.scheduleUpdate), this.state = M(this.reference, this.state));\n  }\n\n  function R(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function U(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && R(t[o]) && (i = 'px'), e.style[o] = t[o] + i;\n    });\n  }\n\n  function Y(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var i = t[o];\n      !1 === i ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n\n  function F(e, t, o) {\n    var i = T(e, function (e) {\n      var o = e.name;\n      return o === t;\n    }),\n        n = !!i && e.some(function (e) {\n      return e.name === o && e.enabled && e.order < i.order;\n    });\n\n    if (!n) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n\n    return n;\n  }\n\n  function j(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n\n  function K(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = ae.indexOf(e),\n        i = ae.slice(o + 1).concat(ae.slice(0, o));\n    return t ? i.reverse() : i;\n  }\n\n  function q(e, t, o, i) {\n    var n = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n        r = +n[1],\n        p = n[2];\n    if (!r) return e;\n\n    if (0 === p.indexOf('%')) {\n      var s;\n\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n\n        case '%':\n        case '%r':\n        default:\n          s = i;\n      }\n\n      var d = c(s);\n      return d[t] / 100 * r;\n    }\n\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? _(document.documentElement.clientHeight, window.innerHeight || 0) : _(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n\n    return r;\n  }\n\n  function G(e, t, o, i) {\n    var n = [0, 0],\n        r = -1 !== ['right', 'left'].indexOf(i),\n        p = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        s = p.indexOf(T(p, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, i) {\n      var n = (1 === i ? !r : r) ? 'height' : 'width',\n          p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return q(e, n, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, i) {\n        R(o) && (n[t] += o * ('-' === e[i - 1] ? -1 : 1));\n      });\n    }), n;\n  }\n\n  for (var z = Math.min, V = Math.floor, _ = Math.max, X = ['native code', '[object MutationObserverConstructor]'], Q = function Q(e) {\n    return X.some(function (t) {\n      return -1 < (e || '').toString().indexOf(t);\n    });\n  }, J = 'undefined' != typeof window, Z = ['Edge', 'Trident', 'Firefox'], $ = 0, ee = 0; ee < Z.length; ee += 1) {\n    if (J && 0 <= navigator.userAgent.indexOf(Z[ee])) {\n      $ = 1;\n      break;\n    }\n  }\n\n  var i,\n      te = J && Q(window.MutationObserver),\n      oe = te ? function (e) {\n    var t = !1,\n        o = 0,\n        i = document.createElement('span'),\n        n = new MutationObserver(function () {\n      e(), t = !1;\n    });\n    return n.observe(i, {\n      attributes: !0\n    }), function () {\n      t || (t = !0, i.setAttribute('x-index', o), ++o);\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, $));\n    };\n  },\n      ie = function ie() {\n    return void 0 == i && (i = -1 !== navigator.appVersion.indexOf('MSIE 10')), i;\n  },\n      ne = function ne(e, t) {\n    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n  },\n      re = function () {\n    function e(e, t) {\n      for (var o, n = 0; n < t.length; n++) {\n        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n    }\n\n    return function (t, o, i) {\n      return o && e(t.prototype, o), i && e(t, i), t;\n    };\n  }(),\n      pe = function pe(e, t, o) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: o,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = o, e;\n  },\n      se = Object.assign || function (e) {\n    for (var t, o = 1; o < arguments.length; o++) {\n      for (var i in t = arguments[o], t) {\n        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n      }\n    }\n\n    return e;\n  },\n      de = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n      ae = de.slice(3),\n      fe = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  },\n      le = function () {\n    function t(o, i) {\n      var n = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      ne(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(n.update);\n      }, this.update = oe(this.update.bind(this)), this.options = se({}, t.Defaults, r), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = o.jquery ? o[0] : o, this.popper = i.jquery ? i[0] : i, this.options.modifiers = {}, Object.keys(se({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n        n.options.modifiers[e] = se({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return se({\n          name: e\n        }, n.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);\n      }), this.update();\n      var p = this.options.eventsEnabled;\n      p && this.enableEventListeners(), this.state.eventsEnabled = p;\n    }\n\n    return re(t, [{\n      key: 'update',\n      value: function value() {\n        return k.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function value() {\n        return D.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function value() {\n        return A.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function value() {\n        return I.call(this);\n      }\n    }]), t;\n  }();\n\n  return le.Utils = ('undefined' == typeof window ? __webpack_require__.g : window).PopperUtils, le.placements = de, le.Defaults = {\n    placement: 'bottom',\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = t.split('-')[1];\n\n          if (i) {\n            var n = e.offsets,\n                r = n.reference,\n                p = n.popper,\n                s = -1 !== ['bottom', 'top'].indexOf(o),\n                d = s ? 'left' : 'top',\n                a = s ? 'width' : 'height',\n                f = {\n              start: pe({}, d, r[d]),\n              end: pe({}, d, r[d] + r[a] - p[a])\n            };\n            e.offsets.popper = se({}, p, f[i]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o,\n              i = t.offset,\n              n = e.placement,\n              r = e.offsets,\n              p = r.popper,\n              s = r.reference,\n              d = n.split('-')[0];\n          return o = R(+i) ? [+i, 0] : G(i, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n        },\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.boundariesElement || r(e.instance.popper);\n          e.instance.reference === o && (o = r(o));\n          var i = w(e.instance.popper, e.instance.reference, t.padding, o);\n          t.boundaries = i;\n          var n = t.priority,\n              p = e.offsets.popper,\n              s = {\n            primary: function primary(e) {\n              var o = p[e];\n              return p[e] < i[e] && !t.escapeWithReference && (o = _(p[e], i[e])), pe({}, e, o);\n            },\n            secondary: function secondary(e) {\n              var o = 'right' === e ? 'left' : 'top',\n                  n = p[o];\n              return p[e] > i[e] && !t.escapeWithReference && (n = z(p[o], i[e] - ('right' === e ? p.width : p.height))), pe({}, o, n);\n            }\n          };\n          return n.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            p = se({}, p, s[t](e));\n          }), e.offsets.popper = p, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n              o = t.popper,\n              i = t.reference,\n              n = e.placement.split('-')[0],\n              r = V,\n              p = -1 !== ['top', 'bottom'].indexOf(n),\n              s = p ? 'right' : 'bottom',\n              d = p ? 'left' : 'top',\n              a = p ? 'width' : 'height';\n          return o[s] < r(i[d]) && (e.offsets.popper[d] = r(i[d]) - o[a]), o[d] > r(i[s]) && (e.offsets.popper[d] = r(i[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (!F(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var o = t.element;\n\n          if ('string' == typeof o) {\n            if (o = e.instance.popper.querySelector(o), !o) return e;\n          } else if (!e.instance.popper.contains(o)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n\n          var i = e.placement.split('-')[0],\n              n = e.offsets,\n              r = n.popper,\n              p = n.reference,\n              s = -1 !== ['left', 'right'].indexOf(i),\n              d = s ? 'height' : 'width',\n              a = s ? 'top' : 'left',\n              f = s ? 'left' : 'top',\n              l = s ? 'bottom' : 'right',\n              m = O(o)[d];\n          p[l] - m < r[a] && (e.offsets.popper[a] -= r[a] - (p[l] - m)), p[a] + m > r[l] && (e.offsets.popper[a] += p[a] + m - r[l]);\n          var h = p[a] + p[d] / 2 - m / 2,\n              g = h - c(e.offsets.popper)[a];\n          return g = _(z(r[d] - m, g), 0), e.arrowElement = o, e.offsets.arrow = {}, e.offsets.arrow[a] = Math.round(g), e.offsets.arrow[f] = '', e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (W(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = w(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement),\n              i = e.placement.split('-')[0],\n              n = L(i),\n              r = e.placement.split('-')[1] || '',\n              p = [];\n\n          switch (t.behavior) {\n            case fe.FLIP:\n              p = [i, n];\n              break;\n\n            case fe.CLOCKWISE:\n              p = K(i);\n              break;\n\n            case fe.COUNTERCLOCKWISE:\n              p = K(i, !0);\n              break;\n\n            default:\n              p = t.behavior;\n          }\n\n          return p.forEach(function (s, d) {\n            if (i !== s || p.length === d + 1) return e;\n            i = e.placement.split('-')[0], n = L(i);\n            var a = e.offsets.popper,\n                f = e.offsets.reference,\n                l = V,\n                m = 'left' === i && l(a.right) > l(f.left) || 'right' === i && l(a.left) < l(f.right) || 'top' === i && l(a.bottom) > l(f.top) || 'bottom' === i && l(a.top) < l(f.bottom),\n                h = l(a.left) < l(o.left),\n                c = l(a.right) > l(o.right),\n                g = l(a.top) < l(o.top),\n                u = l(a.bottom) > l(o.bottom),\n                b = 'left' === i && h || 'right' === i && c || 'top' === i && g || 'bottom' === i && u,\n                y = -1 !== ['top', 'bottom'].indexOf(i),\n                w = !!t.flipVariations && (y && 'start' === r && h || y && 'end' === r && c || !y && 'start' === r && g || !y && 'end' === r && u);\n            (m || b || w) && (e.flipped = !0, (m || b) && (i = p[d + 1]), w && (r = j(r)), e.placement = i + (r ? '-' + r : ''), e.offsets.popper = se({}, e.offsets.popper, S(e.instance.popper, e.offsets.reference, e.placement)), e = N(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport'\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              i = e.offsets,\n              n = i.popper,\n              r = i.reference,\n              p = -1 !== ['left', 'right'].indexOf(o),\n              s = -1 === ['top', 'left'].indexOf(o);\n          return n[p ? 'left' : 'top'] = r[t] - (s ? n[p ? 'width' : 'height'] : 0), e.placement = L(t), e.offsets.popper = c(n), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!F(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n              o = T(e.instance.modifiers, function (e) {\n            return 'preventOverflow' === e.name;\n          }).boundaries;\n\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.x,\n              i = t.y,\n              n = e.offsets.popper,\n              p = T(e.instance.modifiers, function (e) {\n            return 'applyStyle' === e.name;\n          }).gpuAcceleration;\n          void 0 !== p && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n              d,\n              a = void 0 === p ? t.gpuAcceleration : p,\n              f = r(e.instance.popper),\n              l = g(f),\n              m = {\n            position: n.position\n          },\n              h = {\n            left: V(n.left),\n            top: V(n.top),\n            bottom: V(n.bottom),\n            right: V(n.right)\n          },\n              c = 'bottom' === o ? 'top' : 'bottom',\n              u = 'right' === i ? 'left' : 'right',\n              b = B('transform');\n          if (d = 'bottom' == c ? -l.height + h.bottom : h.top, s = 'right' == u ? -l.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[u] = 0, m.willChange = 'transform';else {\n            var y = 'bottom' == c ? -1 : 1,\n                w = 'right' == u ? -1 : 1;\n            m[c] = d * y, m[u] = s * w, m.willChange = c + ', ' + u;\n          }\n          var v = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = se({}, v, e.attributes), e.styles = se({}, m, e.styles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return U(e.instance.popper, e.styles), Y(e.instance.popper, e.attributes), e.offsets.arrow && U(e.arrowElement, e.offsets.arrow), e;\n        },\n        onLoad: function onLoad(e, t, o, i, n) {\n          var r = x(n, t, e),\n              p = E(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), U(t, {\n            position: 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, le;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N0osQ0FBQyxDQUFDK0csUUFBRixDQUFXTCxNQUFaLEVBQW1CMUcsQ0FBQyxDQUFDaUgsVUFBckIsQ0FBL0IsRUFBZ0VqSCxDQUFDLENBQUN5RyxPQUFGLENBQVUrSCxLQUFWLElBQWlCNUUsQ0FBQyxDQUFDNUosQ0FBQyxDQUFDMk8sWUFBSCxFQUFnQjNPLENBQUMsQ0FBQ3lHLE9BQUYsQ0FBVStILEtBQTFCLENBQWxGLEVBQW1IeE8sQ0FBMUg7QUFBNEgsU0FBaks7QUFBa0t1TixRQUFBQSxNQUFNLEVBQUMsZ0JBQVN2TixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlVSxDQUFmLEVBQWlCSixDQUFqQixFQUFtQjtBQUFDLGNBQUlLLENBQUMsR0FBQytELENBQUMsQ0FBQ3BFLENBQUQsRUFBR2YsQ0FBSCxFQUFLRCxDQUFMLENBQVA7QUFBQSxjQUFldUIsQ0FBQyxHQUFDcUQsQ0FBQyxDQUFDbEUsQ0FBQyxDQUFDeUcsU0FBSCxFQUFhOUYsQ0FBYixFQUFlcEIsQ0FBZixFQUFpQkQsQ0FBakIsRUFBbUJVLENBQUMsQ0FBQzJHLFNBQUYsQ0FBWUMsSUFBWixDQUFpQkMsaUJBQXBDLEVBQXNEN0csQ0FBQyxDQUFDMkcsU0FBRixDQUFZQyxJQUFaLENBQWlCRSxPQUF2RSxDQUFsQjtBQUFrRyxpQkFBT3ZILENBQUMsQ0FBQzZKLFlBQUYsQ0FBZSxhQUFmLEVBQTZCdkksQ0FBN0IsR0FBZ0NxSSxDQUFDLENBQUMzSixDQUFELEVBQUc7QUFBQ3lILFlBQUFBLFFBQVEsRUFBQztBQUFWLFdBQUgsQ0FBakMsRUFBMkRoSCxDQUFsRTtBQUFvRSxTQUFuVztBQUFvV3dPLFFBQUFBLGVBQWUsRUFBQyxLQUFLO0FBQXpYO0FBQXAzSztBQUE5RyxHQUE3RixFQUE2N0xqQyxFQUFwOEw7QUFBdThMLENBQXY2a0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29yZS9wb3BwZXIubWluLmpzPzIzMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKEMpIEZlZGVyaWNvIFppdm9sbyAyMDE3XG4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChsaWNlbnNlIHRlcm1zIGFyZSBhdCBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKS5cbiAqLyhmdW5jdGlvbihlLHQpeydvYmplY3QnPT10eXBlb2YgZXhwb3J0cyYmJ3VuZGVmaW5lZCchPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOidmdW5jdGlvbic9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuUG9wcGVyPXQoKX0pKHRoaXMsZnVuY3Rpb24oKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZSYmJ1tvYmplY3QgRnVuY3Rpb25dJz09PXt9LnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gdChlLHQpe2lmKDEhPT1lLm5vZGVUeXBlKXJldHVybltdO3ZhciBvPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCk7cmV0dXJuIHQ/b1t0XTpvfWZ1bmN0aW9uIG8oZSl7cmV0dXJuJ0hUTUwnPT09ZS5ub2RlTmFtZT9lOmUucGFyZW50Tm9kZXx8ZS5ob3N0fWZ1bmN0aW9uIG4oZSl7aWYoIWV8fC0xIT09WydIVE1MJywnQk9EWScsJyNkb2N1bWVudCddLmluZGV4T2YoZS5ub2RlTmFtZSkpcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5ib2R5O3ZhciBpPXQoZSkscj1pLm92ZXJmbG93LHA9aS5vdmVyZmxvd1gscz1pLm92ZXJmbG93WTtyZXR1cm4gLyhhdXRvfHNjcm9sbCkvLnRlc3QocitzK3ApP2U6bihvKGUpKX1mdW5jdGlvbiByKGUpe3ZhciBvPWUmJmUub2Zmc2V0UGFyZW50LGk9byYmby5ub2RlTmFtZTtyZXR1cm4gaSYmJ0JPRFknIT09aSYmJ0hUTUwnIT09aT8tMSE9PVsnVEQnLCdUQUJMRSddLmluZGV4T2Yoby5ub2RlTmFtZSkmJidzdGF0aWMnPT09dChvLCdwb3NpdGlvbicpP3Iobyk6bzp3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIHAoZSl7dmFyIHQ9ZS5ub2RlTmFtZTtyZXR1cm4nQk9EWSchPT10JiYoJ0hUTUwnPT09dHx8cihlLmZpcnN0RWxlbWVudENoaWxkKT09PWUpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuIG51bGw9PT1lLnBhcmVudE5vZGU/ZTpzKGUucGFyZW50Tm9kZSl9ZnVuY3Rpb24gZChlLHQpe2lmKCFlfHwhZS5ub2RlVHlwZXx8IXR8fCF0Lm5vZGVUeXBlKXJldHVybiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3ZhciBvPWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkmTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcsaT1vP2U6dCxuPW8/dDplLGE9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTthLnNldFN0YXJ0KGksMCksYS5zZXRFbmQobiwwKTt2YXIgZj1hLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO2lmKGUhPT1mJiZ0IT09Znx8aS5jb250YWlucyhuKSlyZXR1cm4gcChmKT9mOnIoZik7dmFyIGw9cyhlKTtyZXR1cm4gbC5ob3N0P2QobC5ob3N0LHQpOmQoZSxzKHQpLmhvc3QpfWZ1bmN0aW9uIGEoZSl7dmFyIHQ9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOid0b3AnLG89J3RvcCc9PT10PydzY3JvbGxUb3AnOidzY3JvbGxMZWZ0JyxpPWUubm9kZU5hbWU7aWYoJ0JPRFknPT09aXx8J0hUTUwnPT09aSl7dmFyIG49d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxyPXdpbmRvdy5kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50fHxuO3JldHVybiByW29dfXJldHVybiBlW29dfWZ1bmN0aW9uIGYoZSx0KXt2YXIgbz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLGk9YSh0LCd0b3AnKSxuPWEodCwnbGVmdCcpLHI9bz8tMToxO3JldHVybiBlLnRvcCs9aSpyLGUuYm90dG9tKz1pKnIsZS5sZWZ0Kz1uKnIsZS5yaWdodCs9bipyLGV9ZnVuY3Rpb24gbChlLHQpe3ZhciBvPSd4Jz09PXQ/J0xlZnQnOidUb3AnLGk9J0xlZnQnPT1vPydSaWdodCc6J0JvdHRvbSc7cmV0dXJuK2VbJ2JvcmRlcicrbysnV2lkdGgnXS5zcGxpdCgncHgnKVswXSsgK2VbJ2JvcmRlcicraSsnV2lkdGgnXS5zcGxpdCgncHgnKVswXX1mdW5jdGlvbiBtKGUsdCxvLGkpe3JldHVybiBfKHRbJ29mZnNldCcrZV0sb1snY2xpZW50JytlXSxvWydvZmZzZXQnK2VdLGllKCk/b1snb2Zmc2V0JytlXStpWydtYXJnaW4nKygnSGVpZ2h0Jz09PWU/J1RvcCc6J0xlZnQnKV0raVsnbWFyZ2luJysoJ0hlaWdodCc9PT1lPydCb3R0b20nOidSaWdodCcpXTowKX1mdW5jdGlvbiBoKCl7dmFyIGU9d2luZG93LmRvY3VtZW50LmJvZHksdD13aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LG89aWUoKSYmd2luZG93LmdldENvbXB1dGVkU3R5bGUodCk7cmV0dXJue2hlaWdodDptKCdIZWlnaHQnLGUsdCxvKSx3aWR0aDptKCdXaWR0aCcsZSx0LG8pfX1mdW5jdGlvbiBjKGUpe3JldHVybiBzZSh7fSxlLHtyaWdodDplLmxlZnQrZS53aWR0aCxib3R0b206ZS50b3ArZS5oZWlnaHR9KX1mdW5jdGlvbiBnKGUpe3ZhciBvPXt9O2lmKGllKCkpdHJ5e289ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt2YXIgaT1hKGUsJ3RvcCcpLG49YShlLCdsZWZ0Jyk7by50b3ArPWksby5sZWZ0Kz1uLG8uYm90dG9tKz1pLG8ucmlnaHQrPW59Y2F0Y2goZSl7fWVsc2Ugbz1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3ZhciByPXtsZWZ0Om8ubGVmdCx0b3A6by50b3Asd2lkdGg6by5yaWdodC1vLmxlZnQsaGVpZ2h0Om8uYm90dG9tLW8udG9wfSxwPSdIVE1MJz09PWUubm9kZU5hbWU/aCgpOnt9LHM9cC53aWR0aHx8ZS5jbGllbnRXaWR0aHx8ci5yaWdodC1yLmxlZnQsZD1wLmhlaWdodHx8ZS5jbGllbnRIZWlnaHR8fHIuYm90dG9tLXIudG9wLGY9ZS5vZmZzZXRXaWR0aC1zLG09ZS5vZmZzZXRIZWlnaHQtZDtpZihmfHxtKXt2YXIgZz10KGUpO2YtPWwoZywneCcpLG0tPWwoZywneScpLHIud2lkdGgtPWYsci5oZWlnaHQtPW19cmV0dXJuIGMocil9ZnVuY3Rpb24gdShlLG8pe3ZhciBpPWllKCkscj0nSFRNTCc9PT1vLm5vZGVOYW1lLHA9ZyhlKSxzPWcobyksZD1uKGUpLGE9dChvKSxsPSthLmJvcmRlclRvcFdpZHRoLnNwbGl0KCdweCcpWzBdLG09K2EuYm9yZGVyTGVmdFdpZHRoLnNwbGl0KCdweCcpWzBdLGg9Yyh7dG9wOnAudG9wLXMudG9wLWwsbGVmdDpwLmxlZnQtcy5sZWZ0LW0sd2lkdGg6cC53aWR0aCxoZWlnaHQ6cC5oZWlnaHR9KTtpZihoLm1hcmdpblRvcD0wLGgubWFyZ2luTGVmdD0wLCFpJiZyKXt2YXIgdT0rYS5tYXJnaW5Ub3Auc3BsaXQoJ3B4JylbMF0sYj0rYS5tYXJnaW5MZWZ0LnNwbGl0KCdweCcpWzBdO2gudG9wLT1sLXUsaC5ib3R0b20tPWwtdSxoLmxlZnQtPW0tYixoLnJpZ2h0LT1tLWIsaC5tYXJnaW5Ub3A9dSxoLm1hcmdpbkxlZnQ9Yn1yZXR1cm4oaT9vLmNvbnRhaW5zKGQpOm89PT1kJiYnQk9EWSchPT1kLm5vZGVOYW1lKSYmKGg9ZihoLG8pKSxofWZ1bmN0aW9uIGIoZSl7dmFyIHQ9d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxvPXUoZSx0KSxpPV8odC5jbGllbnRXaWR0aCx3aW5kb3cuaW5uZXJXaWR0aHx8MCksbj1fKHQuY2xpZW50SGVpZ2h0LHdpbmRvdy5pbm5lckhlaWdodHx8MCkscj1hKHQpLHA9YSh0LCdsZWZ0Jykscz17dG9wOnItby50b3Arby5tYXJnaW5Ub3AsbGVmdDpwLW8ubGVmdCtvLm1hcmdpbkxlZnQsd2lkdGg6aSxoZWlnaHQ6bn07cmV0dXJuIGMocyl9ZnVuY3Rpb24geShlKXt2YXIgaT1lLm5vZGVOYW1lO3JldHVybidCT0RZJz09PWl8fCdIVE1MJz09PWk/ITE6J2ZpeGVkJz09PXQoZSwncG9zaXRpb24nKXx8eShvKGUpKX1mdW5jdGlvbiB3KGUsdCxpLHIpe3ZhciBwPXt0b3A6MCxsZWZ0OjB9LHM9ZChlLHQpO2lmKCd2aWV3cG9ydCc9PT1yKXA9YihzKTtlbHNle3ZhciBhOydzY3JvbGxQYXJlbnQnPT09cj8oYT1uKG8oZSkpLCdCT0RZJz09PWEubm9kZU5hbWUmJihhPXdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKTond2luZG93Jz09PXI/YT13aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OmE9cjt2YXIgZj11KGEscyk7aWYoJ0hUTUwnPT09YS5ub2RlTmFtZSYmIXkocykpe3ZhciBsPWgoKSxtPWwuaGVpZ2h0LGM9bC53aWR0aDtwLnRvcCs9Zi50b3AtZi5tYXJnaW5Ub3AscC5ib3R0b209bStmLnRvcCxwLmxlZnQrPWYubGVmdC1mLm1hcmdpbkxlZnQscC5yaWdodD1jK2YubGVmdH1lbHNlIHA9Zn1yZXR1cm4gcC5sZWZ0Kz1pLHAudG9wKz1pLHAucmlnaHQtPWkscC5ib3R0b20tPWkscH1mdW5jdGlvbiB2KGUpe3ZhciB0PWUud2lkdGgsbz1lLmhlaWdodDtyZXR1cm4gdCpvfWZ1bmN0aW9uIEUoZSx0LG8saSxuKXt2YXIgcj01PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06MDtpZigtMT09PWUuaW5kZXhPZignYXV0bycpKXJldHVybiBlO3ZhciBwPXcobyxpLHIsbikscz17dG9wOnt3aWR0aDpwLndpZHRoLGhlaWdodDp0LnRvcC1wLnRvcH0scmlnaHQ6e3dpZHRoOnAucmlnaHQtdC5yaWdodCxoZWlnaHQ6cC5oZWlnaHR9LGJvdHRvbTp7d2lkdGg6cC53aWR0aCxoZWlnaHQ6cC5ib3R0b20tdC5ib3R0b219LGxlZnQ6e3dpZHRoOnQubGVmdC1wLmxlZnQsaGVpZ2h0OnAuaGVpZ2h0fX0sZD1PYmplY3Qua2V5cyhzKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHNlKHtrZXk6ZX0sc1tlXSx7YXJlYTp2KHNbZV0pfSl9KS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuYXJlYS1lLmFyZWF9KSxhPWQuZmlsdGVyKGZ1bmN0aW9uKGUpe3ZhciB0PWUud2lkdGgsaT1lLmhlaWdodDtyZXR1cm4gdD49by5jbGllbnRXaWR0aCYmaT49by5jbGllbnRIZWlnaHR9KSxmPTA8YS5sZW5ndGg/YVswXS5rZXk6ZFswXS5rZXksbD1lLnNwbGl0KCctJylbMV07cmV0dXJuIGYrKGw/Jy0nK2w6JycpfWZ1bmN0aW9uIHgoZSx0LG8pe3ZhciBpPWQodCxvKTtyZXR1cm4gdShvLGkpfWZ1bmN0aW9uIE8oZSl7dmFyIHQ9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksbz1wYXJzZUZsb2F0KHQubWFyZ2luVG9wKStwYXJzZUZsb2F0KHQubWFyZ2luQm90dG9tKSxpPXBhcnNlRmxvYXQodC5tYXJnaW5MZWZ0KStwYXJzZUZsb2F0KHQubWFyZ2luUmlnaHQpLG49e3dpZHRoOmUub2Zmc2V0V2lkdGgraSxoZWlnaHQ6ZS5vZmZzZXRIZWlnaHQrb307cmV0dXJuIG59ZnVuY3Rpb24gTChlKXt2YXIgdD17bGVmdDoncmlnaHQnLHJpZ2h0OidsZWZ0Jyxib3R0b206J3RvcCcsdG9wOidib3R0b20nfTtyZXR1cm4gZS5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZyxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pfWZ1bmN0aW9uIFMoZSx0LG8pe289by5zcGxpdCgnLScpWzBdO3ZhciBpPU8oZSksbj17d2lkdGg6aS53aWR0aCxoZWlnaHQ6aS5oZWlnaHR9LHI9LTEhPT1bJ3JpZ2h0JywnbGVmdCddLmluZGV4T2YobykscD1yPyd0b3AnOidsZWZ0JyxzPXI/J2xlZnQnOid0b3AnLGQ9cj8naGVpZ2h0Jzond2lkdGgnLGE9cj8nd2lkdGgnOidoZWlnaHQnO3JldHVybiBuW3BdPXRbcF0rdFtkXS8yLWlbZF0vMixuW3NdPW89PT1zP3Rbc10taVthXTp0W0wocyldLG59ZnVuY3Rpb24gVChlLHQpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmluZD9lLmZpbmQodCk6ZS5maWx0ZXIodClbMF19ZnVuY3Rpb24gQyhlLHQsbyl7aWYoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleClyZXR1cm4gZS5maW5kSW5kZXgoZnVuY3Rpb24oZSl7cmV0dXJuIGVbdF09PT1vfSk7dmFyIGk9VChlLGZ1bmN0aW9uKGUpe3JldHVybiBlW3RdPT09b30pO3JldHVybiBlLmluZGV4T2YoaSl9ZnVuY3Rpb24gTih0LG8saSl7dmFyIG49dm9pZCAwPT09aT90OnQuc2xpY2UoMCxDKHQsJ25hbWUnLGkpKTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuZnVuY3Rpb24mJmNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTt2YXIgaT10LmZ1bmN0aW9ufHx0LmZuO3QuZW5hYmxlZCYmZShpKSYmKG8ub2Zmc2V0cy5wb3BwZXI9YyhvLm9mZnNldHMucG9wcGVyKSxvLm9mZnNldHMucmVmZXJlbmNlPWMoby5vZmZzZXRzLnJlZmVyZW5jZSksbz1pKG8sdCkpfSksb31mdW5jdGlvbiBrKCl7aWYoIXRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpe3ZhciBlPXtpbnN0YW5jZTp0aGlzLHN0eWxlczp7fSxhdHRyaWJ1dGVzOnt9LGZsaXBwZWQ6ITEsb2Zmc2V0czp7fX07ZS5vZmZzZXRzLnJlZmVyZW5jZT14KHRoaXMuc3RhdGUsdGhpcy5wb3BwZXIsdGhpcy5yZWZlcmVuY2UpLGUucGxhY2VtZW50PUUodGhpcy5vcHRpb25zLnBsYWNlbWVudCxlLm9mZnNldHMucmVmZXJlbmNlLHRoaXMucG9wcGVyLHRoaXMucmVmZXJlbmNlLHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCx0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyksZS5vcmlnaW5hbFBsYWNlbWVudD1lLnBsYWNlbWVudCxlLm9mZnNldHMucG9wcGVyPVModGhpcy5wb3BwZXIsZS5vZmZzZXRzLnJlZmVyZW5jZSxlLnBsYWNlbWVudCksZS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbj0nYWJzb2x1dGUnLGU9Tih0aGlzLm1vZGlmaWVycyxlKSx0aGlzLnN0YXRlLmlzQ3JlYXRlZD90aGlzLm9wdGlvbnMub25VcGRhdGUoZSk6KHRoaXMuc3RhdGUuaXNDcmVhdGVkPSEwLHRoaXMub3B0aW9ucy5vbkNyZWF0ZShlKSl9fWZ1bmN0aW9uIFcoZSx0KXtyZXR1cm4gZS5zb21lKGZ1bmN0aW9uKGUpe3ZhciBvPWUubmFtZSxpPWUuZW5hYmxlZDtyZXR1cm4gaSYmbz09PXR9KX1mdW5jdGlvbiBCKGUpe2Zvcih2YXIgdD1bITEsJ21zJywnV2Via2l0JywnTW96JywnTyddLG89ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49MDtuPHQubGVuZ3RoLTE7bisrKXt2YXIgaT10W25dLHI9aT8nJytpK286ZTtpZigndW5kZWZpbmVkJyE9dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5ib2R5LnN0eWxlW3JdKXJldHVybiByfXJldHVybiBudWxsfWZ1bmN0aW9uIEQoKXtyZXR1cm4gdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZD0hMCxXKHRoaXMubW9kaWZpZXJzLCdhcHBseVN0eWxlJykmJih0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JyksdGhpcy5wb3BwZXIuc3R5bGUubGVmdD0nJyx0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbj0nJyx0aGlzLnBvcHBlci5zdHlsZS50b3A9JycsdGhpcy5wb3BwZXIuc3R5bGVbQigndHJhbnNmb3JtJyldPScnKSx0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpLHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kmJnRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpLHRoaXN9ZnVuY3Rpb24gSChlLHQsbyxpKXt2YXIgcj0nQk9EWSc9PT1lLm5vZGVOYW1lLHA9cj93aW5kb3c6ZTtwLmFkZEV2ZW50TGlzdGVuZXIodCxvLHtwYXNzaXZlOiEwfSkscnx8SChuKHAucGFyZW50Tm9kZSksdCxvLGkpLGkucHVzaChwKX1mdW5jdGlvbiBQKGUsdCxvLGkpe28udXBkYXRlQm91bmQ9aSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJyxvLnVwZGF0ZUJvdW5kLHtwYXNzaXZlOiEwfSk7dmFyIHI9bihlKTtyZXR1cm4gSChyLCdzY3JvbGwnLG8udXBkYXRlQm91bmQsby5zY3JvbGxQYXJlbnRzKSxvLnNjcm9sbEVsZW1lbnQ9cixvLmV2ZW50c0VuYWJsZWQ9ITAsb31mdW5jdGlvbiBBKCl7dGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkfHwodGhpcy5zdGF0ZT1QKHRoaXMucmVmZXJlbmNlLHRoaXMub3B0aW9ucyx0aGlzLnN0YXRlLHRoaXMuc2NoZWR1bGVVcGRhdGUpKX1mdW5jdGlvbiBNKGUsdCl7cmV0dXJuIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLHQudXBkYXRlQm91bmQpLHQuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJyx0LnVwZGF0ZUJvdW5kKX0pLHQudXBkYXRlQm91bmQ9bnVsbCx0LnNjcm9sbFBhcmVudHM9W10sdC5zY3JvbGxFbGVtZW50PW51bGwsdC5ldmVudHNFbmFibGVkPSExLHR9ZnVuY3Rpb24gSSgpe3RoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCYmKHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKSx0aGlzLnN0YXRlPU0odGhpcy5yZWZlcmVuY2UsdGhpcy5zdGF0ZSkpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuJychPT1lJiYhaXNOYU4ocGFyc2VGbG9hdChlKSkmJmlzRmluaXRlKGUpfWZ1bmN0aW9uIFUoZSx0KXtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKG8pe3ZhciBpPScnOy0xIT09Wyd3aWR0aCcsJ2hlaWdodCcsJ3RvcCcsJ3JpZ2h0JywnYm90dG9tJywnbGVmdCddLmluZGV4T2YobykmJlIodFtvXSkmJihpPSdweCcpLGUuc3R5bGVbb109dFtvXStpfSl9ZnVuY3Rpb24gWShlLHQpe09iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24obyl7dmFyIGk9dFtvXTshMT09PWk/ZS5yZW1vdmVBdHRyaWJ1dGUobyk6ZS5zZXRBdHRyaWJ1dGUobyx0W29dKX0pfWZ1bmN0aW9uIEYoZSx0LG8pe3ZhciBpPVQoZSxmdW5jdGlvbihlKXt2YXIgbz1lLm5hbWU7cmV0dXJuIG89PT10fSksbj0hIWkmJmUuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gZS5uYW1lPT09byYmZS5lbmFibGVkJiZlLm9yZGVyPGkub3JkZXJ9KTtpZighbil7dmFyIHI9J2AnK3QrJ2AnO2NvbnNvbGUud2FybignYCcrbysnYCcrJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnK3IrJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcrcisnIScpfXJldHVybiBufWZ1bmN0aW9uIGooZSl7cmV0dXJuJ2VuZCc9PT1lPydzdGFydCc6J3N0YXJ0Jz09PWU/J2VuZCc6ZX1mdW5jdGlvbiBLKGUpe3ZhciB0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbz1hZS5pbmRleE9mKGUpLGk9YWUuc2xpY2UobysxKS5jb25jYXQoYWUuc2xpY2UoMCxvKSk7cmV0dXJuIHQ/aS5yZXZlcnNlKCk6aX1mdW5jdGlvbiBxKGUsdCxvLGkpe3ZhciBuPWUubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pLHI9K25bMV0scD1uWzJdO2lmKCFyKXJldHVybiBlO2lmKDA9PT1wLmluZGV4T2YoJyUnKSl7dmFyIHM7c3dpdGNoKHApe2Nhc2UnJXAnOnM9bzticmVhaztjYXNlJyUnOmNhc2UnJXInOmRlZmF1bHQ6cz1pO312YXIgZD1jKHMpO3JldHVybiBkW3RdLzEwMCpyfWlmKCd2aCc9PT1wfHwndncnPT09cCl7dmFyIGE7cmV0dXJuIGE9J3ZoJz09PXA/Xyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LHdpbmRvdy5pbm5lckhlaWdodHx8MCk6Xyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsd2luZG93LmlubmVyV2lkdGh8fDApLGEvMTAwKnJ9cmV0dXJuIHJ9ZnVuY3Rpb24gRyhlLHQsbyxpKXt2YXIgbj1bMCwwXSxyPS0xIT09WydyaWdodCcsJ2xlZnQnXS5pbmRleE9mKGkpLHA9ZS5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0pLHM9cC5pbmRleE9mKFQocCxmdW5jdGlvbihlKXtyZXR1cm4tMSE9PWUuc2VhcmNoKC8sfFxccy8pfSkpO3Bbc10mJi0xPT09cFtzXS5pbmRleE9mKCcsJykmJmNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO3ZhciBkPS9cXHMqLFxccyp8XFxzKy8sYT0tMT09PXM/W3BdOltwLnNsaWNlKDAscykuY29uY2F0KFtwW3NdLnNwbGl0KGQpWzBdXSksW3Bbc10uc3BsaXQoZClbMV1dLmNvbmNhdChwLnNsaWNlKHMrMSkpXTtyZXR1cm4gYT1hLm1hcChmdW5jdGlvbihlLGkpe3ZhciBuPSgxPT09aT8hcjpyKT8naGVpZ2h0Jzond2lkdGgnLHA9ITE7cmV0dXJuIGUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuJyc9PT1lW2UubGVuZ3RoLTFdJiYtMSE9PVsnKycsJy0nXS5pbmRleE9mKHQpPyhlW2UubGVuZ3RoLTFdPXQscD0hMCxlKTpwPyhlW2UubGVuZ3RoLTFdKz10LHA9ITEsZSk6ZS5jb25jYXQodCl9LFtdKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHEoZSxuLHQsbyl9KX0pLGEuZm9yRWFjaChmdW5jdGlvbihlLHQpe2UuZm9yRWFjaChmdW5jdGlvbihvLGkpe1IobykmJihuW3RdKz1vKignLSc9PT1lW2ktMV0/LTE6MSkpfSl9KSxufWZvcih2YXIgej1NYXRoLm1pbixWPU1hdGguZmxvb3IsXz1NYXRoLm1heCxYPVsnbmF0aXZlIGNvZGUnLCdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXSxRPWZ1bmN0aW9uKGUpe3JldHVybiBYLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuLTE8KGV8fCcnKS50b1N0cmluZygpLmluZGV4T2YodCl9KX0sSj0ndW5kZWZpbmVkJyE9dHlwZW9mIHdpbmRvdyxaPVsnRWRnZScsJ1RyaWRlbnQnLCdGaXJlZm94J10sJD0wLGVlPTA7ZWU8Wi5sZW5ndGg7ZWUrPTEpaWYoSiYmMDw9bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFpbZWVdKSl7JD0xO2JyZWFrfXZhciBpLHRlPUomJlEod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpLG9lPXRlP2Z1bmN0aW9uKGUpe3ZhciB0PSExLG89MCxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSxuPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCl7ZSgpLHQ9ITF9KTtyZXR1cm4gbi5vYnNlcnZlKGkse2F0dHJpYnV0ZXM6ITB9KSxmdW5jdGlvbigpe3R8fCh0PSEwLGkuc2V0QXR0cmlidXRlKCd4LWluZGV4JyxvKSwrK28pfX06ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dHx8KHQ9ITAsc2V0VGltZW91dChmdW5jdGlvbigpe3Q9ITEsZSgpfSwkKSl9fSxpZT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PWkmJihpPS0xIT09bmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTVNJRSAxMCcpKSxpfSxuZT1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpfSxyZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG8sbj0wO248dC5sZW5ndGg7bisrKW89dFtuXSxvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwndmFsdWUnaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfXJldHVybiBmdW5jdGlvbih0LG8saSl7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksaSYmZSh0LGkpLHR9fSgpLHBlPWZ1bmN0aW9uKGUsdCxvKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOm8sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPW8sZX0sc2U9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG89MTtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKWZvcih2YXIgaSBpbiB0PWFyZ3VtZW50c1tvXSx0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGkpJiYoZVtpXT10W2ldKTtyZXR1cm4gZX0sZGU9WydhdXRvLXN0YXJ0JywnYXV0bycsJ2F1dG8tZW5kJywndG9wLXN0YXJ0JywndG9wJywndG9wLWVuZCcsJ3JpZ2h0LXN0YXJ0JywncmlnaHQnLCdyaWdodC1lbmQnLCdib3R0b20tZW5kJywnYm90dG9tJywnYm90dG9tLXN0YXJ0JywnbGVmdC1lbmQnLCdsZWZ0JywnbGVmdC1zdGFydCddLGFlPWRlLnNsaWNlKDMpLGZlPXtGTElQOidmbGlwJyxDTE9DS1dJU0U6J2Nsb2Nrd2lzZScsQ09VTlRFUkNMT0NLV0lTRTonY291bnRlcmNsb2Nrd2lzZSd9LGxlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChvLGkpe3ZhciBuPXRoaXMscj0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307bmUodGhpcyx0KSx0aGlzLnNjaGVkdWxlVXBkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShuLnVwZGF0ZSl9LHRoaXMudXBkYXRlPW9lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpLHRoaXMub3B0aW9ucz1zZSh7fSx0LkRlZmF1bHRzLHIpLHRoaXMuc3RhdGU9e2lzRGVzdHJveWVkOiExLGlzQ3JlYXRlZDohMSxzY3JvbGxQYXJlbnRzOltdfSx0aGlzLnJlZmVyZW5jZT1vLmpxdWVyeT9vWzBdOm8sdGhpcy5wb3BwZXI9aS5qcXVlcnk/aVswXTppLHRoaXMub3B0aW9ucy5tb2RpZmllcnM9e30sT2JqZWN0LmtleXMoc2Uoe30sdC5EZWZhdWx0cy5tb2RpZmllcnMsci5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24ub3B0aW9ucy5tb2RpZmllcnNbZV09c2Uoe30sdC5EZWZhdWx0cy5tb2RpZmllcnNbZV18fHt9LHIubW9kaWZpZXJzP3IubW9kaWZpZXJzW2VdOnt9KX0pLHRoaXMubW9kaWZpZXJzPU9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gc2Uoe25hbWU6ZX0sbi5vcHRpb25zLm1vZGlmaWVyc1tlXSl9KS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUub3JkZXItdC5vcmRlcn0pLHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dC5lbmFibGVkJiZlKHQub25Mb2FkKSYmdC5vbkxvYWQobi5yZWZlcmVuY2Usbi5wb3BwZXIsbi5vcHRpb25zLHQsbi5zdGF0ZSl9KSx0aGlzLnVwZGF0ZSgpO3ZhciBwPXRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO3AmJnRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQ9cH1yZXR1cm4gcmUodCxbe2tleTondXBkYXRlJyx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBrLmNhbGwodGhpcyl9fSx7a2V5OidkZXN0cm95Jyx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBELmNhbGwodGhpcyl9fSx7a2V5OidlbmFibGVFdmVudExpc3RlbmVycycsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gQS5jYWxsKHRoaXMpfX0se2tleTonZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBJLmNhbGwodGhpcyl9fV0pLHR9KCk7cmV0dXJuIGxlLlV0aWxzPSgndW5kZWZpbmVkJz09dHlwZW9mIHdpbmRvdz9nbG9iYWw6d2luZG93KS5Qb3BwZXJVdGlscyxsZS5wbGFjZW1lbnRzPWRlLGxlLkRlZmF1bHRzPXtwbGFjZW1lbnQ6J2JvdHRvbScsZXZlbnRzRW5hYmxlZDohMCxyZW1vdmVPbkRlc3Ryb3k6ITEsb25DcmVhdGU6ZnVuY3Rpb24oKXt9LG9uVXBkYXRlOmZ1bmN0aW9uKCl7fSxtb2RpZmllcnM6e3NoaWZ0OntvcmRlcjoxMDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlKXt2YXIgdD1lLnBsYWNlbWVudCxvPXQuc3BsaXQoJy0nKVswXSxpPXQuc3BsaXQoJy0nKVsxXTtpZihpKXt2YXIgbj1lLm9mZnNldHMscj1uLnJlZmVyZW5jZSxwPW4ucG9wcGVyLHM9LTEhPT1bJ2JvdHRvbScsJ3RvcCddLmluZGV4T2YobyksZD1zPydsZWZ0JzondG9wJyxhPXM/J3dpZHRoJzonaGVpZ2h0JyxmPXtzdGFydDpwZSh7fSxkLHJbZF0pLGVuZDpwZSh7fSxkLHJbZF0rclthXS1wW2FdKX07ZS5vZmZzZXRzLnBvcHBlcj1zZSh7fSxwLGZbaV0pfXJldHVybiBlfX0sb2Zmc2V0OntvcmRlcjoyMDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlLHQpe3ZhciBvLGk9dC5vZmZzZXQsbj1lLnBsYWNlbWVudCxyPWUub2Zmc2V0cyxwPXIucG9wcGVyLHM9ci5yZWZlcmVuY2UsZD1uLnNwbGl0KCctJylbMF07cmV0dXJuIG89UigraSk/WytpLDBdOkcoaSxwLHMsZCksJ2xlZnQnPT09ZD8ocC50b3ArPW9bMF0scC5sZWZ0LT1vWzFdKToncmlnaHQnPT09ZD8ocC50b3ArPW9bMF0scC5sZWZ0Kz1vWzFdKTondG9wJz09PWQ/KHAubGVmdCs9b1swXSxwLnRvcC09b1sxXSk6J2JvdHRvbSc9PT1kJiYocC5sZWZ0Kz1vWzBdLHAudG9wKz1vWzFdKSxlLnBvcHBlcj1wLGV9LG9mZnNldDowfSxwcmV2ZW50T3ZlcmZsb3c6e29yZGVyOjMwMCxlbmFibGVkOiEwLGZuOmZ1bmN0aW9uKGUsdCl7dmFyIG89dC5ib3VuZGFyaWVzRWxlbWVudHx8cihlLmluc3RhbmNlLnBvcHBlcik7ZS5pbnN0YW5jZS5yZWZlcmVuY2U9PT1vJiYobz1yKG8pKTt2YXIgaT13KGUuaW5zdGFuY2UucG9wcGVyLGUuaW5zdGFuY2UucmVmZXJlbmNlLHQucGFkZGluZyxvKTt0LmJvdW5kYXJpZXM9aTt2YXIgbj10LnByaW9yaXR5LHA9ZS5vZmZzZXRzLnBvcHBlcixzPXtwcmltYXJ5OmZ1bmN0aW9uKGUpe3ZhciBvPXBbZV07cmV0dXJuIHBbZV08aVtlXSYmIXQuZXNjYXBlV2l0aFJlZmVyZW5jZSYmKG89XyhwW2VdLGlbZV0pKSxwZSh7fSxlLG8pfSxzZWNvbmRhcnk6ZnVuY3Rpb24oZSl7dmFyIG89J3JpZ2h0Jz09PWU/J2xlZnQnOid0b3AnLG49cFtvXTtyZXR1cm4gcFtlXT5pW2VdJiYhdC5lc2NhcGVXaXRoUmVmZXJlbmNlJiYobj16KHBbb10saVtlXS0oJ3JpZ2h0Jz09PWU/cC53aWR0aDpwLmhlaWdodCkpKSxwZSh7fSxvLG4pfX07cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD0tMT09PVsnbGVmdCcsJ3RvcCddLmluZGV4T2YoZSk/J3NlY29uZGFyeSc6J3ByaW1hcnknO3A9c2Uoe30scCxzW3RdKGUpKX0pLGUub2Zmc2V0cy5wb3BwZXI9cCxlfSxwcmlvcml0eTpbJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddLHBhZGRpbmc6NSxib3VuZGFyaWVzRWxlbWVudDonc2Nyb2xsUGFyZW50J30sa2VlcFRvZ2V0aGVyOntvcmRlcjo0MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlKXt2YXIgdD1lLm9mZnNldHMsbz10LnBvcHBlcixpPXQucmVmZXJlbmNlLG49ZS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXSxyPVYscD0tMSE9PVsndG9wJywnYm90dG9tJ10uaW5kZXhPZihuKSxzPXA/J3JpZ2h0JzonYm90dG9tJyxkPXA/J2xlZnQnOid0b3AnLGE9cD8nd2lkdGgnOidoZWlnaHQnO3JldHVybiBvW3NdPHIoaVtkXSkmJihlLm9mZnNldHMucG9wcGVyW2RdPXIoaVtkXSktb1thXSksb1tkXT5yKGlbc10pJiYoZS5vZmZzZXRzLnBvcHBlcltkXT1yKGlbc10pKSxlfX0sYXJyb3c6e29yZGVyOjUwMCxlbmFibGVkOiEwLGZuOmZ1bmN0aW9uKGUsdCl7aWYoIUYoZS5pbnN0YW5jZS5tb2RpZmllcnMsJ2Fycm93Jywna2VlcFRvZ2V0aGVyJykpcmV0dXJuIGU7dmFyIG89dC5lbGVtZW50O2lmKCdzdHJpbmcnPT10eXBlb2Ygbyl7aWYobz1lLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKG8pLCFvKXJldHVybiBlO31lbHNlIGlmKCFlLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhvKSlyZXR1cm4gY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyksZTt2YXIgaT1lLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdLG49ZS5vZmZzZXRzLHI9bi5wb3BwZXIscD1uLnJlZmVyZW5jZSxzPS0xIT09WydsZWZ0JywncmlnaHQnXS5pbmRleE9mKGkpLGQ9cz8naGVpZ2h0Jzond2lkdGgnLGE9cz8ndG9wJzonbGVmdCcsZj1zPydsZWZ0JzondG9wJyxsPXM/J2JvdHRvbSc6J3JpZ2h0JyxtPU8obylbZF07cFtsXS1tPHJbYV0mJihlLm9mZnNldHMucG9wcGVyW2FdLT1yW2FdLShwW2xdLW0pKSxwW2FdK20+cltsXSYmKGUub2Zmc2V0cy5wb3BwZXJbYV0rPXBbYV0rbS1yW2xdKTt2YXIgaD1wW2FdK3BbZF0vMi1tLzIsZz1oLWMoZS5vZmZzZXRzLnBvcHBlcilbYV07cmV0dXJuIGc9Xyh6KHJbZF0tbSxnKSwwKSxlLmFycm93RWxlbWVudD1vLGUub2Zmc2V0cy5hcnJvdz17fSxlLm9mZnNldHMuYXJyb3dbYV09TWF0aC5yb3VuZChnKSxlLm9mZnNldHMuYXJyb3dbZl09JycsZX0sZWxlbWVudDonW3gtYXJyb3ddJ30sZmxpcDp7b3JkZXI6NjAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSx0KXtpZihXKGUuaW5zdGFuY2UubW9kaWZpZXJzLCdpbm5lcicpKXJldHVybiBlO2lmKGUuZmxpcHBlZCYmZS5wbGFjZW1lbnQ9PT1lLm9yaWdpbmFsUGxhY2VtZW50KXJldHVybiBlO3ZhciBvPXcoZS5pbnN0YW5jZS5wb3BwZXIsZS5pbnN0YW5jZS5yZWZlcmVuY2UsdC5wYWRkaW5nLHQuYm91bmRhcmllc0VsZW1lbnQpLGk9ZS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXSxuPUwoaSkscj1lLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdfHwnJyxwPVtdO3N3aXRjaCh0LmJlaGF2aW9yKXtjYXNlIGZlLkZMSVA6cD1baSxuXTticmVhaztjYXNlIGZlLkNMT0NLV0lTRTpwPUsoaSk7YnJlYWs7Y2FzZSBmZS5DT1VOVEVSQ0xPQ0tXSVNFOnA9SyhpLCEwKTticmVhaztkZWZhdWx0OnA9dC5iZWhhdmlvcjt9cmV0dXJuIHAuZm9yRWFjaChmdW5jdGlvbihzLGQpe2lmKGkhPT1zfHxwLmxlbmd0aD09PWQrMSlyZXR1cm4gZTtpPWUucGxhY2VtZW50LnNwbGl0KCctJylbMF0sbj1MKGkpO3ZhciBhPWUub2Zmc2V0cy5wb3BwZXIsZj1lLm9mZnNldHMucmVmZXJlbmNlLGw9VixtPSdsZWZ0Jz09PWkmJmwoYS5yaWdodCk+bChmLmxlZnQpfHwncmlnaHQnPT09aSYmbChhLmxlZnQpPGwoZi5yaWdodCl8fCd0b3AnPT09aSYmbChhLmJvdHRvbSk+bChmLnRvcCl8fCdib3R0b20nPT09aSYmbChhLnRvcCk8bChmLmJvdHRvbSksaD1sKGEubGVmdCk8bChvLmxlZnQpLGM9bChhLnJpZ2h0KT5sKG8ucmlnaHQpLGc9bChhLnRvcCk8bChvLnRvcCksdT1sKGEuYm90dG9tKT5sKG8uYm90dG9tKSxiPSdsZWZ0Jz09PWkmJmh8fCdyaWdodCc9PT1pJiZjfHwndG9wJz09PWkmJmd8fCdib3R0b20nPT09aSYmdSx5PS0xIT09Wyd0b3AnLCdib3R0b20nXS5pbmRleE9mKGkpLHc9ISF0LmZsaXBWYXJpYXRpb25zJiYoeSYmJ3N0YXJ0Jz09PXImJmh8fHkmJidlbmQnPT09ciYmY3x8IXkmJidzdGFydCc9PT1yJiZnfHwheSYmJ2VuZCc9PT1yJiZ1KTsobXx8Ynx8dykmJihlLmZsaXBwZWQ9ITAsKG18fGIpJiYoaT1wW2QrMV0pLHcmJihyPWoocikpLGUucGxhY2VtZW50PWkrKHI/Jy0nK3I6JycpLGUub2Zmc2V0cy5wb3BwZXI9c2Uoe30sZS5vZmZzZXRzLnBvcHBlcixTKGUuaW5zdGFuY2UucG9wcGVyLGUub2Zmc2V0cy5yZWZlcmVuY2UsZS5wbGFjZW1lbnQpKSxlPU4oZS5pbnN0YW5jZS5tb2RpZmllcnMsZSwnZmxpcCcpKX0pLGV9LGJlaGF2aW9yOidmbGlwJyxwYWRkaW5nOjUsYm91bmRhcmllc0VsZW1lbnQ6J3ZpZXdwb3J0J30saW5uZXI6e29yZGVyOjcwMCxlbmFibGVkOiExLGZuOmZ1bmN0aW9uKGUpe3ZhciB0PWUucGxhY2VtZW50LG89dC5zcGxpdCgnLScpWzBdLGk9ZS5vZmZzZXRzLG49aS5wb3BwZXIscj1pLnJlZmVyZW5jZSxwPS0xIT09WydsZWZ0JywncmlnaHQnXS5pbmRleE9mKG8pLHM9LTE9PT1bJ3RvcCcsJ2xlZnQnXS5pbmRleE9mKG8pO3JldHVybiBuW3A/J2xlZnQnOid0b3AnXT1yW3RdLShzP25bcD8nd2lkdGgnOidoZWlnaHQnXTowKSxlLnBsYWNlbWVudD1MKHQpLGUub2Zmc2V0cy5wb3BwZXI9YyhuKSxlfX0saGlkZTp7b3JkZXI6ODAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSl7aWYoIUYoZS5pbnN0YW5jZS5tb2RpZmllcnMsJ2hpZGUnLCdwcmV2ZW50T3ZlcmZsb3cnKSlyZXR1cm4gZTt2YXIgdD1lLm9mZnNldHMucmVmZXJlbmNlLG89VChlLmluc3RhbmNlLm1vZGlmaWVycyxmdW5jdGlvbihlKXtyZXR1cm4ncHJldmVudE92ZXJmbG93Jz09PWUubmFtZX0pLmJvdW5kYXJpZXM7aWYodC5ib3R0b208by50b3B8fHQubGVmdD5vLnJpZ2h0fHx0LnRvcD5vLmJvdHRvbXx8dC5yaWdodDxvLmxlZnQpe2lmKCEwPT09ZS5oaWRlKXJldHVybiBlO2UuaGlkZT0hMCxlLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXT0nJ31lbHNle2lmKCExPT09ZS5oaWRlKXJldHVybiBlO2UuaGlkZT0hMSxlLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXT0hMX1yZXR1cm4gZX19LGNvbXB1dGVTdHlsZTp7b3JkZXI6ODUwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSx0KXt2YXIgbz10LngsaT10Lnksbj1lLm9mZnNldHMucG9wcGVyLHA9VChlLmluc3RhbmNlLm1vZGlmaWVycyxmdW5jdGlvbihlKXtyZXR1cm4nYXBwbHlTdHlsZSc9PT1lLm5hbWV9KS5ncHVBY2NlbGVyYXRpb247dm9pZCAwIT09cCYmY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO3ZhciBzLGQsYT12b2lkIDA9PT1wP3QuZ3B1QWNjZWxlcmF0aW9uOnAsZj1yKGUuaW5zdGFuY2UucG9wcGVyKSxsPWcoZiksbT17cG9zaXRpb246bi5wb3NpdGlvbn0saD17bGVmdDpWKG4ubGVmdCksdG9wOlYobi50b3ApLGJvdHRvbTpWKG4uYm90dG9tKSxyaWdodDpWKG4ucmlnaHQpfSxjPSdib3R0b20nPT09bz8ndG9wJzonYm90dG9tJyx1PSdyaWdodCc9PT1pPydsZWZ0JzoncmlnaHQnLGI9QigndHJhbnNmb3JtJyk7aWYoZD0nYm90dG9tJz09Yz8tbC5oZWlnaHQraC5ib3R0b206aC50b3Ascz0ncmlnaHQnPT11Py1sLndpZHRoK2gucmlnaHQ6aC5sZWZ0LGEmJmIpbVtiXT0ndHJhbnNsYXRlM2QoJytzKydweCwgJytkKydweCwgMCknLG1bY109MCxtW3VdPTAsbS53aWxsQ2hhbmdlPSd0cmFuc2Zvcm0nO2Vsc2V7dmFyIHk9J2JvdHRvbSc9PWM/LTE6MSx3PSdyaWdodCc9PXU/LTE6MTttW2NdPWQqeSxtW3VdPXMqdyxtLndpbGxDaGFuZ2U9YysnLCAnK3V9dmFyIHY9e1wieC1wbGFjZW1lbnRcIjplLnBsYWNlbWVudH07cmV0dXJuIGUuYXR0cmlidXRlcz1zZSh7fSx2LGUuYXR0cmlidXRlcyksZS5zdHlsZXM9c2Uoe30sbSxlLnN0eWxlcyksZX0sZ3B1QWNjZWxlcmF0aW9uOiEwLHg6J2JvdHRvbScseToncmlnaHQnfSxhcHBseVN0eWxlOntvcmRlcjo5MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlKXtyZXR1cm4gVShlLmluc3RhbmNlLnBvcHBlcixlLnN0eWxlcyksWShlLmluc3RhbmNlLnBvcHBlcixlLmF0dHJpYnV0ZXMpLGUub2Zmc2V0cy5hcnJvdyYmVShlLmFycm93RWxlbWVudCxlLm9mZnNldHMuYXJyb3cpLGV9LG9uTG9hZDpmdW5jdGlvbihlLHQsbyxpLG4pe3ZhciByPXgobix0LGUpLHA9RShvLnBsYWNlbWVudCxyLHQsZSxvLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LG8ubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7cmV0dXJuIHQuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcscCksVSh0LHtwb3NpdGlvbjonYWJzb2x1dGUnfSksb30sZ3B1QWNjZWxlcmF0aW9uOnZvaWQgMH19fSxsZX0pO1xuIl0sIm5hbWVzIjpbImUiLCJ0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIlBvcHBlciIsInRvU3RyaW5nIiwiY2FsbCIsIm5vZGVUeXBlIiwibyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJub2RlTmFtZSIsInBhcmVudE5vZGUiLCJob3N0IiwibiIsImluZGV4T2YiLCJkb2N1bWVudCIsImJvZHkiLCJpIiwiciIsIm92ZXJmbG93IiwicCIsIm92ZXJmbG93WCIsInMiLCJvdmVyZmxvd1kiLCJ0ZXN0Iiwib2Zmc2V0UGFyZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJkIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiYSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJmIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzY3JvbGxpbmdFbGVtZW50IiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0Iiwic3BsaXQiLCJtIiwiXyIsImllIiwiaCIsImhlaWdodCIsIndpZHRoIiwiYyIsInNlIiwiZyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ1IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwiYiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInkiLCJ3IiwidiIsIkUiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwiYXJlYSIsInNvcnQiLCJmaWx0ZXIiLCJ4IiwiTyIsInBhcnNlRmxvYXQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsIkwiLCJyZXBsYWNlIiwiUyIsIlQiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbmQiLCJDIiwiZmluZEluZGV4IiwiTiIsInNsaWNlIiwiZm9yRWFjaCIsImNvbnNvbGUiLCJ3YXJuIiwiZm4iLCJlbmFibGVkIiwib2Zmc2V0cyIsInBvcHBlciIsInJlZmVyZW5jZSIsImsiLCJzdGF0ZSIsImlzRGVzdHJveWVkIiwiaW5zdGFuY2UiLCJzdHlsZXMiLCJhdHRyaWJ1dGVzIiwiZmxpcHBlZCIsInBsYWNlbWVudCIsIm9wdGlvbnMiLCJtb2RpZmllcnMiLCJmbGlwIiwiYm91bmRhcmllc0VsZW1lbnQiLCJwYWRkaW5nIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwb3NpdGlvbiIsImlzQ3JlYXRlZCIsIm9uVXBkYXRlIiwib25DcmVhdGUiLCJXIiwic29tZSIsIm5hbWUiLCJCIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdHlsZSIsIkQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJyZW1vdmVDaGlsZCIsIkgiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInB1c2giLCJQIiwidXBkYXRlQm91bmQiLCJzY3JvbGxQYXJlbnRzIiwic2Nyb2xsRWxlbWVudCIsImV2ZW50c0VuYWJsZWQiLCJBIiwic2NoZWR1bGVVcGRhdGUiLCJNIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkkiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIlIiLCJpc05hTiIsImlzRmluaXRlIiwiVSIsIlkiLCJzZXRBdHRyaWJ1dGUiLCJGIiwib3JkZXIiLCJqIiwiSyIsImFlIiwiY29uY2F0IiwicmV2ZXJzZSIsInEiLCJtYXRjaCIsIkciLCJ0cmltIiwic2VhcmNoIiwicmVkdWNlIiwieiIsIk1hdGgiLCJtaW4iLCJWIiwiZmxvb3IiLCJtYXgiLCJYIiwiUSIsIkoiLCJaIiwiJCIsImVlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidGUiLCJNdXRhdGlvbk9ic2VydmVyIiwib2UiLCJjcmVhdGVFbGVtZW50Iiwib2JzZXJ2ZSIsInNldFRpbWVvdXQiLCJhcHBWZXJzaW9uIiwibmUiLCJUeXBlRXJyb3IiLCJyZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5IiwicGUiLCJ2YWx1ZSIsImFzc2lnbiIsImhhc093blByb3BlcnR5IiwiZGUiLCJmZSIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwibGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJiaW5kIiwiRGVmYXVsdHMiLCJqcXVlcnkiLCJvbkxvYWQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsIlV0aWxzIiwiZ2xvYmFsIiwiUG9wcGVyVXRpbHMiLCJwbGFjZW1lbnRzIiwic2hpZnQiLCJzdGFydCIsImVuZCIsIm9mZnNldCIsInByZXZlbnRPdmVyZmxvdyIsImJvdW5kYXJpZXMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiYXJyb3ciLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFycm93RWxlbWVudCIsInJvdW5kIiwiYmVoYXZpb3IiLCJmbGlwVmFyaWF0aW9ucyIsImlubmVyIiwiaGlkZSIsImNvbXB1dGVTdHlsZSIsImdwdUFjY2VsZXJhdGlvbiIsIndpbGxDaGFuZ2UiLCJhcHBseVN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/core/popper.min.js\n");

/***/ }),

/***/ "./resources/js/plugins/bootstrap-switch.js":
/*!**************************************************!*\
  !*** ./resources/js/plugins/bootstrap-switch.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * bootstrap-switch - Turn checkboxes and radio buttons into toggle switches.\n *\n * @version v3.3.4\n * @homepage https://bttstrp.github.io/bootstrap-switch\n * @author Mattia Larentis <mattia@larentis.eu> (http://larentis.eu)\n * @license Apache-2.0\n */\n(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(this, function (_jquery) {\n  'use strict';\n\n  var _jquery2 = _interopRequireDefault(_jquery);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var $ = _jquery2[\"default\"] || window.jQuery || window.$;\n\n  var BootstrapSwitch = function () {\n    function BootstrapSwitch(element) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, BootstrapSwitch);\n\n      this.$element = $(element);\n      this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, this._getElementOptions(), options);\n      this.prevOptions = {};\n      this.$wrapper = $('<div>', {\n        \"class\": function _class() {\n          var classes = [];\n          classes.push(_this.options.state ? 'on' : 'off');\n\n          if (_this.options.size) {\n            classes.push(_this.options.size);\n          }\n\n          if (_this.options.disabled) {\n            classes.push('disabled');\n          }\n\n          if (_this.options.readonly) {\n            classes.push('readonly');\n          }\n\n          if (_this.options.indeterminate) {\n            classes.push('indeterminate');\n          }\n\n          if (_this.options.inverse) {\n            classes.push('inverse');\n          }\n\n          if (_this.$element.attr('id')) {\n            classes.push('id-' + _this.$element.attr('id'));\n          }\n\n          return classes.map(_this._getClass.bind(_this)).concat([_this.options.baseClass], _this._getClasses(_this.options.wrapperClass)).join(' ');\n        }\n      });\n      this.$container = $('<div>', {\n        \"class\": this._getClass('container')\n      });\n      this.$on = $('<span>', {\n        html: this.options.onText,\n        \"class\": this._getClass('handle-on') + ' ' + this._getClass(this.options.onColor)\n      });\n      this.$off = $('<span>', {\n        html: this.options.offText,\n        \"class\": this._getClass('handle-off') + ' ' + this._getClass(this.options.offColor)\n      });\n      this.$label = $('<span>', {\n        html: this.options.labelText,\n        \"class\": this._getClass('label')\n      });\n      this.$element.on('init.bootstrapSwitch', this.options.onInit.bind(this, element));\n      this.$element.on('switchChange.bootstrapSwitch', function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (_this.options.onSwitchChange.apply(element, args) === false) {\n          if (_this.$element.is(':radio')) {\n            $('[name=\"' + _this.$element.attr('name') + '\"]').trigger('previousState.bootstrapSwitch', true);\n          } else {\n            _this.$element.trigger('previousState.bootstrapSwitch', true);\n          }\n        }\n      });\n      this.$container = this.$element.wrap(this.$container).parent();\n      this.$wrapper = this.$container.wrap(this.$wrapper).parent();\n      this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);\n\n      if (this.options.indeterminate) {\n        this.$element.prop('indeterminate', true);\n      }\n\n      this._init();\n\n      this._elementHandlers();\n\n      this._handleHandlers();\n\n      this._labelHandlers();\n\n      this._formHandler();\n\n      this._externalLabelHandler();\n\n      this.$element.trigger('init.bootstrapSwitch', this.options.state);\n    }\n\n    _createClass(BootstrapSwitch, [{\n      key: 'setPrevOptions',\n      value: function setPrevOptions() {\n        this.prevOptions = _extends({}, this.options);\n      }\n    }, {\n      key: 'state',\n      value: function state(value, skip) {\n        if (typeof value === 'undefined') {\n          return this.options.state;\n        }\n\n        if (this.options.disabled || this.options.readonly || this.options.state && !this.options.radioAllOff && this.$element.is(':radio')) {\n          return this.$element;\n        }\n\n        if (this.$element.is(':radio')) {\n          $('[name=\"' + this.$element.attr('name') + '\"]').trigger('setPreviousOptions.bootstrapSwitch');\n        } else {\n          this.$element.trigger('setPreviousOptions.bootstrapSwitch');\n        }\n\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n        }\n\n        this.$element.prop('checked', Boolean(value)).trigger('change.bootstrapSwitch', skip);\n        return this.$element;\n      }\n    }, {\n      key: 'toggleState',\n      value: function toggleState(skip) {\n        if (this.options.disabled || this.options.readonly) {\n          return this.$element;\n        }\n\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n          return this.state(true);\n        } else {\n          return this.$element.prop('checked', !this.options.state).trigger('change.bootstrapSwitch', skip);\n        }\n      }\n    }, {\n      key: 'size',\n      value: function size(value) {\n        if (typeof value === 'undefined') {\n          return this.options.size;\n        }\n\n        if (this.options.size != null) {\n          this.$wrapper.removeClass(this._getClass(this.options.size));\n        }\n\n        if (value) {\n          this.$wrapper.addClass(this._getClass(value));\n        }\n\n        this._width();\n\n        this._containerPosition();\n\n        this.options.size = value;\n        return this.$element;\n      }\n    }, {\n      key: 'animate',\n      value: function animate(value) {\n        if (typeof value === 'undefined') {\n          return this.options.animate;\n        }\n\n        if (this.options.animate === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleAnimate();\n      }\n    }, {\n      key: 'toggleAnimate',\n      value: function toggleAnimate() {\n        this.options.animate = !this.options.animate;\n        this.$wrapper.toggleClass(this._getClass('animate'));\n        return this.$element;\n      }\n    }, {\n      key: 'disabled',\n      value: function disabled(value) {\n        if (typeof value === 'undefined') {\n          return this.options.disabled;\n        }\n\n        if (this.options.disabled === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleDisabled();\n      }\n    }, {\n      key: 'toggleDisabled',\n      value: function toggleDisabled() {\n        this.options.disabled = !this.options.disabled;\n        this.$element.prop('disabled', this.options.disabled);\n        this.$wrapper.toggleClass(this._getClass('disabled'));\n        return this.$element;\n      }\n    }, {\n      key: 'readonly',\n      value: function readonly(value) {\n        if (typeof value === 'undefined') {\n          return this.options.readonly;\n        }\n\n        if (this.options.readonly === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleReadonly();\n      }\n    }, {\n      key: 'toggleReadonly',\n      value: function toggleReadonly() {\n        this.options.readonly = !this.options.readonly;\n        this.$element.prop('readonly', this.options.readonly);\n        this.$wrapper.toggleClass(this._getClass('readonly'));\n        return this.$element;\n      }\n    }, {\n      key: 'indeterminate',\n      value: function indeterminate(value) {\n        if (typeof value === 'undefined') {\n          return this.options.indeterminate;\n        }\n\n        if (this.options.indeterminate === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleIndeterminate();\n      }\n    }, {\n      key: 'toggleIndeterminate',\n      value: function toggleIndeterminate() {\n        this.options.indeterminate = !this.options.indeterminate;\n        this.$element.prop('indeterminate', this.options.indeterminate);\n        this.$wrapper.toggleClass(this._getClass('indeterminate'));\n\n        this._containerPosition();\n\n        return this.$element;\n      }\n    }, {\n      key: 'inverse',\n      value: function inverse(value) {\n        if (typeof value === 'undefined') {\n          return this.options.inverse;\n        }\n\n        if (this.options.inverse === Boolean(value)) {\n          return this.$element;\n        }\n\n        return this.toggleInverse();\n      }\n    }, {\n      key: 'toggleInverse',\n      value: function toggleInverse() {\n        this.$wrapper.toggleClass(this._getClass('inverse'));\n        var $on = this.$on.clone(true);\n        var $off = this.$off.clone(true);\n        this.$on.replaceWith($off);\n        this.$off.replaceWith($on);\n        this.$on = $off;\n        this.$off = $on;\n        this.options.inverse = !this.options.inverse;\n        return this.$element;\n      }\n    }, {\n      key: 'onColor',\n      value: function onColor(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onColor;\n        }\n\n        if (this.options.onColor) {\n          this.$on.removeClass(this._getClass(this.options.onColor));\n        }\n\n        this.$on.addClass(this._getClass(value));\n        this.options.onColor = value;\n        return this.$element;\n      }\n    }, {\n      key: 'offColor',\n      value: function offColor(value) {\n        if (typeof value === 'undefined') {\n          return this.options.offColor;\n        }\n\n        if (this.options.offColor) {\n          this.$off.removeClass(this._getClass(this.options.offColor));\n        }\n\n        this.$off.addClass(this._getClass(value));\n        this.options.offColor = value;\n        return this.$element;\n      }\n    }, {\n      key: 'onText',\n      value: function onText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onText;\n        }\n\n        this.$on.html(value);\n\n        this._width();\n\n        this._containerPosition();\n\n        this.options.onText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'offText',\n      value: function offText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.offText;\n        }\n\n        this.$off.html(value);\n\n        this._width();\n\n        this._containerPosition();\n\n        this.options.offText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'labelText',\n      value: function labelText(value) {\n        if (typeof value === 'undefined') {\n          return this.options.labelText;\n        }\n\n        this.$label.html(value);\n\n        this._width();\n\n        this.options.labelText = value;\n        return this.$element;\n      }\n    }, {\n      key: 'handleWidth',\n      value: function handleWidth(value) {\n        if (typeof value === 'undefined') {\n          return this.options.handleWidth;\n        }\n\n        this.options.handleWidth = value;\n\n        this._width();\n\n        this._containerPosition();\n\n        return this.$element;\n      }\n    }, {\n      key: 'labelWidth',\n      value: function labelWidth(value) {\n        if (typeof value === 'undefined') {\n          return this.options.labelWidth;\n        }\n\n        this.options.labelWidth = value;\n\n        this._width();\n\n        this._containerPosition();\n\n        return this.$element;\n      }\n    }, {\n      key: 'baseClass',\n      value: function baseClass(value) {\n        return this.options.baseClass;\n      }\n    }, {\n      key: 'wrapperClass',\n      value: function wrapperClass(value) {\n        if (typeof value === 'undefined') {\n          return this.options.wrapperClass;\n        }\n\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.wrapperClass;\n        }\n\n        this.$wrapper.removeClass(this._getClasses(this.options.wrapperClass).join(' '));\n        this.$wrapper.addClass(this._getClasses(value).join(' '));\n        this.options.wrapperClass = value;\n        return this.$element;\n      }\n    }, {\n      key: 'radioAllOff',\n      value: function radioAllOff(value) {\n        if (typeof value === 'undefined') {\n          return this.options.radioAllOff;\n        }\n\n        var val = Boolean(value);\n\n        if (this.options.radioAllOff === val) {\n          return this.$element;\n        }\n\n        this.options.radioAllOff = val;\n        return this.$element;\n      }\n    }, {\n      key: 'onInit',\n      value: function onInit(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onInit;\n        }\n\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.onInit;\n        }\n\n        this.options.onInit = value;\n        return this.$element;\n      }\n    }, {\n      key: 'onSwitchChange',\n      value: function onSwitchChange(value) {\n        if (typeof value === 'undefined') {\n          return this.options.onSwitchChange;\n        }\n\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.onSwitchChange;\n        }\n\n        this.options.onSwitchChange = value;\n        return this.$element;\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var $form = this.$element.closest('form');\n\n        if ($form.length) {\n          $form.off('reset.bootstrapSwitch').removeData('bootstrap-switch');\n        }\n\n        this.$container.children().not(this.$element).remove();\n        this.$element.unwrap().unwrap().off('.bootstrapSwitch').removeData('bootstrap-switch');\n        return this.$element;\n      }\n    }, {\n      key: '_getElementOptions',\n      value: function _getElementOptions() {\n        return {\n          state: this.$element.is(':checked'),\n          size: this.$element.data('size'),\n          animate: this.$element.data('animate'),\n          disabled: this.$element.is(':disabled'),\n          readonly: this.$element.is('[readonly]'),\n          indeterminate: this.$element.data('indeterminate'),\n          inverse: this.$element.data('inverse'),\n          radioAllOff: this.$element.data('radio-all-off'),\n          onColor: this.$element.data('on-color'),\n          offColor: this.$element.data('off-color'),\n          onText: this.$element.data('on-text'),\n          offText: this.$element.data('off-text'),\n          labelText: this.$element.data('label-text'),\n          handleWidth: this.$element.data('handle-width'),\n          labelWidth: this.$element.data('label-width'),\n          baseClass: this.$element.data('base-class'),\n          wrapperClass: this.$element.data('wrapper-class')\n        };\n      }\n    }, {\n      key: '_width',\n      value: function _width() {\n        var _this2 = this;\n\n        var $handles = this.$on.add(this.$off).add(this.$label).css('width', '');\n        var handleWidth = this.options.handleWidth === 'auto' ? Math.round(Math.max(this.$on.width(), this.$off.width())) : this.options.handleWidth;\n        $handles.width(handleWidth);\n        this.$label.width(function (index, width) {\n          if (_this2.options.labelWidth !== 'auto') {\n            return _this2.options.labelWidth;\n          }\n\n          if (width < handleWidth) {\n            return handleWidth;\n          }\n\n          return width;\n        });\n        this._handleWidth = this.$on.outerWidth();\n        this._labelWidth = this.$label.outerWidth();\n        this.$container.width(this._handleWidth * 2 + this._labelWidth);\n        return this.$wrapper.width(this._handleWidth + this._labelWidth);\n      }\n    }, {\n      key: '_containerPosition',\n      value: function _containerPosition() {\n        var _this3 = this;\n\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.state;\n        var callback = arguments[1];\n        this.$container.css('margin-left', function () {\n          var values = [0, '-' + _this3._handleWidth + 'px'];\n\n          if (_this3.options.indeterminate) {\n            return '-' + _this3._handleWidth / 2 + 'px';\n          }\n\n          if (state) {\n            if (_this3.options.inverse) {\n              return values[1];\n            } else {\n              return values[0];\n            }\n          } else {\n            if (_this3.options.inverse) {\n              return values[0];\n            } else {\n              return values[1];\n            }\n          }\n        });\n      }\n    }, {\n      key: '_init',\n      value: function _init() {\n        var _this4 = this;\n\n        var init = function init() {\n          _this4.setPrevOptions();\n\n          _this4._width();\n\n          _this4._containerPosition();\n\n          setTimeout(function () {\n            if (_this4.options.animate) {\n              return _this4.$wrapper.addClass(_this4._getClass('animate'));\n            }\n          }, 50);\n        };\n\n        if (this.$wrapper.is(':visible')) {\n          init();\n          return;\n        }\n\n        var initInterval = window.setInterval(function () {\n          if (_this4.$wrapper.is(':visible')) {\n            init();\n            return window.clearInterval(initInterval);\n          }\n        }, 50);\n      }\n    }, {\n      key: '_elementHandlers',\n      value: function _elementHandlers() {\n        var _this5 = this;\n\n        return this.$element.on({\n          'setPreviousOptions.bootstrapSwitch': this.setPrevOptions.bind(this),\n          'previousState.bootstrapSwitch': function previousStateBootstrapSwitch() {\n            _this5.options = _this5.prevOptions;\n\n            if (_this5.options.indeterminate) {\n              _this5.$wrapper.addClass(_this5._getClass('indeterminate'));\n            }\n\n            _this5.$element.prop('checked', _this5.options.state).trigger('change.bootstrapSwitch', true);\n          },\n          'change.bootstrapSwitch': function changeBootstrapSwitch(event, skip) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            var state = _this5.$element.is(':checked');\n\n            _this5._containerPosition(state);\n\n            if (state === _this5.options.state) {\n              return;\n            }\n\n            _this5.options.state = state;\n\n            _this5.$wrapper.toggleClass(_this5._getClass('off')).toggleClass(_this5._getClass('on'));\n\n            if (!skip) {\n              if (_this5.$element.is(':radio')) {\n                $('[name=\"' + _this5.$element.attr('name') + '\"]').not(_this5.$element).prop('checked', false).trigger('change.bootstrapSwitch', true);\n              }\n\n              _this5.$element.trigger('switchChange.bootstrapSwitch', [state]);\n            }\n          },\n          'focus.bootstrapSwitch': function focusBootstrapSwitch(event) {\n            event.preventDefault();\n\n            _this5.$wrapper.addClass(_this5._getClass('focused'));\n          },\n          'blur.bootstrapSwitch': function blurBootstrapSwitch(event) {\n            event.preventDefault();\n\n            _this5.$wrapper.removeClass(_this5._getClass('focused'));\n          },\n          'keydown.bootstrapSwitch': function keydownBootstrapSwitch(event) {\n            if (!event.which || _this5.options.disabled || _this5.options.readonly) {\n              return;\n            }\n\n            if (event.which === 37 || event.which === 39) {\n              event.preventDefault();\n              event.stopImmediatePropagation();\n\n              _this5.state(event.which === 39);\n            }\n          }\n        });\n      }\n    }, {\n      key: '_handleHandlers',\n      value: function _handleHandlers() {\n        var _this6 = this;\n\n        this.$on.on('click.bootstrapSwitch', function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _this6.state(false);\n\n          return _this6.$element.trigger('focus.bootstrapSwitch');\n        });\n        return this.$off.on('click.bootstrapSwitch', function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _this6.state(true);\n\n          return _this6.$element.trigger('focus.bootstrapSwitch');\n        });\n      }\n    }, {\n      key: '_labelHandlers',\n      value: function _labelHandlers() {\n        var _this7 = this;\n\n        var handlers = {\n          click: function click(event) {\n            event.stopPropagation();\n          },\n          'mousedown.bootstrapSwitch touchstart.bootstrapSwitch': function mousedownBootstrapSwitchTouchstartBootstrapSwitch(event) {\n            if (_this7._dragStart || _this7.options.disabled || _this7.options.readonly) {\n              return;\n            }\n\n            event.preventDefault();\n            event.stopPropagation();\n            _this7._dragStart = (event.pageX || event.originalEvent.touches[0].pageX) - parseInt(_this7.$container.css('margin-left'), 10);\n\n            if (_this7.options.animate) {\n              _this7.$wrapper.removeClass(_this7._getClass('animate'));\n            }\n\n            _this7.$element.trigger('focus.bootstrapSwitch');\n          },\n          'mousemove.bootstrapSwitch touchmove.bootstrapSwitch': function mousemoveBootstrapSwitchTouchmoveBootstrapSwitch(event) {\n            if (_this7._dragStart == null) {\n              return;\n            }\n\n            var difference = (event.pageX || event.originalEvent.touches[0].pageX) - _this7._dragStart;\n            event.preventDefault();\n\n            if (difference < -_this7._handleWidth || difference > 0) {\n              return;\n            }\n\n            _this7._dragEnd = difference;\n\n            _this7.$container.css('margin-left', _this7._dragEnd + 'px');\n          },\n          'mouseup.bootstrapSwitch touchend.bootstrapSwitch': function mouseupBootstrapSwitchTouchendBootstrapSwitch(event) {\n            if (!_this7._dragStart) {\n              return;\n            }\n\n            event.preventDefault();\n\n            if (_this7.options.animate) {\n              _this7.$wrapper.addClass(_this7._getClass('animate'));\n            }\n\n            if (_this7._dragEnd) {\n              var state = _this7._dragEnd > -(_this7._handleWidth / 2);\n              _this7._dragEnd = false;\n\n              _this7.state(_this7.options.inverse ? !state : state);\n            } else {\n              _this7.state(!_this7.options.state);\n            }\n\n            _this7._dragStart = false;\n          },\n          'mouseleave.bootstrapSwitch': function mouseleaveBootstrapSwitch() {\n            _this7.$label.trigger('mouseup.bootstrapSwitch');\n          }\n        };\n        this.$label.on(handlers);\n      }\n    }, {\n      key: '_externalLabelHandler',\n      value: function _externalLabelHandler() {\n        var _this8 = this;\n\n        var $externalLabel = this.$element.closest('label');\n        $externalLabel.on('click', function (event) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n\n          if (event.target === $externalLabel[0]) {\n            _this8.toggleState();\n          }\n        });\n      }\n    }, {\n      key: '_formHandler',\n      value: function _formHandler() {\n        var $form = this.$element.closest('form');\n\n        if ($form.data('bootstrap-switch')) {\n          return;\n        }\n\n        $form.on('reset.bootstrapSwitch', function () {\n          window.setTimeout(function () {\n            $form.find('input').filter(function () {\n              return $(this).data('bootstrap-switch');\n            }).each(function () {\n              return $(this).bootstrapSwitch('state', this.checked);\n            });\n          }, 1);\n        }).data('bootstrap-switch', true);\n      }\n    }, {\n      key: '_getClass',\n      value: function _getClass(name) {\n        return this.options.baseClass + '-' + name;\n      }\n    }, {\n      key: '_getClasses',\n      value: function _getClasses(classes) {\n        if (!$.isArray(classes)) {\n          return [this._getClass(classes)];\n        }\n\n        return classes.map(this._getClass.bind(this));\n      }\n    }]);\n\n    return BootstrapSwitch;\n  }();\n\n  $.fn.bootstrapSwitch = function (option) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    function reducer(ret, next) {\n      var $this = $(next);\n      var existingData = $this.data('bootstrap-switch');\n      var data = existingData || new BootstrapSwitch(next, option);\n\n      if (!existingData) {\n        $this.data('bootstrap-switch', data);\n      }\n\n      if (typeof option === 'string') {\n        return data[option].apply(data, args);\n      }\n\n      return ret;\n    }\n\n    return Array.prototype.reduce.call(this, reducer, this);\n  };\n\n  $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;\n  $.fn.bootstrapSwitch.defaults = {\n    state: true,\n    size: null,\n    animate: true,\n    disabled: false,\n    readonly: false,\n    indeterminate: false,\n    inverse: false,\n    radioAllOff: false,\n    onColor: 'primary',\n    offColor: 'default',\n    onText: 'ON',\n    offText: 'OFF',\n    labelText: '&nbsp',\n    handleWidth: 'auto',\n    labelWidth: 'auto',\n    baseClass: 'bootstrap-switch',\n    wrapperClass: 'wrapper',\n    onInit: function onInit() {},\n    onSwitchChange: function onSwitchChange() {}\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/bootstrap-switch.js\n");

/***/ }),

/***/ "./resources/js/plugins/choices.min.js":
/*!*********************************************!*\
  !*** ./resources/js/plugins/choices.min.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! choices.js v7.0.0 | (c) 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"object\" == ( false ? 0 : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(window, function () {\n  return function (e) {\n    var t = {};\n\n    function i(n) {\n      if (t[n]) return t[n].exports;\n      var o = t[n] = {\n        i: n,\n        l: !1,\n        exports: {}\n      };\n      return e[n].call(o.exports, o, o.exports, i), o.l = !0, o.exports;\n    }\n\n    return i.m = e, i.c = t, i.d = function (e, t, n) {\n      i.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: n\n      });\n    }, i.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, i.t = function (e, t) {\n      if (1 & t && (e = i(e)), 8 & t) return e;\n      if (4 & t && \"object\" == _typeof(e) && e && e.__esModule) return e;\n      var n = Object.create(null);\n      if (i.r(n), Object.defineProperty(n, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & t && \"string\" != typeof e) for (var o in e) {\n        i.d(n, o, function (t) {\n          return e[t];\n        }.bind(null, o));\n      }\n      return n;\n    }, i.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e[\"default\"];\n      } : function () {\n        return e;\n      };\n      return i.d(t, \"a\", t), t;\n    }, i.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, i.p = \"/public/assets/scripts/\", i(i.s = 9);\n  }([function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.diff = t.cloneObject = t.existsInArray = t.isIE11 = t.fetchFromObject = t.getWindowHeight = t.dispatchEvent = t.sortByScore = t.sortByAlpha = t.calcWidthOfInput = t.strToEl = t.sanitise = t.isScrolledIntoView = t.getAdjacentEl = t.findAncestorByAttrName = t.wrap = t.isElement = t.isType = t.getType = t.generateId = t.generateChars = t.getRandomNumber = void 0;\n\n    var n = function n(e, t) {\n      return Math.floor(Math.random() * (t - e) + e);\n    };\n\n    t.getRandomNumber = n;\n\n    var o = function o(e) {\n      for (var t = \"\", i = 0; i < e; i++) {\n        t += n(0, 36).toString(36);\n      }\n\n      return t;\n    };\n\n    t.generateChars = o;\n\n    t.generateId = function (e, t) {\n      var i = e.id || e.name && \"\".concat(e.name, \"-\").concat(o(2)) || o(4);\n      return i = i.replace(/(:|\\.|\\[|\\]|,)/g, \"\"), i = \"\".concat(t, \"-\").concat(i);\n    };\n\n    var r = function r(e) {\n      return Object.prototype.toString.call(e).slice(8, -1);\n    };\n\n    t.getType = r;\n\n    var s = function s(e, t) {\n      return null != t && r(t) === e;\n    };\n\n    t.isType = s;\n\n    t.isElement = function (e) {\n      return e instanceof Element;\n    };\n\n    t.wrap = function (e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document.createElement(\"div\");\n      return e.nextSibling ? e.parentNode.insertBefore(t, e.nextSibling) : e.parentNode.appendChild(t), t.appendChild(e);\n    };\n\n    t.findAncestorByAttrName = function (e, t) {\n      for (var i = e; i;) {\n        if (i.hasAttribute(t)) return i;\n        i = i.parentElement;\n      }\n\n      return null;\n    };\n\n    t.getAdjacentEl = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;\n\n      if (e && t) {\n        var n = e.parentNode.parentNode,\n            o = Array.from(n.querySelectorAll(t)),\n            r = o.indexOf(e);\n        return o[r + (i > 0 ? 1 : -1)];\n      }\n    };\n\n    t.isScrolledIntoView = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;\n      if (e) return i > 0 ? t.scrollTop + t.offsetHeight >= e.offsetTop + e.offsetHeight : e.offsetTop >= t.scrollTop;\n    };\n\n    var a = function a(e) {\n      return s(\"String\", e) ? e.replace(/&/g, \"&amp;\").replace(/>/g, \"&rt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\") : e;\n    };\n\n    t.sanitise = a;\n    var c,\n        l = (c = document.createElement(\"div\"), function (e) {\n      var t = e.trim();\n      c.innerHTML = t;\n\n      for (var i = c.children[0]; c.firstChild;) {\n        c.removeChild(c.firstChild);\n      }\n\n      return i;\n    });\n    t.strToEl = l;\n\n    t.calcWidthOfInput = function (e, t) {\n      var i = e.value || e.placeholder,\n          n = e.offsetWidth;\n\n      if (i) {\n        var o = l(\"<span>\".concat(a(i), \"</span>\"));\n\n        if (o.style.position = \"absolute\", o.style.padding = \"0\", o.style.top = \"-9999px\", o.style.left = \"-9999px\", o.style.width = \"auto\", o.style.whiteSpace = \"pre\", document.body.contains(e) && window.getComputedStyle) {\n          var r = window.getComputedStyle(e);\n          r && (o.style.fontSize = r.fontSize, o.style.fontFamily = r.fontFamily, o.style.fontWeight = r.fontWeight, o.style.fontStyle = r.fontStyle, o.style.letterSpacing = r.letterSpacing, o.style.textTransform = r.textTransform, o.style.padding = r.padding);\n        }\n\n        document.body.appendChild(o), requestAnimationFrame(function () {\n          i && o.offsetWidth !== e.offsetWidth && (n = o.offsetWidth + 4), document.body.removeChild(o), t.call(void 0, \"\".concat(n, \"px\"));\n        });\n      } else t.call(void 0, \"\".concat(n, \"px\"));\n    };\n\n    t.sortByAlpha = function (e, t) {\n      var i = \"\".concat(e.label || e.value).toLowerCase(),\n          n = \"\".concat(t.label || t.value).toLowerCase();\n      return i < n ? -1 : i > n ? 1 : 0;\n    };\n\n    t.sortByScore = function (e, t) {\n      return e.score - t.score;\n    };\n\n    t.dispatchEvent = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          n = new CustomEvent(t, {\n        detail: i,\n        bubbles: !0,\n        cancelable: !0\n      });\n      return e.dispatchEvent(n);\n    };\n\n    t.getWindowHeight = function () {\n      var e = document.body,\n          t = document.documentElement;\n      return Math.max(e.scrollHeight, e.offsetHeight, t.clientHeight, t.scrollHeight, t.offsetHeight);\n    };\n\n    t.fetchFromObject = function e(t, i) {\n      var n = i.indexOf(\".\");\n      return n > -1 ? e(t[i.substring(0, n)], i.substr(n + 1)) : t[i];\n    };\n\n    t.isIE11 = function () {\n      return !(!navigator.userAgent.match(/Trident/) || !navigator.userAgent.match(/rv[ :]11/));\n    };\n\n    t.existsInArray = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"value\";\n      return e.some(function (e) {\n        return s(\"String\", t) ? e[i] === t.trim() : e[i] === t;\n      });\n    };\n\n    t.cloneObject = function (e) {\n      return JSON.parse(JSON.stringify(e));\n    };\n\n    t.diff = function (e, t) {\n      var i = Object.keys(e).sort(),\n          n = Object.keys(t).sort();\n      return i.filter(function (e) {\n        return n.indexOf(e) < 0;\n      });\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.SCROLLING_SPEED = t.KEY_CODES = t.ACTION_TYPES = t.EVENTS = t.DEFAULT_CONFIG = t.DEFAULT_CLASSNAMES = void 0;\n    var n = i(0),\n        o = {\n      containerOuter: \"choices\",\n      containerInner: \"choices__inner\",\n      input: \"choices__input\",\n      inputCloned: \"choices__input--cloned\",\n      list: \"choices__list\",\n      listItems: \"choices__list--multiple\",\n      listSingle: \"choices__list--single\",\n      listDropdown: \"choices__list--dropdown\",\n      item: \"choices__item\",\n      itemSelectable: \"choices__item--selectable\",\n      itemDisabled: \"choices__item--disabled\",\n      itemChoice: \"choices__item--choice\",\n      placeholder: \"choices__placeholder\",\n      group: \"choices__group\",\n      groupHeading: \"choices__heading\",\n      button: \"choices__button\",\n      activeState: \"is-active\",\n      focusState: \"is-focused\",\n      openState: \"is-open\",\n      disabledState: \"is-disabled\",\n      highlightedState: \"is-highlighted\",\n      hiddenState: \"is-hidden\",\n      flippedState: \"is-flipped\",\n      loadingState: \"is-loading\",\n      noResults: \"has-no-results\",\n      noChoices: \"has-no-choices\"\n    };\n    t.DEFAULT_CLASSNAMES = o;\n    var r = {\n      items: [],\n      choices: [],\n      silent: !1,\n      renderChoiceLimit: -1,\n      maxItemCount: -1,\n      addItems: !0,\n      addItemFilterFn: null,\n      removeItems: !0,\n      removeItemButton: !1,\n      editItems: !1,\n      duplicateItemsAllowed: !0,\n      delimiter: \",\",\n      paste: !0,\n      searchEnabled: !0,\n      searchChoices: !0,\n      searchFloor: 1,\n      searchResultLimit: 4,\n      searchFields: [\"label\", \"value\"],\n      position: \"auto\",\n      resetScrollPosition: !0,\n      shouldSort: !0,\n      shouldSortItems: !1,\n      sortFn: n.sortByAlpha,\n      placeholder: !0,\n      placeholderValue: null,\n      searchPlaceholderValue: null,\n      prependValue: null,\n      appendValue: null,\n      renderSelectedChoices: \"auto\",\n      loadingText: \"Loading...\",\n      noResultsText: \"No results found\",\n      noChoicesText: \"No choices to choose from\",\n      itemSelectText: \"Press to select\",\n      uniqueItemText: \"Only unique values can be added\",\n      customAddItemText: \"Only values matching specific conditions can be added\",\n      addItemText: function addItemText(e) {\n        return 'Press Enter to add <b>\"'.concat((0, n.sanitise)(e), '\"</b>');\n      },\n      maxItemText: function maxItemText(e) {\n        return \"Only \".concat(e, \" values can be added\");\n      },\n      itemComparer: function itemComparer(e, t) {\n        return e === t;\n      },\n      fuseOptions: {\n        includeScore: !0\n      },\n      callbackOnInit: null,\n      callbackOnCreateTemplates: null,\n      classNames: o\n    };\n    t.DEFAULT_CONFIG = r;\n    t.EVENTS = {\n      showDropdown: \"showDropdown\",\n      hideDropdown: \"hideDropdown\",\n      change: \"change\",\n      choice: \"choice\",\n      search: \"search\",\n      addItem: \"addItem\",\n      removeItem: \"removeItem\",\n      highlightItem: \"highlightItem\",\n      highlightChoice: \"highlightChoice\"\n    };\n    t.ACTION_TYPES = {\n      ADD_CHOICE: \"ADD_CHOICE\",\n      FILTER_CHOICES: \"FILTER_CHOICES\",\n      ACTIVATE_CHOICES: \"ACTIVATE_CHOICES\",\n      CLEAR_CHOICES: \"CLEAR_CHOICES\",\n      ADD_GROUP: \"ADD_GROUP\",\n      ADD_ITEM: \"ADD_ITEM\",\n      REMOVE_ITEM: \"REMOVE_ITEM\",\n      HIGHLIGHT_ITEM: \"HIGHLIGHT_ITEM\",\n      CLEAR_ALL: \"CLEAR_ALL\"\n    };\n    t.KEY_CODES = {\n      BACK_KEY: 46,\n      DELETE_KEY: 8,\n      ENTER_KEY: 13,\n      A_KEY: 65,\n      ESC_KEY: 27,\n      UP_KEY: 38,\n      DOWN_KEY: 40,\n      PAGE_UP_KEY: 33,\n      PAGE_DOWN_KEY: 34\n    };\n    t.SCROLLING_SPEED = 4;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    (function (e, n) {\n      var o,\n          r = i(7);\n      o = \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : void 0 !== e ? e : n;\n      var s = Object(r.a)(o);\n      t.a = s;\n    }).call(this, i(3), i(14)(e));\n  }, function (e, t) {\n    var i;\n\n    i = function () {\n      return this;\n    }();\n\n    try {\n      i = i || new Function(\"return this\")();\n    } catch (e) {\n      \"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && (i = window);\n    }\n\n    e.exports = i;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = i(0);\n\n    function o(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var r = function () {\n      function e(t) {\n        var i = t.element,\n            o = t.classNames;\n        if (function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), Object.assign(this, {\n          element: i,\n          classNames: o\n        }), !(0, n.isElement)(i)) throw new TypeError(\"Invalid element passed\");\n        this.isDisabled = !1;\n      }\n\n      var t, i, r;\n      return t = e, (i = [{\n        key: \"conceal\",\n        value: function value() {\n          this.element.classList.add(this.classNames.input), this.element.classList.add(this.classNames.hiddenState), this.element.tabIndex = \"-1\";\n          var e = this.element.getAttribute(\"style\");\n          e && this.element.setAttribute(\"data-choice-orig-style\", e), this.element.setAttribute(\"aria-hidden\", \"true\"), this.element.setAttribute(\"data-choice\", \"active\");\n        }\n      }, {\n        key: \"reveal\",\n        value: function value() {\n          this.element.classList.remove(this.classNames.input), this.element.classList.remove(this.classNames.hiddenState), this.element.removeAttribute(\"tabindex\");\n          var e = this.element.getAttribute(\"data-choice-orig-style\");\n          e ? (this.element.removeAttribute(\"data-choice-orig-style\"), this.element.setAttribute(\"style\", e)) : this.element.removeAttribute(\"style\"), this.element.removeAttribute(\"aria-hidden\"), this.element.removeAttribute(\"data-choice\"), this.element.value = this.element.value;\n        }\n      }, {\n        key: \"enable\",\n        value: function value() {\n          this.element.removeAttribute(\"disabled\"), this.element.disabled = !1, this.isDisabled = !1;\n        }\n      }, {\n        key: \"disable\",\n        value: function value() {\n          this.element.setAttribute(\"disabled\", \"\"), this.element.disabled = !0, this.isDisabled = !0;\n        }\n      }, {\n        key: \"triggerEvent\",\n        value: function value(e, t) {\n          (0, n.dispatchEvent)(this.element, e, t);\n        }\n      }, {\n        key: \"value\",\n        get: function get() {\n          return this.element.value;\n        }\n      }]) && o(t.prototype, i), r && o(t, r), e;\n    }();\n\n    t[\"default\"] = r;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = t.TEMPLATES = void 0;\n    var n,\n        o = (n = i(27)) && n.__esModule ? n : {\n      \"default\": n\n    },\n        r = i(0);\n\n    function s(e, t, i) {\n      return t in e ? Object.defineProperty(e, t, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }) : e[t] = i, e;\n    }\n\n    var a = {\n      containerOuter: function containerOuter(e, t, i, n, o, s) {\n        var a = n ? 'tabindex=\"0\"' : \"\",\n            c = i ? 'role=\"listbox\"' : \"\",\n            l = \"\";\n        return i && o && (c = 'role=\"combobox\"', l = 'aria-autocomplete=\"list\"'), (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(e.containerOuter, '\"\\n        data-type=\"').concat(s, '\"\\n        ').concat(c, \"\\n        \").concat(a, \"\\n        \").concat(l, '\\n        aria-haspopup=\"true\"\\n        aria-expanded=\"false\"\\n        dir=\"').concat(t, '\"\\n        >\\n      </div>\\n    '));\n      },\n      containerInner: function containerInner(e) {\n        return (0, r.strToEl)('\\n      <div class=\"'.concat(e.containerInner, '\"></div>\\n    '));\n      },\n      itemList: function itemList(e, t) {\n        var i,\n            n = (0, o[\"default\"])(e.list, (s(i = {}, e.listSingle, t), s(i, e.listItems, !t), i));\n        return (0, r.strToEl)('\\n      <div class=\"'.concat(n, '\"></div>\\n    '));\n      },\n      placeholder: function placeholder(e, t) {\n        return (0, r.strToEl)('\\n      <div class=\"'.concat(e.placeholder, '\">\\n        ').concat(t, \"\\n      </div>\\n    \"));\n      },\n      item: function item(e, t, i) {\n        var n,\n            a,\n            c = t.active ? 'aria-selected=\"true\"' : \"\",\n            l = t.disabled ? 'aria-disabled=\"true\"' : \"\",\n            u = (0, o[\"default\"])(e.item, (s(n = {}, e.highlightedState, t.highlighted), s(n, e.itemSelectable, !t.highlighted), s(n, e.placeholder, t.placeholder), n));\n        return i ? (u = (0, o[\"default\"])(e.item, (s(a = {}, e.highlightedState, t.highlighted), s(a, e.itemSelectable, !t.disabled), s(a, e.placeholder, t.placeholder), a)), (0, r.strToEl)('\\n        <div\\n          class=\"'.concat(u, '\"\\n          data-item\\n          data-id=\"').concat(t.id, '\"\\n          data-value=\"').concat(t.value, \"\\\"\\n          data-custom-properties='\").concat(t.customProperties, \"'\\n          data-deletable\\n          \").concat(c, \"\\n          \").concat(l, \"\\n          >\\n          \").concat(t.label, '\\x3c!--\\n       --\\x3e<button\\n            type=\"button\"\\n            class=\"').concat(e.button, '\"\\n            data-button\\n            aria-label=\"Remove item: \\'').concat(t.value, \"'\\\"\\n            >\\n            Remove item\\n          </button>\\n        </div>\\n      \"))) : (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(u, '\"\\n        data-item\\n        data-id=\"').concat(t.id, '\"\\n        data-value=\"').concat(t.value, '\"\\n        ').concat(c, \"\\n        \").concat(l, \"\\n        >\\n        \").concat(t.label, \"\\n      </div>\\n    \"));\n      },\n      choiceList: function choiceList(e, t) {\n        var i = t ? \"\" : 'aria-multiselectable=\"true\"';\n        return (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(e.list, '\"\\n        dir=\"ltr\"\\n        role=\"listbox\"\\n        ').concat(i, \"\\n        >\\n      </div>\\n    \"));\n      },\n      choiceGroup: function choiceGroup(e, t) {\n        var i = t.disabled ? 'aria-disabled=\"true\"' : \"\",\n            n = (0, o[\"default\"])(e.group, s({}, e.itemDisabled, t.disabled));\n        return (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(n, '\"\\n        data-group\\n        data-id=\"').concat(t.id, '\"\\n        data-value=\"').concat(t.value, '\"\\n        role=\"group\"\\n        ').concat(i, '\\n        >\\n        <div class=\"').concat(e.groupHeading, '\">').concat(t.value, \"</div>\\n      </div>\\n    \"));\n      },\n      choice: function choice(e, t, i) {\n        var n,\n            a = t.groupId > 0 ? 'role=\"treeitem\"' : 'role=\"option\"',\n            c = (0, o[\"default\"])(e.item, e.itemChoice, (s(n = {}, e.itemDisabled, t.disabled), s(n, e.itemSelectable, !t.disabled), s(n, e.placeholder, t.placeholder), n));\n        return (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(c, '\"\\n        data-select-text=\"').concat(i, '\"\\n        data-choice\\n        data-id=\"').concat(t.id, '\"\\n        data-value=\"').concat(t.value, '\"\\n        ').concat(t.disabled ? 'data-choice-disabled aria-disabled=\"true\"' : \"data-choice-selectable\", '\\n        id=\"').concat(t.elementId, '\"\\n        ').concat(a, \"\\n        >\\n        \").concat(t.label, \"\\n      </div>\\n    \"));\n      },\n      input: function input(e) {\n        var t = (0, o[\"default\"])(e.input, e.inputCloned);\n        return (0, r.strToEl)('\\n      <input\\n        type=\"text\"\\n        class=\"'.concat(t, '\"\\n        autocomplete=\"off\"\\n        autocapitalize=\"off\"\\n        spellcheck=\"false\"\\n        role=\"textbox\"\\n        aria-autocomplete=\"list\"\\n        >\\n    '));\n      },\n      dropdown: function dropdown(e) {\n        var t = (0, o[\"default\"])(e.list, e.listDropdown);\n        return (0, r.strToEl)('\\n      <div\\n        class=\"'.concat(t, '\"\\n        aria-expanded=\"false\"\\n        >\\n      </div>\\n    '));\n      },\n      notice: function notice(e, t) {\n        var i,\n            n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"\",\n            a = (0, o[\"default\"])(e.item, e.itemChoice, (s(i = {}, e.noResults, \"no-results\" === n), s(i, e.noChoices, \"no-choices\" === n), i));\n        return (0, r.strToEl)('\\n      <div class=\"'.concat(a, '\">\\n        ').concat(t, \"\\n      </div>\\n    \"));\n      },\n      option: function option(e) {\n        return (0, r.strToEl)('\\n      <option value=\"'.concat(e.value, '\" ').concat(e.active ? \"selected\" : \"\", \" \").concat(e.disabled ? \"disabled\" : \"\", \" \").concat(e.customProperties ? \"data-custom-properties=\".concat(e.customProperties) : \"\", \">\").concat(e.label, \"</option>\\n    \"));\n      }\n    };\n    t.TEMPLATES = a;\n    var c = a;\n    t[\"default\"] = c;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    i.r(t);\n    var n = i(8),\n        o = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n        r = (n.a || o || Function(\"return this\")()).Symbol,\n        s = Object.prototype,\n        a = s.hasOwnProperty,\n        c = s.toString,\n        l = r ? r.toStringTag : void 0;\n\n    var u = function u(e) {\n      var t = a.call(e, l),\n          i = e[l];\n\n      try {\n        e[l] = void 0;\n        var n = !0;\n      } catch (e) {}\n\n      var o = c.call(e);\n      return n && (t ? e[l] = i : delete e[l]), o;\n    },\n        h = Object.prototype.toString;\n\n    var d = function d(e) {\n      return h.call(e);\n    },\n        f = \"[object Null]\",\n        p = \"[object Undefined]\",\n        v = r ? r.toStringTag : void 0;\n\n    var m = function m(e) {\n      return null == e ? void 0 === e ? p : f : v && v in Object(e) ? u(e) : d(e);\n    };\n\n    var g = function (e, t) {\n      return function (i) {\n        return e(t(i));\n      };\n    }(Object.getPrototypeOf, Object);\n\n    var _ = function _(e) {\n      return null != e && \"object\" == _typeof(e);\n    },\n        y = \"[object Object]\",\n        b = Function.prototype,\n        E = Object.prototype,\n        S = b.toString,\n        I = E.hasOwnProperty,\n        O = S.call(Object);\n\n    var C = function C(e) {\n      if (!_(e) || m(e) != y) return !1;\n      var t = g(e);\n      if (null === t) return !0;\n      var i = I.call(t, \"constructor\") && t.constructor;\n      return \"function\" == typeof i && i instanceof i && S.call(i) == O;\n    },\n        T = i(2),\n        w = {\n      INIT: \"@@redux/INIT\"\n    };\n\n    function k(e, t, i) {\n      var n;\n\n      if (\"function\" == typeof t && void 0 === i && (i = t, t = void 0), void 0 !== i) {\n        if (\"function\" != typeof i) throw new Error(\"Expected the enhancer to be a function.\");\n        return i(k)(e, t);\n      }\n\n      if (\"function\" != typeof e) throw new Error(\"Expected the reducer to be a function.\");\n      var o = e,\n          r = t,\n          s = [],\n          a = s,\n          c = !1;\n\n      function l() {\n        a === s && (a = s.slice());\n      }\n\n      function u() {\n        return r;\n      }\n\n      function h(e) {\n        if (\"function\" != typeof e) throw new Error(\"Expected listener to be a function.\");\n        var t = !0;\n        return l(), a.push(e), function () {\n          if (t) {\n            t = !1, l();\n            var i = a.indexOf(e);\n            a.splice(i, 1);\n          }\n        };\n      }\n\n      function d(e) {\n        if (!C(e)) throw new Error(\"Actions must be plain objects. Use custom middleware for async actions.\");\n        if (void 0 === e.type) throw new Error('Actions may not have an undefined \"type\" property. Have you misspelled a constant?');\n        if (c) throw new Error(\"Reducers may not dispatch actions.\");\n\n        try {\n          c = !0, r = o(r, e);\n        } finally {\n          c = !1;\n        }\n\n        for (var t = s = a, i = 0; i < t.length; i++) {\n          (0, t[i])();\n        }\n\n        return e;\n      }\n\n      return d({\n        type: w.INIT\n      }), (n = {\n        dispatch: d,\n        subscribe: h,\n        getState: u,\n        replaceReducer: function replaceReducer(e) {\n          if (\"function\" != typeof e) throw new Error(\"Expected the nextReducer to be a function.\");\n          o = e, d({\n            type: w.INIT\n          });\n        }\n      })[T.a] = function () {\n        var e,\n            t = h;\n        return (e = {\n          subscribe: function subscribe(e) {\n            if (\"object\" != _typeof(e)) throw new TypeError(\"Expected the observer to be an object.\");\n\n            function i() {\n              e.next && e.next(u());\n            }\n\n            return i(), {\n              unsubscribe: t(i)\n            };\n          }\n        })[T.a] = function () {\n          return this;\n        }, e;\n      }, n;\n    }\n\n    function A(e, t) {\n      var i = t && t.type;\n      return \"Given action \" + (i && '\"' + i.toString() + '\"' || \"an action\") + ', reducer \"' + e + '\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.';\n    }\n\n    function L(e) {\n      for (var t = Object.keys(e), i = {}, n = 0; n < t.length; n++) {\n        var o = t[n];\n        0, \"function\" == typeof e[o] && (i[o] = e[o]);\n      }\n\n      var r = Object.keys(i);\n      var s = void 0;\n\n      try {\n        !function (e) {\n          Object.keys(e).forEach(function (t) {\n            var i = e[t];\n            if (void 0 === i(void 0, {\n              type: w.INIT\n            })) throw new Error('Reducer \"' + t + \"\\\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\");\n            if (void 0 === i(void 0, {\n              type: \"@@redux/PROBE_UNKNOWN_ACTION_\" + Math.random().toString(36).substring(7).split(\"\").join(\".\")\n            })) throw new Error('Reducer \"' + t + \"\\\" returned undefined when probed with a random type. Don't try to handle \" + w.INIT + ' or other actions in \"redux/*\" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.');\n          });\n        }(i);\n      } catch (e) {\n        s = e;\n      }\n\n      return function () {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n            t = arguments[1];\n        if (s) throw s;\n\n        for (var n = !1, o = {}, a = 0; a < r.length; a++) {\n          var c = r[a],\n              l = i[c],\n              u = e[c],\n              h = l(u, t);\n\n          if (void 0 === h) {\n            var d = A(c, t);\n            throw new Error(d);\n          }\n\n          o[c] = h, n = n || h !== u;\n        }\n\n        return n ? o : e;\n      };\n    }\n\n    function x(e, t) {\n      return function () {\n        return t(e.apply(void 0, arguments));\n      };\n    }\n\n    function P(e, t) {\n      if (\"function\" == typeof e) return x(e, t);\n      if (\"object\" != _typeof(e) || null === e) throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (null === e ? \"null\" : _typeof(e)) + '. Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n\n      for (var i = Object.keys(e), n = {}, o = 0; o < i.length; o++) {\n        var r = i[o],\n            s = e[r];\n        \"function\" == typeof s && (n[r] = x(s, t));\n      }\n\n      return n;\n    }\n\n    function D() {\n      for (var e = arguments.length, t = Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      return 0 === t.length ? function (e) {\n        return e;\n      } : 1 === t.length ? t[0] : t.reduce(function (e, t) {\n        return function () {\n          return e(t.apply(void 0, arguments));\n        };\n      });\n    }\n\n    var j = Object.assign || function (e) {\n      for (var t = 1; t < arguments.length; t++) {\n        var i = arguments[t];\n\n        for (var n in i) {\n          Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n]);\n        }\n      }\n\n      return e;\n    };\n\n    function M() {\n      for (var e = arguments.length, t = Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      return function (e) {\n        return function (i, n, o) {\n          var r,\n              s = e(i, n, o),\n              a = s.dispatch,\n              c = {\n            getState: s.getState,\n            dispatch: function dispatch(e) {\n              return a(e);\n            }\n          };\n          return r = t.map(function (e) {\n            return e(c);\n          }), a = D.apply(void 0, r)(s.dispatch), j({}, s, {\n            dispatch: a\n          });\n        };\n      };\n    }\n\n    i.d(t, \"createStore\", function () {\n      return k;\n    }), i.d(t, \"combineReducers\", function () {\n      return L;\n    }), i.d(t, \"bindActionCreators\", function () {\n      return P;\n    }), i.d(t, \"applyMiddleware\", function () {\n      return M;\n    }), i.d(t, \"compose\", function () {\n      return D;\n    });\n  }, function (e, t, i) {\n    \"use strict\";\n\n    function n(e) {\n      var t,\n          i = e.Symbol;\n      return \"function\" == typeof i ? i.observable ? t = i.observable : (t = i(\"observable\"), i.observable = t) : t = \"@@observable\", t;\n    }\n\n    i.d(t, \"a\", function () {\n      return n;\n    });\n  }, function (e, t, i) {\n    \"use strict\";\n\n    (function (e) {\n      var i = \"object\" == _typeof(e) && e && e.Object === Object && e;\n      t.a = i;\n    }).call(this, i(3));\n  }, function (e, t, i) {\n    e.exports = i(10);\n  }, function (e, t, i) {\n    \"use strict\";\n\n    var n = v(i(11)),\n        o = v(i(12)),\n        r = v(i(13)),\n        s = i(20),\n        a = i(1),\n        c = i(5),\n        l = i(28),\n        u = i(29),\n        h = i(30),\n        d = i(31),\n        f = i(32),\n        p = i(0);\n\n    function v(e) {\n      return e && e.__esModule ? e : {\n        \"default\": e\n      };\n    }\n\n    function m(e, t, i) {\n      return t in e ? Object.defineProperty(e, t, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }) : e[t] = i, e;\n    }\n\n    function g(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var _ = function () {\n      function e() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"[data-choice]\",\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n\n        if (function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), (0, p.isType)(\"String\", t)) {\n          var n = Array.from(document.querySelectorAll(t));\n          if (n.length > 1) return this._generateInstances(n, i);\n        }\n\n        this.config = o[\"default\"].all([a.DEFAULT_CONFIG, e.userDefaults, i], {\n          arrayMerge: function arrayMerge(e, t) {\n            return [].concat(t);\n          }\n        });\n        var c = (0, p.diff)(this.config, a.DEFAULT_CONFIG);\n        c.length && console.warn(\"Unknown config option(s) passed\", c.join(\", \")), [\"auto\", \"always\"].includes(this.config.renderSelectedChoices) || (this.config.renderSelectedChoices = \"auto\");\n        var l = (0, p.isType)(\"String\", t) ? document.querySelector(t) : t;\n        return l ? (this._isTextElement = \"text\" === l.type, this._isSelectOneElement = \"select-one\" === l.type, this._isSelectMultipleElement = \"select-multiple\" === l.type, this._isSelectElement = this._isSelectOneElement || this._isSelectMultipleElement, this._isTextElement ? this.passedElement = new s.WrappedInput({\n          element: l,\n          classNames: this.config.classNames,\n          delimiter: this.config.delimiter\n        }) : this._isSelectElement && (this.passedElement = new s.WrappedSelect({\n          element: l,\n          classNames: this.config.classNames\n        })), this.passedElement ? (!0 === this.config.shouldSortItems && this._isSelectOneElement && !this.config.silent && console.warn(\"shouldSortElements: Type of passed element is 'select-one', falling back to false.\"), this.initialised = !1, this._store = new r[\"default\"](this.render), this._initialState = {}, this._currentState = {}, this._prevState = {}, this._currentValue = \"\", this._canSearch = this.config.searchEnabled, this._isScrollingOnIe = !1, this._highlightPosition = 0, this._wasTap = !0, this._placeholderValue = this._generatePlaceholderValue(), this._baseId = (0, p.generateId)(this.passedElement.element, \"choices-\"), this._direction = this.passedElement.element.getAttribute(\"dir\") || \"ltr\", this._idNames = {\n          itemChoice: \"item-choice\"\n        }, this._presetChoices = this.config.choices, this._presetItems = this.config.items, this.passedElement.value && (this._presetItems = this._presetItems.concat(this.passedElement.value.split(this.config.delimiter))), this._render = this._render.bind(this), this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this), this._onKeyUp = this._onKeyUp.bind(this), this._onKeyDown = this._onKeyDown.bind(this), this._onClick = this._onClick.bind(this), this._onTouchMove = this._onTouchMove.bind(this), this._onTouchEnd = this._onTouchEnd.bind(this), this._onMouseDown = this._onMouseDown.bind(this), this._onMouseOver = this._onMouseOver.bind(this), this._onFormReset = this._onFormReset.bind(this), this._onAKey = this._onAKey.bind(this), this._onEnterKey = this._onEnterKey.bind(this), this._onEscapeKey = this._onEscapeKey.bind(this), this._onDirectionKey = this._onDirectionKey.bind(this), this._onDeleteKey = this._onDeleteKey.bind(this), \"active\" === this.passedElement.element.getAttribute(\"data-choice\") && console.warn(\"Trying to initialise Choices on element already initialised\"), void this.init()) : console.error(\"Passed element was of an invalid type\")) : console.error(\"Could not find passed element or passed element was of an invalid type\");\n      }\n\n      var t, i, v;\n      return t = e, (i = [{\n        key: \"init\",\n        value: function value() {\n          if (!this.initialised) {\n            this._createTemplates(), this._createElements(), this._createStructure(), this._initialState = (0, p.cloneObject)(this._store.state), this._store.subscribe(this._render), this._render(), this._addEventListeners(), (!this.config.addItems || this.passedElement.element.hasAttribute(\"disabled\")) && this.disable(), this.initialised = !0;\n            var e = this.config.callbackOnInit;\n            e && (0, p.isType)(\"Function\", e) && e.call(this);\n          }\n        }\n      }, {\n        key: \"destroy\",\n        value: function value() {\n          this.initialised && (this._removeEventListeners(), this.passedElement.reveal(), this.containerOuter.unwrap(this.passedElement.element), this._isSelectElement && (this.passedElement.options = this._presetChoices), this.clearStore(), this.config.templates = null, this.initialised = !1);\n        }\n      }, {\n        key: \"enable\",\n        value: function value() {\n          return this.passedElement.isDisabled && this.passedElement.enable(), this.containerOuter.isDisabled && (this._addEventListeners(), this.input.enable(), this.containerOuter.enable()), this;\n        }\n      }, {\n        key: \"disable\",\n        value: function value() {\n          return this.passedElement.isDisabled || this.passedElement.disable(), this.containerOuter.isDisabled || (this._removeEventListeners(), this.input.disable(), this.containerOuter.disable()), this;\n        }\n      }, {\n        key: \"highlightItem\",\n        value: function value(e) {\n          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n          if (!e) return this;\n          var i = e.id,\n              n = e.groupId,\n              o = void 0 === n ? -1 : n,\n              r = e.value,\n              s = void 0 === r ? \"\" : r,\n              c = e.label,\n              l = void 0 === c ? \"\" : c,\n              h = o >= 0 ? this._store.getGroupById(o) : null;\n          return this._store.dispatch((0, u.highlightItem)(i, !0)), t && this.passedElement.triggerEvent(a.EVENTS.highlightItem, {\n            id: i,\n            value: s,\n            label: l,\n            groupValue: h && h.value ? h.value : null\n          }), this;\n        }\n      }, {\n        key: \"unhighlightItem\",\n        value: function value(e) {\n          if (!e) return this;\n          var t = e.id,\n              i = e.groupId,\n              n = void 0 === i ? -1 : i,\n              o = e.value,\n              r = void 0 === o ? \"\" : o,\n              s = e.label,\n              c = void 0 === s ? \"\" : s,\n              l = n >= 0 ? this._store.getGroupById(n) : null;\n          return this._store.dispatch((0, u.highlightItem)(t, !1)), this.passedElement.triggerEvent(a.EVENTS.highlightItem, {\n            id: t,\n            value: r,\n            label: c,\n            groupValue: l && l.value ? l.value : null\n          }), this;\n        }\n      }, {\n        key: \"highlightAll\",\n        value: function value() {\n          var e = this;\n          return this._store.items.forEach(function (t) {\n            return e.highlightItem(t);\n          }), this;\n        }\n      }, {\n        key: \"unhighlightAll\",\n        value: function value() {\n          var e = this;\n          return this._store.items.forEach(function (t) {\n            return e.unhighlightItem(t);\n          }), this;\n        }\n      }, {\n        key: \"removeActiveItemsByValue\",\n        value: function value(e) {\n          var t = this;\n          return this._store.activeItems.filter(function (t) {\n            return t.value === e;\n          }).forEach(function (e) {\n            return t._removeItem(e);\n          }), this;\n        }\n      }, {\n        key: \"removeActiveItems\",\n        value: function value(e) {\n          var t = this;\n          return this._store.activeItems.filter(function (t) {\n            return t.id !== e;\n          }).forEach(function (e) {\n            return t._removeItem(e);\n          }), this;\n        }\n      }, {\n        key: \"removeHighlightedItems\",\n        value: function value() {\n          var e = this,\n              t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];\n          return this._store.highlightedActiveItems.forEach(function (i) {\n            e._removeItem(i), t && e._triggerChange(i.value);\n          }), this;\n        }\n      }, {\n        key: \"showDropdown\",\n        value: function value(e) {\n          var t = this;\n          return this.dropdown.isActive ? this : (requestAnimationFrame(function () {\n            t.dropdown.show(), t.containerOuter.open(t.dropdown.distanceFromTopWindow()), !e && t._canSearch && t.input.focus(), t.passedElement.triggerEvent(a.EVENTS.showDropdown, {});\n          }), this);\n        }\n      }, {\n        key: \"hideDropdown\",\n        value: function value(e) {\n          var t = this;\n          return this.dropdown.isActive ? (requestAnimationFrame(function () {\n            t.dropdown.hide(), t.containerOuter.close(), !e && t._canSearch && (t.input.removeActiveDescendant(), t.input.blur()), t.passedElement.triggerEvent(a.EVENTS.hideDropdown, {});\n          }), this) : this;\n        }\n      }, {\n        key: \"getValue\",\n        value: function value() {\n          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n              t = this._store.activeItems.reduce(function (t, i) {\n            var n = e ? i.value : i;\n            return t.push(n), t;\n          }, []);\n\n          return this._isSelectOneElement ? t[0] : t;\n        }\n      }, {\n        key: \"setValue\",\n        value: function value(e) {\n          var t = this;\n          return this.initialised ? ([].concat(e).forEach(function (e) {\n            return t._setChoiceOrItem(e);\n          }), this) : this;\n        }\n      }, {\n        key: \"setChoiceByValue\",\n        value: function value(e) {\n          var t = this;\n          return !this.initialised || this._isTextElement ? this : (((0, p.isType)(\"Array\", e) ? e : [e]).forEach(function (e) {\n            return t._findAndSelectChoiceByValue(e);\n          }), this);\n        }\n      }, {\n        key: \"setChoices\",\n        value: function value() {\n          var e = this,\n              t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n              i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\",\n              n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"\",\n              o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n          if (!this._isSelectElement || !i) return this;\n          o && this.clearChoices(), this.containerOuter.removeLoadingState();\n          return this._setLoading(!0), t.forEach(function (t) {\n            t.choices ? e._addGroup({\n              group: t,\n              id: t.id || null,\n              valueKey: i,\n              labelKey: n\n            }) : e._addChoice({\n              value: t[i],\n              label: t[n],\n              isSelected: t.selected,\n              isDisabled: t.disabled,\n              customProperties: t.customProperties,\n              placeholder: t.placeholder\n            });\n          }), this._setLoading(!1), this;\n        }\n      }, {\n        key: \"clearChoices\",\n        value: function value() {\n          this._store.dispatch((0, l.clearChoices)());\n        }\n      }, {\n        key: \"clearStore\",\n        value: function value() {\n          return this._store.dispatch((0, d.clearAll)()), this;\n        }\n      }, {\n        key: \"clearInput\",\n        value: function value() {\n          var e = !this._isSelectOneElement;\n          return this.input.clear(e), !this._isTextElement && this._canSearch && (this._isSearching = !1, this._store.dispatch((0, l.activateChoices)(!0))), this;\n        }\n      }, {\n        key: \"ajax\",\n        value: function value(e) {\n          var t = this;\n          return this.initialised && this._isSelectElement && e ? (requestAnimationFrame(function () {\n            return t._handleLoadingState(!0);\n          }), e(this._ajaxCallback()), this) : this;\n        }\n      }, {\n        key: \"_render\",\n        value: function value() {\n          if (!this._store.isLoading()) {\n            this._currentState = this._store.state;\n            var e = this._currentState.choices !== this._prevState.choices || this._currentState.groups !== this._prevState.groups || this._currentState.items !== this._prevState.items,\n                t = this._isSelectElement,\n                i = this._currentState.items !== this._prevState.items;\n            e && (t && this._renderChoices(), i && this._renderItems(), this._prevState = this._currentState);\n          }\n        }\n      }, {\n        key: \"_renderChoices\",\n        value: function value() {\n          var e = this,\n              t = this._store,\n              i = t.activeGroups,\n              n = t.activeChoices,\n              o = document.createDocumentFragment();\n\n          if (this.choiceList.clear(), this.config.resetScrollPosition && requestAnimationFrame(function () {\n            return e.choiceList.scrollToTop();\n          }), i.length >= 1 && !this._isSearching) {\n            var r = n.filter(function (e) {\n              return !0 === e.placeholder && -1 === e.groupId;\n            });\n            r.length >= 1 && (o = this._createChoicesFragment(r, o)), o = this._createGroupsFragment(i, n, o);\n          } else n.length >= 1 && (o = this._createChoicesFragment(n, o));\n\n          if (o.childNodes && o.childNodes.length > 0) {\n            var s = this._store.activeItems,\n                a = this._canAddItem(s, this.input.value);\n\n            a.response ? (this.choiceList.append(o), this._highlightChoice()) : this.choiceList.append(this._getTemplate(\"notice\", a.notice));\n          } else {\n            var c, l;\n            this._isSearching ? (l = (0, p.isType)(\"Function\", this.config.noResultsText) ? this.config.noResultsText() : this.config.noResultsText, c = this._getTemplate(\"notice\", l, \"no-results\")) : (l = (0, p.isType)(\"Function\", this.config.noChoicesText) ? this.config.noChoicesText() : this.config.noChoicesText, c = this._getTemplate(\"notice\", l, \"no-choices\")), this.choiceList.append(c);\n          }\n        }\n      }, {\n        key: \"_renderItems\",\n        value: function value() {\n          var e = this._store.activeItems || [];\n          this.itemList.clear();\n\n          var t = this._createItemsFragment(e);\n\n          t.childNodes && this.itemList.append(t);\n        }\n      }, {\n        key: \"_createGroupsFragment\",\n        value: function value(e, t, i) {\n          var n = this,\n              o = i || document.createDocumentFragment();\n          return this.config.shouldSort && e.sort(this.config.sortFn), e.forEach(function (e) {\n            var i = function (e) {\n              return t.filter(function (t) {\n                return n._isSelectOneElement ? t.groupId === e.id : t.groupId === e.id && (\"always\" === n.config.renderSelectedChoices || !t.selected);\n              });\n            }(e);\n\n            if (i.length >= 1) {\n              var r = n._getTemplate(\"choiceGroup\", e);\n\n              o.appendChild(r), n._createChoicesFragment(i, o, !0);\n            }\n          }), o;\n        }\n      }, {\n        key: \"_createChoicesFragment\",\n        value: function value(e, t) {\n          var i = this,\n              n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n              o = t || document.createDocumentFragment(),\n              r = this.config,\n              s = r.renderSelectedChoices,\n              a = r.searchResultLimit,\n              c = r.renderChoiceLimit,\n              l = this._isSearching ? p.sortByScore : this.config.sortFn,\n              u = function u(e) {\n            if (\"auto\" !== s || i._isSelectOneElement || !e.selected) {\n              var t = i._getTemplate(\"choice\", e, i.config.itemSelectText);\n\n              o.appendChild(t);\n            }\n          },\n              h = e;\n\n          \"auto\" !== s || this._isSelectOneElement || (h = e.filter(function (e) {\n            return !e.selected;\n          }));\n          var d = h.reduce(function (e, t) {\n            return t.placeholder ? e.placeholderChoices.push(t) : e.normalChoices.push(t), e;\n          }, {\n            placeholderChoices: [],\n            normalChoices: []\n          }),\n              f = d.placeholderChoices,\n              v = d.normalChoices;\n          (this.config.shouldSort || this._isSearching) && v.sort(l);\n          var m = h.length,\n              g = [].concat(f, v);\n          this._isSearching ? m = a : c > 0 && !n && (m = c);\n\n          for (var _ = 0; _ < m; _ += 1) {\n            g[_] && u(g[_]);\n          }\n\n          return o;\n        }\n      }, {\n        key: \"_createItemsFragment\",\n        value: function value(e) {\n          var t = this,\n              i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n              n = this.config,\n              o = n.shouldSortItems,\n              r = n.sortFn,\n              s = n.removeItemButton,\n              a = i || document.createDocumentFragment();\n          o && !this._isSelectOneElement && e.sort(r), this._isTextElement ? this.passedElement.value = e : this.passedElement.options = e;\n          return e.forEach(function (e) {\n            return function (e) {\n              var i = t._getTemplate(\"item\", e, s);\n\n              a.appendChild(i);\n            }(e);\n          }), a;\n        }\n      }, {\n        key: \"_triggerChange\",\n        value: function value(e) {\n          null != e && this.passedElement.triggerEvent(a.EVENTS.change, {\n            value: e\n          });\n        }\n      }, {\n        key: \"_selectPlaceholderChoice\",\n        value: function value() {\n          var e = this._store.placeholderChoice;\n          e && (this._addItem({\n            value: e.value,\n            label: e.label,\n            choiceId: e.id,\n            groupId: e.groupId,\n            placeholder: e.placeholder\n          }), this._triggerChange(e.value));\n        }\n      }, {\n        key: \"_handleButtonAction\",\n        value: function value(e, t) {\n          if (e && t && this.config.removeItems && this.config.removeItemButton) {\n            var i = t.parentNode.getAttribute(\"data-id\"),\n                n = e.find(function (e) {\n              return e.id === parseInt(i, 10);\n            });\n            this._removeItem(n), this._triggerChange(n.value), this._isSelectOneElement && this._selectPlaceholderChoice();\n          }\n        }\n      }, {\n        key: \"_handleItemAction\",\n        value: function value(e, t) {\n          var i = this,\n              n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n\n          if (e && t && this.config.removeItems && !this._isSelectOneElement) {\n            var o = t.getAttribute(\"data-id\");\n            e.forEach(function (e) {\n              e.id !== parseInt(o, 10) || e.highlighted ? !n && e.highlighted && i.unhighlightItem(e) : i.highlightItem(e);\n            }), this.input.focus();\n          }\n        }\n      }, {\n        key: \"_handleChoiceAction\",\n        value: function value(e, t) {\n          if (e && t) {\n            var i = t.getAttribute(\"data-id\"),\n                n = this._store.getChoiceById(i),\n                o = e[0] && e[0].keyCode ? e[0].keyCode : null,\n                r = this.dropdown.isActive;\n\n            if (n.keyCode = o, this.passedElement.triggerEvent(a.EVENTS.choice, {\n              choice: n\n            }), n && !n.selected && !n.disabled) this._canAddItem(e, n.value).response && (this._addItem({\n              value: n.value,\n              label: n.label,\n              choiceId: n.id,\n              groupId: n.groupId,\n              customProperties: n.customProperties,\n              placeholder: n.placeholder,\n              keyCode: n.keyCode\n            }), this._triggerChange(n.value));\n            this.clearInput(), r && this._isSelectOneElement && (this.hideDropdown(!0), this.containerOuter.focus());\n          }\n        }\n      }, {\n        key: \"_handleBackspace\",\n        value: function value(e) {\n          if (this.config.removeItems && e) {\n            var t = e[e.length - 1],\n                i = e.some(function (e) {\n              return e.highlighted;\n            });\n            this.config.editItems && !i && t ? (this.input.value = t.value, this.input.setWidth(), this._removeItem(t), this._triggerChange(t.value)) : (i || this.highlightItem(t, !1), this.removeHighlightedItems(!0));\n          }\n        }\n      }, {\n        key: \"_setLoading\",\n        value: function value(e) {\n          this._store.dispatch((0, f.setIsLoading)(e));\n        }\n      }, {\n        key: \"_handleLoadingState\",\n        value: function value() {\n          var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n              t = this.itemList.getChild(\".\".concat(this.config.classNames.placeholder));\n          e ? (this.disable(), this.containerOuter.addLoadingState(), this._isSelectOneElement ? t ? t.innerHTML = this.config.loadingText : (t = this._getTemplate(\"placeholder\", this.config.loadingText), this.itemList.append(t)) : this.input.placeholder = this.config.loadingText) : (this.enable(), this.containerOuter.removeLoadingState(), this._isSelectOneElement ? t.innerHTML = this._placeholderValue || \"\" : this.input.placeholder = this._placeholderValue || \"\");\n        }\n      }, {\n        key: \"_handleSearch\",\n        value: function value(e) {\n          if (e && this.input.isFocussed) {\n            var t = this._store.choices,\n                i = this.config,\n                n = i.searchFloor,\n                o = i.searchChoices,\n                r = t.some(function (e) {\n              return !e.active;\n            });\n\n            if (e && e.length >= n) {\n              var s = o ? this._searchChoices(e) : 0;\n              this.passedElement.triggerEvent(a.EVENTS.search, {\n                value: e,\n                resultCount: s\n              });\n            } else r && (this._isSearching = !1, this._store.dispatch((0, l.activateChoices)(!0)));\n          }\n        }\n      }, {\n        key: \"_canAddItem\",\n        value: function value(e, t) {\n          var i = !0,\n              n = (0, p.isType)(\"Function\", this.config.addItemText) ? this.config.addItemText(t) : this.config.addItemText;\n\n          if (!this._isSelectOneElement) {\n            var o = (0, p.existsInArray)(e, t);\n            this.config.maxItemCount > 0 && this.config.maxItemCount <= e.length && (i = !1, n = (0, p.isType)(\"Function\", this.config.maxItemText) ? this.config.maxItemText(this.config.maxItemCount) : this.config.maxItemText), !this.config.duplicateItemsAllowed && o && i && (i = !1, n = (0, p.isType)(\"Function\", this.config.uniqueItemText) ? this.config.uniqueItemText(t) : this.config.uniqueItemText), this._isTextElement && this.config.addItems && i && (0, p.isType)(\"Function\", this.config.addItemFilterFn) && !this.config.addItemFilterFn(t) && (i = !1, n = (0, p.isType)(\"Function\", this.config.customAddItemText) ? this.config.customAddItemText(t) : this.config.customAddItemText);\n          }\n\n          return {\n            response: i,\n            notice: n\n          };\n        }\n      }, {\n        key: \"_ajaxCallback\",\n        value: function value() {\n          var e = this;\n          return function (t, i, n) {\n            if (t && i) {\n              var o = (0, p.isType)(\"Object\", t) ? [t] : t;\n              o && (0, p.isType)(\"Array\", o) && o.length ? (e._handleLoadingState(!1), e._setLoading(!0), o.forEach(function (t) {\n                t.choices ? e._addGroup({\n                  group: t,\n                  id: t.id || null,\n                  valueKey: i,\n                  labelKey: n\n                }) : e._addChoice({\n                  value: (0, p.fetchFromObject)(t, i),\n                  label: (0, p.fetchFromObject)(t, n),\n                  isSelected: t.selected,\n                  isDisabled: t.disabled,\n                  customProperties: t.customProperties,\n                  placeholder: t.placeholder\n                });\n              }), e._setLoading(!1), e._isSelectOneElement && e._selectPlaceholderChoice()) : e._handleLoadingState(!1);\n            }\n          };\n        }\n      }, {\n        key: \"_searchChoices\",\n        value: function value(e) {\n          var t = (0, p.isType)(\"String\", e) ? e.trim() : e,\n              i = (0, p.isType)(\"String\", this._currentValue) ? this._currentValue.trim() : this._currentValue;\n          if (t.length < 1 && t === \"\".concat(i, \" \")) return 0;\n          var o = this._store.searchableChoices,\n              r = t,\n              s = [].concat(this.config.searchFields),\n              a = Object.assign(this.config.fuseOptions, {\n            keys: s\n          }),\n              c = new n[\"default\"](o, a).search(r);\n          return this._currentValue = t, this._highlightPosition = 0, this._isSearching = !0, this._store.dispatch((0, l.filterChoices)(c)), c.length;\n        }\n      }, {\n        key: \"_addEventListeners\",\n        value: function value() {\n          document.addEventListener(\"keyup\", this._onKeyUp), document.addEventListener(\"keydown\", this._onKeyDown), document.addEventListener(\"click\", this._onClick), document.addEventListener(\"touchmove\", this._onTouchMove), document.addEventListener(\"touchend\", this._onTouchEnd), document.addEventListener(\"mousedown\", this._onMouseDown), document.addEventListener(\"mouseover\", this._onMouseOver), this._isSelectOneElement && (this.containerOuter.element.addEventListener(\"focus\", this._onFocus), this.containerOuter.element.addEventListener(\"blur\", this._onBlur)), this.input.element.addEventListener(\"focus\", this._onFocus), this.input.element.addEventListener(\"blur\", this._onBlur), this.input.element.form && this.input.element.form.addEventListener(\"reset\", this._onFormReset), this.input.addEventListeners();\n        }\n      }, {\n        key: \"_removeEventListeners\",\n        value: function value() {\n          document.removeEventListener(\"keyup\", this._onKeyUp), document.removeEventListener(\"keydown\", this._onKeyDown), document.removeEventListener(\"click\", this._onClick), document.removeEventListener(\"touchmove\", this._onTouchMove), document.removeEventListener(\"touchend\", this._onTouchEnd), document.removeEventListener(\"mousedown\", this._onMouseDown), document.removeEventListener(\"mouseover\", this._onMouseOver), this._isSelectOneElement && (this.containerOuter.element.removeEventListener(\"focus\", this._onFocus), this.containerOuter.element.removeEventListener(\"blur\", this._onBlur)), this.input.element.removeEventListener(\"focus\", this._onFocus), this.input.element.removeEventListener(\"blur\", this._onBlur), this.input.element.form && this.input.element.form.removeEventListener(\"reset\", this._onFormReset), this.input.removeEventListeners();\n        }\n      }, {\n        key: \"_onKeyDown\",\n        value: function value(e) {\n          var t,\n              i = e.target,\n              n = e.keyCode,\n              o = e.ctrlKey,\n              r = e.metaKey;\n\n          if (i === this.input.element || this.containerOuter.element.contains(i)) {\n            var s = this._store.activeItems,\n                c = this.input.isFocussed,\n                l = this.dropdown.isActive,\n                u = this.itemList.hasChildren,\n                h = String.fromCharCode(n),\n                d = a.KEY_CODES.BACK_KEY,\n                f = a.KEY_CODES.DELETE_KEY,\n                p = a.KEY_CODES.ENTER_KEY,\n                v = a.KEY_CODES.A_KEY,\n                g = a.KEY_CODES.ESC_KEY,\n                _ = a.KEY_CODES.UP_KEY,\n                y = a.KEY_CODES.DOWN_KEY,\n                b = a.KEY_CODES.PAGE_UP_KEY,\n                E = a.KEY_CODES.PAGE_DOWN_KEY,\n                S = o || r;\n            !this._isTextElement && /[a-zA-Z0-9-_ ]/.test(h) && this.showDropdown();\n            var I = (m(t = {}, v, this._onAKey), m(t, p, this._onEnterKey), m(t, g, this._onEscapeKey), m(t, _, this._onDirectionKey), m(t, b, this._onDirectionKey), m(t, y, this._onDirectionKey), m(t, E, this._onDirectionKey), m(t, f, this._onDeleteKey), m(t, d, this._onDeleteKey), t);\n            I[n] && I[n]({\n              event: e,\n              target: i,\n              keyCode: n,\n              metaKey: r,\n              activeItems: s,\n              hasFocusedInput: c,\n              hasActiveDropdown: l,\n              hasItems: u,\n              hasCtrlDownKeyPressed: S\n            });\n          }\n        }\n      }, {\n        key: \"_onKeyUp\",\n        value: function value(e) {\n          var t = e.target,\n              i = e.keyCode;\n\n          if (t === this.input.element) {\n            var n = this.input.value,\n                o = this._store.activeItems,\n                r = this._canAddItem(o, n),\n                s = a.KEY_CODES.BACK_KEY,\n                c = a.KEY_CODES.DELETE_KEY;\n\n            if (this._isTextElement) {\n              if (r.notice && n) {\n                var u = this._getTemplate(\"notice\", r.notice);\n\n                this.dropdown.element.innerHTML = u.outerHTML, this.showDropdown(!0);\n              } else this.hideDropdown(!0);\n            } else {\n              var h = (i === s || i === c) && !t.value,\n                  d = !this._isTextElement && this._isSearching,\n                  f = this._canSearch && r.response;\n              h && d ? (this._isSearching = !1, this._store.dispatch((0, l.activateChoices)(!0))) : f && this._handleSearch(this.input.value);\n            }\n\n            this._canSearch = this.config.searchEnabled;\n          }\n        }\n      }, {\n        key: \"_onAKey\",\n        value: function value(e) {\n          var t = e.hasItems;\n          e.hasCtrlDownKeyPressed && t && (this._canSearch = !1, this.config.removeItems && !this.input.value && this.input.element === document.activeElement && this.highlightAll());\n        }\n      }, {\n        key: \"_onEnterKey\",\n        value: function value(e) {\n          var t = e.event,\n              i = e.target,\n              n = e.activeItems,\n              o = e.hasActiveDropdown,\n              r = a.KEY_CODES.ENTER_KEY,\n              s = i.hasAttribute(\"data-button\");\n\n          if (this._isTextElement && i.value) {\n            var c = this.input.value;\n            this._canAddItem(n, c).response && (this.hideDropdown(!0), this._addItem({\n              value: c\n            }), this._triggerChange(c), this.clearInput());\n          }\n\n          if (s && (this._handleButtonAction(n, i), t.preventDefault()), o) {\n            var l = this.dropdown.getChild(\".\".concat(this.config.classNames.highlightedState));\n            l && (n[0] && (n[0].keyCode = r), this._handleChoiceAction(n, l)), t.preventDefault();\n          } else this._isSelectOneElement && (this.showDropdown(), t.preventDefault());\n        }\n      }, {\n        key: \"_onEscapeKey\",\n        value: function value(e) {\n          e.hasActiveDropdown && (this.hideDropdown(!0), this.containerOuter.focus());\n        }\n      }, {\n        key: \"_onDirectionKey\",\n        value: function value(e) {\n          var t = e.event,\n              i = e.hasActiveDropdown,\n              n = e.keyCode,\n              o = e.metaKey,\n              r = a.KEY_CODES.DOWN_KEY,\n              s = a.KEY_CODES.PAGE_UP_KEY,\n              c = a.KEY_CODES.PAGE_DOWN_KEY;\n\n          if (i || this._isSelectOneElement) {\n            this.showDropdown(), this._canSearch = !1;\n            var l,\n                u = n === r || n === c ? 1 : -1;\n            if (o || n === c || n === s) l = u > 0 ? Array.from(this.dropdown.element.querySelectorAll(\"[data-choice-selectable]\")).pop() : this.dropdown.element.querySelector(\"[data-choice-selectable]\");else {\n              var h = this.dropdown.element.querySelector(\".\".concat(this.config.classNames.highlightedState));\n              l = h ? (0, p.getAdjacentEl)(h, \"[data-choice-selectable]\", u) : this.dropdown.element.querySelector(\"[data-choice-selectable]\");\n            }\n            l && ((0, p.isScrolledIntoView)(l, this.choiceList.element, u) || this.choiceList.scrollToChoice(l, u), this._highlightChoice(l)), t.preventDefault();\n          }\n        }\n      }, {\n        key: \"_onDeleteKey\",\n        value: function value(e) {\n          var t = e.event,\n              i = e.target,\n              n = e.hasFocusedInput,\n              o = e.activeItems;\n          !n || i.value || this._isSelectOneElement || (this._handleBackspace(o), t.preventDefault());\n        }\n      }, {\n        key: \"_onTouchMove\",\n        value: function value() {\n          this._wasTap && (this._wasTap = !1);\n        }\n      }, {\n        key: \"_onTouchEnd\",\n        value: function value(e) {\n          var t = (e || e.touches[0]).target;\n          this._wasTap && this.containerOuter.element.contains(t) && ((t === this.containerOuter.element || t === this.containerInner.element) && (this._isTextElement ? this.input.focus() : this._isSelectMultipleElement && this.showDropdown()), e.stopPropagation());\n          this._wasTap = !0;\n        }\n      }, {\n        key: \"_onMouseDown\",\n        value: function value(e) {\n          var t = e.target,\n              i = e.shiftKey;\n\n          if (this.choiceList.element.contains(t) && (0, p.isIE11)() && (this._isScrollingOnIe = !0), this.containerOuter.element.contains(t) && t !== this.input.element) {\n            var n = this._store.activeItems,\n                o = i,\n                r = (0, p.findAncestorByAttrName)(t, \"data-button\"),\n                s = (0, p.findAncestorByAttrName)(t, \"data-item\"),\n                a = (0, p.findAncestorByAttrName)(t, \"data-choice\");\n            r ? this._handleButtonAction(n, r) : s ? this._handleItemAction(n, s, o) : a && this._handleChoiceAction(n, a), e.preventDefault();\n          }\n        }\n      }, {\n        key: \"_onMouseOver\",\n        value: function value(e) {\n          var t = e.target;\n          (t === this.dropdown || this.dropdown.element.contains(t)) && t.hasAttribute(\"data-choice\") && this._highlightChoice(t);\n        }\n      }, {\n        key: \"_onClick\",\n        value: function value(e) {\n          var t = e.target;\n          this.containerOuter.element.contains(t) ? this.dropdown.isActive || this.containerOuter.isDisabled ? this._isSelectOneElement && t !== this.input.element && !this.dropdown.element.contains(t) && this.hideDropdown() : this._isTextElement ? document.activeElement !== this.input.element && this.input.focus() : (this.showDropdown(), this.containerOuter.focus()) : (this._store.highlightedActiveItems && this.unhighlightAll(), this.containerOuter.removeFocusState(), this.hideDropdown(!0));\n        }\n      }, {\n        key: \"_onFocus\",\n        value: function value(e) {\n          var t = this,\n              i = e.target;\n          this.containerOuter.element.contains(i) && {\n            text: function text() {\n              i === t.input.element && t.containerOuter.addFocusState();\n            },\n            \"select-one\": function selectOne() {\n              t.containerOuter.addFocusState(), i === t.input.element && t.showDropdown(!0);\n            },\n            \"select-multiple\": function selectMultiple() {\n              i === t.input.element && (t.showDropdown(!0), t.containerOuter.addFocusState());\n            }\n          }[this.passedElement.element.type]();\n        }\n      }, {\n        key: \"_onBlur\",\n        value: function value(e) {\n          var t = this,\n              i = e.target;\n\n          if (this.containerOuter.element.contains(i) && !this._isScrollingOnIe) {\n            var n = this._store.activeItems.some(function (e) {\n              return e.highlighted;\n            });\n\n            ({\n              text: function text() {\n                i === t.input.element && (t.containerOuter.removeFocusState(), n && t.unhighlightAll(), t.hideDropdown(!0));\n              },\n              \"select-one\": function selectOne() {\n                t.containerOuter.removeFocusState(), (i === t.input.element || i === t.containerOuter.element && !t._canSearch) && t.hideDropdown(!0);\n              },\n              \"select-multiple\": function selectMultiple() {\n                i === t.input.element && (t.containerOuter.removeFocusState(), t.hideDropdown(!0), n && t.unhighlightAll());\n              }\n            })[this.passedElement.element.type]();\n          } else this._isScrollingOnIe = !1, this.input.element.focus();\n        }\n      }, {\n        key: \"_onFormReset\",\n        value: function value() {\n          this._store.dispatch((0, d.resetTo)(this._initialState));\n        }\n      }, {\n        key: \"_highlightChoice\",\n        value: function value() {\n          var e = this,\n              t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n              i = Array.from(this.dropdown.element.querySelectorAll(\"[data-choice-selectable]\"));\n\n          if (i.length) {\n            var n = t;\n            Array.from(this.dropdown.element.querySelectorAll(\".\".concat(this.config.classNames.highlightedState))).forEach(function (t) {\n              t.classList.remove(e.config.classNames.highlightedState), t.setAttribute(\"aria-selected\", \"false\");\n            }), n ? this._highlightPosition = i.indexOf(n) : (n = i.length > this._highlightPosition ? i[this._highlightPosition] : i[i.length - 1]) || (n = i[0]), n.classList.add(this.config.classNames.highlightedState), n.setAttribute(\"aria-selected\", \"true\"), this.passedElement.triggerEvent(a.EVENTS.highlightChoice, {\n              el: n\n            }), this.dropdown.isActive && (this.input.setActiveDescendant(n.id), this.containerOuter.setActiveDescendant(n.id));\n          }\n        }\n      }, {\n        key: \"_addItem\",\n        value: function value(e) {\n          var t = e.value,\n              i = e.label,\n              n = void 0 === i ? null : i,\n              o = e.choiceId,\n              r = void 0 === o ? -1 : o,\n              s = e.groupId,\n              c = void 0 === s ? -1 : s,\n              l = e.customProperties,\n              h = void 0 === l ? null : l,\n              d = e.placeholder,\n              f = void 0 !== d && d,\n              v = e.keyCode,\n              m = void 0 === v ? null : v,\n              g = (0, p.isType)(\"String\", t) ? t.trim() : t,\n              _ = m,\n              y = h,\n              b = this._store.items,\n              E = n || g,\n              S = parseInt(r, 10) || -1,\n              I = c >= 0 ? this._store.getGroupById(c) : null,\n              O = b ? b.length + 1 : 1;\n          return this.config.prependValue && (g = this.config.prependValue + g.toString()), this.config.appendValue && (g += this.config.appendValue.toString()), this._store.dispatch((0, u.addItem)({\n            value: g,\n            label: E,\n            id: O,\n            choiceId: S,\n            groupId: c,\n            customProperties: h,\n            placeholder: f,\n            keyCode: _\n          })), this._isSelectOneElement && this.removeActiveItems(O), this.passedElement.triggerEvent(a.EVENTS.addItem, {\n            id: O,\n            value: g,\n            label: E,\n            customProperties: y,\n            groupValue: I && I.value ? I.value : void 0,\n            keyCode: _\n          }), this;\n        }\n      }, {\n        key: \"_removeItem\",\n        value: function value(e) {\n          if (!e || !(0, p.isType)(\"Object\", e)) return this;\n          var t = e.id,\n              i = e.value,\n              n = e.label,\n              o = e.choiceId,\n              r = e.groupId,\n              s = r >= 0 ? this._store.getGroupById(r) : null;\n          return this._store.dispatch((0, u.removeItem)(t, o)), s && s.value ? this.passedElement.triggerEvent(a.EVENTS.removeItem, {\n            id: t,\n            value: i,\n            label: n,\n            groupValue: s.value\n          }) : this.passedElement.triggerEvent(a.EVENTS.removeItem, {\n            id: t,\n            value: i,\n            label: n\n          }), this;\n        }\n      }, {\n        key: \"_addChoice\",\n        value: function value(e) {\n          var t = e.value,\n              i = e.label,\n              n = void 0 === i ? null : i,\n              o = e.isSelected,\n              r = void 0 !== o && o,\n              s = e.isDisabled,\n              a = void 0 !== s && s,\n              c = e.groupId,\n              u = void 0 === c ? -1 : c,\n              h = e.customProperties,\n              d = void 0 === h ? null : h,\n              f = e.placeholder,\n              p = void 0 !== f && f,\n              v = e.keyCode,\n              m = void 0 === v ? null : v;\n\n          if (null != t) {\n            var g = this._store.choices,\n                _ = n || t,\n                y = g ? g.length + 1 : 1,\n                b = \"\".concat(this._baseId, \"-\").concat(this._idNames.itemChoice, \"-\").concat(y);\n\n            this._store.dispatch((0, l.addChoice)({\n              value: t,\n              label: _,\n              id: y,\n              groupId: u,\n              disabled: a,\n              elementId: b,\n              customProperties: d,\n              placeholder: p,\n              keyCode: m\n            })), r && this._addItem({\n              value: t,\n              label: _,\n              choiceId: y,\n              customProperties: d,\n              placeholder: p,\n              keyCode: m\n            });\n          }\n        }\n      }, {\n        key: \"_addGroup\",\n        value: function value(e) {\n          var t = this,\n              i = e.group,\n              n = e.id,\n              o = e.valueKey,\n              r = void 0 === o ? \"value\" : o,\n              s = e.labelKey,\n              a = void 0 === s ? \"label\" : s,\n              c = (0, p.isType)(\"Object\", i) ? i.choices : Array.from(i.getElementsByTagName(\"OPTION\")),\n              l = n || Math.floor(new Date().valueOf() * Math.random()),\n              u = !!i.disabled && i.disabled;\n\n          if (c) {\n            this._store.dispatch((0, h.addGroup)(i.label, l, !0, u));\n\n            c.forEach(function (e) {\n              var i = e.disabled || e.parentNode && e.parentNode.disabled;\n\n              t._addChoice({\n                value: e[r],\n                label: (0, p.isType)(\"Object\", e) ? e[a] : e.innerHTML,\n                isSelected: e.selected,\n                isDisabled: i,\n                groupId: l,\n                customProperties: e.customProperties,\n                placeholder: e.placeholder\n              });\n            });\n          } else this._store.dispatch((0, h.addGroup)(i.label, i.id, !1, i.disabled));\n        }\n      }, {\n        key: \"_getTemplate\",\n        value: function value(e) {\n          var t;\n          if (!e) return null;\n\n          for (var i = this.config, n = i.templates, o = i.classNames, r = arguments.length, s = new Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++) {\n            s[a - 1] = arguments[a];\n          }\n\n          return (t = n[e]).call.apply(t, [this, o].concat(s));\n        }\n      }, {\n        key: \"_createTemplates\",\n        value: function value() {\n          var e = this.config.callbackOnCreateTemplates,\n              t = {};\n          e && (0, p.isType)(\"Function\", e) && (t = e.call(this, p.strToEl)), this.config.templates = (0, o[\"default\"])(c.TEMPLATES, t);\n        }\n      }, {\n        key: \"_createElements\",\n        value: function value() {\n          this.containerOuter = new s.Container({\n            element: this._getTemplate(\"containerOuter\", this._direction, this._isSelectElement, this._isSelectOneElement, this.config.searchEnabled, this.passedElement.element.type),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          }), this.containerInner = new s.Container({\n            element: this._getTemplate(\"containerInner\"),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          }), this.input = new s.Input({\n            element: this._getTemplate(\"input\"),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type\n          }), this.choiceList = new s.List({\n            element: this._getTemplate(\"choiceList\", this._isSelectOneElement)\n          }), this.itemList = new s.List({\n            element: this._getTemplate(\"itemList\", this._isSelectOneElement)\n          }), this.dropdown = new s.Dropdown({\n            element: this._getTemplate(\"dropdown\"),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type\n          });\n        }\n      }, {\n        key: \"_createStructure\",\n        value: function value() {\n          this.passedElement.conceal(), this.containerInner.wrap(this.passedElement.element), this.containerOuter.wrap(this.containerInner.element), this._isSelectOneElement ? this.input.placeholder = this.config.searchPlaceholderValue || \"\" : this._placeholderValue && (this.input.placeholder = this._placeholderValue, this.input.setWidth(!0)), this.containerOuter.element.appendChild(this.containerInner.element), this.containerOuter.element.appendChild(this.dropdown.element), this.containerInner.element.appendChild(this.itemList.element), this._isTextElement || this.dropdown.element.appendChild(this.choiceList.element), this._isSelectOneElement ? this.config.searchEnabled && this.dropdown.element.insertBefore(this.input.element, this.dropdown.element.firstChild) : this.containerInner.element.appendChild(this.input.element), this._isSelectElement ? this._addPredefinedChoices() : this._isTextElement && this._addPredefinedItems();\n        }\n      }, {\n        key: \"_addPredefinedChoices\",\n        value: function value() {\n          var e = this,\n              t = this.passedElement.optionGroups;\n\n          if (this._highlightPosition = 0, this._isSearching = !1, this._setLoading(!0), t && t.length) {\n            var i = this.passedElement.placeholderOption;\n            i && \"SELECT\" === i.parentNode.tagName && this._addChoice({\n              value: i.value,\n              label: i.innerHTML,\n              isSelected: i.selected,\n              isDisabled: i.disabled,\n              placeholder: !0\n            }), t.forEach(function (t) {\n              return e._addGroup({\n                group: t,\n                id: t.id || null\n              });\n            });\n          } else {\n            var n = this.passedElement.options,\n                o = this.config.sortFn,\n                r = this._presetChoices;\n            n.forEach(function (e) {\n              r.push({\n                value: e.value,\n                label: e.innerHTML,\n                selected: e.selected,\n                disabled: e.disabled || e.parentNode.disabled,\n                placeholder: e.hasAttribute(\"placeholder\"),\n                customProperties: e.getAttribute(\"data-custom-properties\")\n              });\n            }), this.config.shouldSort && r.sort(o);\n            var s = r.some(function (e) {\n              return e.selected;\n            });\n            r.forEach(function (t, i) {\n              return function (t, i) {\n                var n = t.value,\n                    o = t.label,\n                    r = t.customProperties,\n                    a = t.placeholder;\n                if (e._isSelectElement) {\n                  if (t.choices) e._addGroup({\n                    group: t,\n                    id: t.id || null\n                  });else {\n                    var c = e._isSelectOneElement && !s && 0 === i,\n                        l = !!c || t.selected,\n                        u = !c && t.disabled;\n\n                    e._addChoice({\n                      value: n,\n                      label: o,\n                      isSelected: l,\n                      isDisabled: u,\n                      customProperties: r,\n                      placeholder: a\n                    });\n                  }\n                } else e._addChoice({\n                  value: n,\n                  label: o,\n                  isSelected: t.selected,\n                  isDisabled: t.disabled,\n                  customProperties: r,\n                  placeholder: a\n                });\n              }(t, i);\n            });\n          }\n\n          this._setLoading(!1);\n        }\n      }, {\n        key: \"_addPredefinedItems\",\n        value: function value() {\n          var e = this;\n\n          this._presetItems.forEach(function (t) {\n            return function (t) {\n              var i = (0, p.getType)(t);\n              \"Object\" === i && t.value ? e._addItem({\n                value: t.value,\n                label: t.label,\n                choiceId: t.id,\n                customProperties: t.customProperties,\n                placeholder: t.placeholder\n              }) : \"String\" === i && e._addItem({\n                value: t\n              });\n            }(t);\n          });\n        }\n      }, {\n        key: \"_setChoiceOrItem\",\n        value: function value(e) {\n          var t = this;\n          ({\n            object: function object() {\n              e.value && (t._isTextElement ? t._addItem({\n                value: e.value,\n                label: e.label,\n                choiceId: e.id,\n                customProperties: e.customProperties,\n                placeholder: e.placeholder\n              }) : t._addChoice({\n                value: e.value,\n                label: e.label,\n                isSelected: !0,\n                isDisabled: !1,\n                customProperties: e.customProperties,\n                placeholder: e.placeholder\n              }));\n            },\n            string: function string() {\n              t._isTextElement ? t._addItem({\n                value: e\n              }) : t._addChoice({\n                value: e,\n                label: e,\n                isSelected: !0,\n                isDisabled: !1\n              });\n            }\n          })[(0, p.getType)(e).toLowerCase()]();\n        }\n      }, {\n        key: \"_findAndSelectChoiceByValue\",\n        value: function value(e) {\n          var t = this,\n              i = this._store.choices.find(function (i) {\n            return t.config.itemComparer(i.value, e);\n          });\n\n          i && !i.selected && this._addItem({\n            value: i.value,\n            label: i.label,\n            choiceId: i.id,\n            groupId: i.groupId,\n            customProperties: i.customProperties,\n            placeholder: i.placeholder,\n            keyCode: i.keyCode\n          });\n        }\n      }, {\n        key: \"_generateInstances\",\n        value: function value(t, i) {\n          return t.reduce(function (t, n) {\n            return t.push(new e(n, i)), t;\n          }, [this]);\n        }\n      }, {\n        key: \"_generatePlaceholderValue\",\n        value: function value() {\n          return !this._isSelectOneElement && !!this.config.placeholder && (this.config.placeholderValue || this.passedElement.element.getAttribute(\"placeholder\"));\n        }\n      }]) && g(t.prototype, i), v && g(t, v), e;\n    }();\n\n    _.userDefaults = {}, e.exports = _;\n  }, function (e, t, i) {\n    /*!\n     * Fuse.js v3.4.2 - Lightweight fuzzy-search (http://fusejs.io)\n     *\n     * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\n     * All Rights Reserved. Apache Software License 2.0\n     *\n     * http://www.apache.org/licenses/LICENSE-2.0\n     */\n    var n;\n    n = function n() {\n      return function (e) {\n        var t = {};\n\n        function i(n) {\n          if (t[n]) return t[n].exports;\n          var o = t[n] = {\n            i: n,\n            l: !1,\n            exports: {}\n          };\n          return e[n].call(o.exports, o, o.exports, i), o.l = !0, o.exports;\n        }\n\n        return i.m = e, i.c = t, i.d = function (e, t, n) {\n          i.o(e, t) || Object.defineProperty(e, t, {\n            enumerable: !0,\n            get: n\n          });\n        }, i.r = function (e) {\n          \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n            value: \"Module\"\n          }), Object.defineProperty(e, \"__esModule\", {\n            value: !0\n          });\n        }, i.t = function (e, t) {\n          if (1 & t && (e = i(e)), 8 & t) return e;\n          if (4 & t && \"object\" == _typeof(e) && e && e.__esModule) return e;\n          var n = Object.create(null);\n          if (i.r(n), Object.defineProperty(n, \"default\", {\n            enumerable: !0,\n            value: e\n          }), 2 & t && \"string\" != typeof e) for (var o in e) {\n            i.d(n, o, function (t) {\n              return e[t];\n            }.bind(null, o));\n          }\n          return n;\n        }, i.n = function (e) {\n          var t = e && e.__esModule ? function () {\n            return e[\"default\"];\n          } : function () {\n            return e;\n          };\n          return i.d(t, \"a\", t), t;\n        }, i.o = function (e, t) {\n          return Object.prototype.hasOwnProperty.call(e, t);\n        }, i.p = \"\", i(i.s = \"./src/index.js\");\n      }({\n        \"./src/bitap/bitap_matched_indices.js\":\n        /*!********************************************!*\\\n          !*** ./src/bitap/bitap_matched_indices.js ***!\n          \\********************************************/\n\n        /*! no static exports found */\n        function srcBitapBitap_matched_indicesJs(e, t) {\n          e.exports = function () {\n            for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i = [], n = -1, o = -1, r = 0, s = e.length; r < s; r += 1) {\n              var a = e[r];\n              a && -1 === n ? n = r : a || -1 === n || ((o = r - 1) - n + 1 >= t && i.push([n, o]), n = -1);\n            }\n\n            return e[r - 1] && r - n >= t && i.push([n, r - 1]), i;\n          };\n        },\n        \"./src/bitap/bitap_pattern_alphabet.js\":\n        /*!*********************************************!*\\\n          !*** ./src/bitap/bitap_pattern_alphabet.js ***!\n          \\*********************************************/\n\n        /*! no static exports found */\n        function srcBitapBitap_pattern_alphabetJs(e, t) {\n          e.exports = function (e) {\n            for (var t = {}, i = e.length, n = 0; n < i; n += 1) {\n              t[e.charAt(n)] = 0;\n            }\n\n            for (var o = 0; o < i; o += 1) {\n              t[e.charAt(o)] |= 1 << i - o - 1;\n            }\n\n            return t;\n          };\n        },\n        \"./src/bitap/bitap_regex_search.js\":\n        /*!*****************************************!*\\\n          !*** ./src/bitap/bitap_regex_search.js ***!\n          \\*****************************************/\n\n        /*! no static exports found */\n        function srcBitapBitap_regex_searchJs(e, t) {\n          var i = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n\n          e.exports = function (e, t) {\n            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : / +/g,\n                o = new RegExp(t.replace(i, \"\\\\$&\").replace(n, \"|\")),\n                r = e.match(o),\n                s = !!r,\n                a = [];\n            if (s) for (var c = 0, l = r.length; c < l; c += 1) {\n              var u = r[c];\n              a.push([e.indexOf(u), u.length - 1]);\n            }\n            return {\n              score: s ? .5 : 1,\n              isMatch: s,\n              matchedIndices: a\n            };\n          };\n        },\n        \"./src/bitap/bitap_score.js\":\n        /*!**********************************!*\\\n          !*** ./src/bitap/bitap_score.js ***!\n          \\**********************************/\n\n        /*! no static exports found */\n        function srcBitapBitap_scoreJs(e, t) {\n          e.exports = function (e, t) {\n            var i = t.errors,\n                n = void 0 === i ? 0 : i,\n                o = t.currentLocation,\n                r = void 0 === o ? 0 : o,\n                s = t.expectedLocation,\n                a = void 0 === s ? 0 : s,\n                c = t.distance,\n                l = void 0 === c ? 100 : c,\n                u = n / e.length,\n                h = Math.abs(a - r);\n            return l ? u + h / l : h ? 1 : u;\n          };\n        },\n        \"./src/bitap/bitap_search.js\":\n        /*!***********************************!*\\\n          !*** ./src/bitap/bitap_search.js ***!\n          \\***********************************/\n\n        /*! no static exports found */\n        function srcBitapBitap_searchJs(e, t, i) {\n          var n = i(\n          /*! ./bitap_score */\n          \"./src/bitap/bitap_score.js\"),\n              o = i(\n          /*! ./bitap_matched_indices */\n          \"./src/bitap/bitap_matched_indices.js\");\n\n          e.exports = function (e, t, i, r) {\n            for (var s = r.location, a = void 0 === s ? 0 : s, c = r.distance, l = void 0 === c ? 100 : c, u = r.threshold, h = void 0 === u ? .6 : u, d = r.findAllMatches, f = void 0 !== d && d, p = r.minMatchCharLength, v = void 0 === p ? 1 : p, m = a, g = e.length, _ = h, y = e.indexOf(t, m), b = t.length, E = [], S = 0; S < g; S += 1) {\n              E[S] = 0;\n            }\n\n            if (-1 !== y) {\n              var I = n(t, {\n                errors: 0,\n                currentLocation: y,\n                expectedLocation: m,\n                distance: l\n              });\n\n              if (_ = Math.min(I, _), -1 !== (y = e.lastIndexOf(t, m + b))) {\n                var O = n(t, {\n                  errors: 0,\n                  currentLocation: y,\n                  expectedLocation: m,\n                  distance: l\n                });\n                _ = Math.min(O, _);\n              }\n            }\n\n            y = -1;\n\n            for (var C = [], T = 1, w = b + g, k = 1 << b - 1, A = 0; A < b; A += 1) {\n              for (var L = 0, x = w; L < x;) {\n                n(t, {\n                  errors: A,\n                  currentLocation: m + x,\n                  expectedLocation: m,\n                  distance: l\n                }) <= _ ? L = x : w = x, x = Math.floor((w - L) / 2 + L);\n              }\n\n              w = x;\n              var P = Math.max(1, m - x + 1),\n                  D = f ? g : Math.min(m + x, g) + b,\n                  j = Array(D + 2);\n              j[D + 1] = (1 << A) - 1;\n\n              for (var M = D; M >= P; M -= 1) {\n                var N = M - 1,\n                    F = i[e.charAt(N)];\n\n                if (F && (E[N] = 1), j[M] = (j[M + 1] << 1 | 1) & F, 0 !== A && (j[M] |= (C[M + 1] | C[M]) << 1 | 1 | C[M + 1]), j[M] & k && (T = n(t, {\n                  errors: A,\n                  currentLocation: N,\n                  expectedLocation: m,\n                  distance: l\n                })) <= _) {\n                  if (_ = T, (y = N) <= m) break;\n                  P = Math.max(1, 2 * m - y);\n                }\n              }\n\n              if (n(t, {\n                errors: A + 1,\n                currentLocation: m,\n                expectedLocation: m,\n                distance: l\n              }) > _) break;\n              C = j;\n            }\n\n            return {\n              isMatch: y >= 0,\n              score: 0 === T ? .001 : T,\n              matchedIndices: o(E, v)\n            };\n          };\n        },\n        \"./src/bitap/index.js\":\n        /*!****************************!*\\\n          !*** ./src/bitap/index.js ***!\n          \\****************************/\n\n        /*! no static exports found */\n        function srcBitapIndexJs(e, t, i) {\n          function n(e, t) {\n            for (var i = 0; i < t.length; i++) {\n              var n = t[i];\n              n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n            }\n          }\n\n          var o = i(\n          /*! ./bitap_regex_search */\n          \"./src/bitap/bitap_regex_search.js\"),\n              r = i(\n          /*! ./bitap_search */\n          \"./src/bitap/bitap_search.js\"),\n              s = i(\n          /*! ./bitap_pattern_alphabet */\n          \"./src/bitap/bitap_pattern_alphabet.js\"),\n              a = function () {\n            function e(t, i) {\n              var n = i.location,\n                  o = void 0 === n ? 0 : n,\n                  r = i.distance,\n                  a = void 0 === r ? 100 : r,\n                  c = i.threshold,\n                  l = void 0 === c ? .6 : c,\n                  u = i.maxPatternLength,\n                  h = void 0 === u ? 32 : u,\n                  d = i.isCaseSensitive,\n                  f = void 0 !== d && d,\n                  p = i.tokenSeparator,\n                  v = void 0 === p ? / +/g : p,\n                  m = i.findAllMatches,\n                  g = void 0 !== m && m,\n                  _ = i.minMatchCharLength,\n                  y = void 0 === _ ? 1 : _;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: a,\n                threshold: l,\n                maxPatternLength: h,\n                isCaseSensitive: f,\n                tokenSeparator: v,\n                findAllMatches: g,\n                minMatchCharLength: y\n              }, this.pattern = this.options.isCaseSensitive ? t : t.toLowerCase(), this.pattern.length <= h && (this.patternAlphabet = s(this.pattern));\n            }\n\n            var t, i, a;\n            return t = e, (i = [{\n              key: \"search\",\n              value: function value(e) {\n                if (this.options.isCaseSensitive || (e = e.toLowerCase()), this.pattern === e) return {\n                  isMatch: !0,\n                  score: 0,\n                  matchedIndices: [[0, e.length - 1]]\n                };\n                var t = this.options,\n                    i = t.maxPatternLength,\n                    n = t.tokenSeparator;\n                if (this.pattern.length > i) return o(e, this.pattern, n);\n                var s = this.options,\n                    a = s.location,\n                    c = s.distance,\n                    l = s.threshold,\n                    u = s.findAllMatches,\n                    h = s.minMatchCharLength;\n                return r(e, this.pattern, this.patternAlphabet, {\n                  location: a,\n                  distance: c,\n                  threshold: l,\n                  findAllMatches: u,\n                  minMatchCharLength: h\n                });\n              }\n            }]) && n(t.prototype, i), a && n(t, a), e;\n          }();\n\n          e.exports = a;\n        },\n        \"./src/helpers/deep_value.js\":\n        /*!***********************************!*\\\n          !*** ./src/helpers/deep_value.js ***!\n          \\***********************************/\n\n        /*! no static exports found */\n        function srcHelpersDeep_valueJs(e, t, i) {\n          var n = i(\n          /*! ./is_array */\n          \"./src/helpers/is_array.js\");\n\n          e.exports = function (e, t) {\n            return function e(t, i, o) {\n              if (i) {\n                var r = i.indexOf(\".\"),\n                    s = i,\n                    a = null;\n                -1 !== r && (s = i.slice(0, r), a = i.slice(r + 1));\n                var c = t[s];\n                if (null != c) if (a || \"string\" != typeof c && \"number\" != typeof c) {\n                  if (n(c)) for (var l = 0, u = c.length; l < u; l += 1) {\n                    e(c[l], a, o);\n                  } else a && e(c, a, o);\n                } else o.push(c.toString());\n              } else o.push(t);\n\n              return o;\n            }(e, t, []);\n          };\n        },\n        \"./src/helpers/is_array.js\":\n        /*!*********************************!*\\\n          !*** ./src/helpers/is_array.js ***!\n          \\*********************************/\n\n        /*! no static exports found */\n        function srcHelpersIs_arrayJs(e, t) {\n          e.exports = function (e) {\n            return Array.isArray ? Array.isArray(e) : \"[object Array]\" === Object.prototype.toString.call(e);\n          };\n        },\n        \"./src/index.js\":\n        /*!**********************!*\\\n          !*** ./src/index.js ***!\n          \\**********************/\n\n        /*! no static exports found */\n        function srcIndexJs(e, t, i) {\n          function n(e) {\n            return (n = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n              return _typeof(e);\n            } : function (e) {\n              return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n            })(e);\n          }\n\n          function o(e, t) {\n            for (var i = 0; i < t.length; i++) {\n              var n = t[i];\n              n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n            }\n          }\n\n          var r = i(\n          /*! ./bitap */\n          \"./src/bitap/index.js\"),\n              s = i(\n          /*! ./helpers/deep_value */\n          \"./src/helpers/deep_value.js\"),\n              a = i(\n          /*! ./helpers/is_array */\n          \"./src/helpers/is_array.js\"),\n              c = function () {\n            function e(t, i) {\n              var n = i.location,\n                  o = void 0 === n ? 0 : n,\n                  r = i.distance,\n                  a = void 0 === r ? 100 : r,\n                  c = i.threshold,\n                  l = void 0 === c ? .6 : c,\n                  u = i.maxPatternLength,\n                  h = void 0 === u ? 32 : u,\n                  d = i.caseSensitive,\n                  f = void 0 !== d && d,\n                  p = i.tokenSeparator,\n                  v = void 0 === p ? / +/g : p,\n                  m = i.findAllMatches,\n                  g = void 0 !== m && m,\n                  _ = i.minMatchCharLength,\n                  y = void 0 === _ ? 1 : _,\n                  b = i.id,\n                  E = void 0 === b ? null : b,\n                  S = i.keys,\n                  I = void 0 === S ? [] : S,\n                  O = i.shouldSort,\n                  C = void 0 === O || O,\n                  T = i.getFn,\n                  w = void 0 === T ? s : T,\n                  k = i.sortFn,\n                  A = void 0 === k ? function (e, t) {\n                return e.score - t.score;\n              } : k,\n                  L = i.tokenize,\n                  x = void 0 !== L && L,\n                  P = i.matchAllTokens,\n                  D = void 0 !== P && P,\n                  j = i.includeMatches,\n                  M = void 0 !== j && j,\n                  N = i.includeScore,\n                  F = void 0 !== N && N,\n                  K = i.verbose,\n                  R = void 0 !== K && K;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: a,\n                threshold: l,\n                maxPatternLength: h,\n                isCaseSensitive: f,\n                tokenSeparator: v,\n                findAllMatches: g,\n                minMatchCharLength: y,\n                id: E,\n                keys: I,\n                includeMatches: M,\n                includeScore: F,\n                shouldSort: C,\n                getFn: w,\n                sortFn: A,\n                verbose: R,\n                tokenize: x,\n                matchAllTokens: D\n              }, this.setCollection(t);\n            }\n\n            var t, i, c;\n            return t = e, (i = [{\n              key: \"setCollection\",\n              value: function value(e) {\n                return this.list = e, e;\n              }\n            }, {\n              key: \"search\",\n              value: function value(e) {\n                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {\n                  limit: !1\n                };\n\n                this._log('---------\\nSearch pattern: \"'.concat(e, '\"'));\n\n                var i = this._prepareSearchers(e),\n                    n = i.tokenSearchers,\n                    o = i.fullSearcher,\n                    r = this._search(n, o),\n                    s = r.weights,\n                    a = r.results;\n\n                return this._computeScore(s, a), this.options.shouldSort && this._sort(a), t.limit && \"number\" == typeof t.limit && (a = a.slice(0, t.limit)), this._format(a);\n              }\n            }, {\n              key: \"_prepareSearchers\",\n              value: function value() {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n                    t = [];\n                if (this.options.tokenize) for (var i = e.split(this.options.tokenSeparator), n = 0, o = i.length; n < o; n += 1) {\n                  t.push(new r(i[n], this.options));\n                }\n                return {\n                  tokenSearchers: t,\n                  fullSearcher: new r(e, this.options)\n                };\n              }\n            }, {\n              key: \"_search\",\n              value: function value() {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n                    t = arguments.length > 1 ? arguments[1] : void 0,\n                    i = this.list,\n                    n = {},\n                    o = [];\n\n                if (\"string\" == typeof i[0]) {\n                  for (var r = 0, s = i.length; r < s; r += 1) {\n                    this._analyze({\n                      key: \"\",\n                      value: i[r],\n                      record: r,\n                      index: r\n                    }, {\n                      resultMap: n,\n                      results: o,\n                      tokenSearchers: e,\n                      fullSearcher: t\n                    });\n                  }\n\n                  return {\n                    weights: null,\n                    results: o\n                  };\n                }\n\n                for (var a = {}, c = 0, l = i.length; c < l; c += 1) {\n                  for (var u = i[c], h = 0, d = this.options.keys.length; h < d; h += 1) {\n                    var f = this.options.keys[h];\n\n                    if (\"string\" != typeof f) {\n                      if (a[f.name] = {\n                        weight: 1 - f.weight || 1\n                      }, f.weight <= 0 || f.weight > 1) throw new Error(\"Key weight has to be > 0 and <= 1\");\n                      f = f.name;\n                    } else a[f] = {\n                      weight: 1\n                    };\n\n                    this._analyze({\n                      key: f,\n                      value: this.options.getFn(u, f),\n                      record: u,\n                      index: c\n                    }, {\n                      resultMap: n,\n                      results: o,\n                      tokenSearchers: e,\n                      fullSearcher: t\n                    });\n                  }\n                }\n\n                return {\n                  weights: a,\n                  results: o\n                };\n              }\n            }, {\n              key: \"_analyze\",\n              value: function value(e, t) {\n                var i = e.key,\n                    n = e.arrayIndex,\n                    o = void 0 === n ? -1 : n,\n                    r = e.value,\n                    s = e.record,\n                    c = e.index,\n                    l = t.tokenSearchers,\n                    u = void 0 === l ? [] : l,\n                    h = t.fullSearcher,\n                    d = void 0 === h ? [] : h,\n                    f = t.resultMap,\n                    p = void 0 === f ? {} : f,\n                    v = t.results,\n                    m = void 0 === v ? [] : v;\n\n                if (null != r) {\n                  var g = !1,\n                      _ = -1,\n                      y = 0;\n\n                  if (\"string\" == typeof r) {\n                    this._log(\"\\nKey: \".concat(\"\" === i ? \"-\" : i));\n\n                    var b = d.search(r);\n\n                    if (this._log('Full text: \"'.concat(r, '\", score: ').concat(b.score)), this.options.tokenize) {\n                      for (var E = r.split(this.options.tokenSeparator), S = [], I = 0; I < u.length; I += 1) {\n                        var O = u[I];\n\n                        this._log('\\nPattern: \"'.concat(O.pattern, '\"'));\n\n                        for (var C = !1, T = 0; T < E.length; T += 1) {\n                          var w = E[T],\n                              k = O.search(w),\n                              A = {};\n                          k.isMatch ? (A[w] = k.score, g = !0, C = !0, S.push(k.score)) : (A[w] = 1, this.options.matchAllTokens || S.push(1)), this._log('Token: \"'.concat(w, '\", score: ').concat(A[w]));\n                        }\n\n                        C && (y += 1);\n                      }\n\n                      _ = S[0];\n\n                      for (var L = S.length, x = 1; x < L; x += 1) {\n                        _ += S[x];\n                      }\n\n                      _ /= L, this._log(\"Token score average:\", _);\n                    }\n\n                    var P = b.score;\n                    _ > -1 && (P = (P + _) / 2), this._log(\"Score average:\", P);\n                    var D = !this.options.tokenize || !this.options.matchAllTokens || y >= u.length;\n\n                    if (this._log(\"\\nCheck Matches: \".concat(D)), (g || b.isMatch) && D) {\n                      var j = p[c];\n                      j ? j.output.push({\n                        key: i,\n                        arrayIndex: o,\n                        value: r,\n                        score: P,\n                        matchedIndices: b.matchedIndices\n                      }) : (p[c] = {\n                        item: s,\n                        output: [{\n                          key: i,\n                          arrayIndex: o,\n                          value: r,\n                          score: P,\n                          matchedIndices: b.matchedIndices\n                        }]\n                      }, m.push(p[c]));\n                    }\n                  } else if (a(r)) for (var M = 0, N = r.length; M < N; M += 1) {\n                    this._analyze({\n                      key: i,\n                      arrayIndex: M,\n                      value: r[M],\n                      record: s,\n                      index: c\n                    }, {\n                      resultMap: p,\n                      results: m,\n                      tokenSearchers: u,\n                      fullSearcher: d\n                    });\n                  }\n                }\n              }\n            }, {\n              key: \"_computeScore\",\n              value: function value(e, t) {\n                this._log(\"\\n\\nComputing score:\\n\");\n\n                for (var i = 0, n = t.length; i < n; i += 1) {\n                  for (var o = t[i].output, r = o.length, s = 1, a = 1, c = 0; c < r; c += 1) {\n                    var l = e ? e[o[c].key].weight : 1,\n                        u = (1 === l ? o[c].score : o[c].score || .001) * l;\n                    1 !== l ? a = Math.min(a, u) : (o[c].nScore = u, s *= u);\n                  }\n\n                  t[i].score = 1 === a ? s : a, this._log(t[i]);\n                }\n              }\n            }, {\n              key: \"_sort\",\n              value: function value(e) {\n                this._log(\"\\n\\nSorting....\"), e.sort(this.options.sortFn);\n              }\n            }, {\n              key: \"_format\",\n              value: function value(e) {\n                var t = [];\n\n                if (this.options.verbose) {\n                  var i = [];\n                  this._log(\"\\n\\nOutput:\\n\\n\", JSON.stringify(e, function (e, t) {\n                    if (\"object\" === n(t) && null !== t) {\n                      if (-1 !== i.indexOf(t)) return;\n                      i.push(t);\n                    }\n\n                    return t;\n                  })), i = null;\n                }\n\n                var o = [];\n                this.options.includeMatches && o.push(function (e, t) {\n                  var i = e.output;\n                  t.matches = [];\n\n                  for (var n = 0, o = i.length; n < o; n += 1) {\n                    var r = i[n];\n\n                    if (0 !== r.matchedIndices.length) {\n                      var s = {\n                        indices: r.matchedIndices,\n                        value: r.value\n                      };\n                      r.key && (s.key = r.key), r.hasOwnProperty(\"arrayIndex\") && r.arrayIndex > -1 && (s.arrayIndex = r.arrayIndex), t.matches.push(s);\n                    }\n                  }\n                }), this.options.includeScore && o.push(function (e, t) {\n                  t.score = e.score;\n                });\n\n                for (var r = 0, s = e.length; r < s; r += 1) {\n                  var a = e[r];\n\n                  if (this.options.id && (a.item = this.options.getFn(a.item, this.options.id)[0]), o.length) {\n                    for (var c = {\n                      item: a.item\n                    }, l = 0, u = o.length; l < u; l += 1) {\n                      o[l](a, c);\n                    }\n\n                    t.push(c);\n                  } else t.push(a.item);\n                }\n\n                return t;\n              }\n            }, {\n              key: \"_log\",\n              value: function value() {\n                var e;\n                this.options.verbose && (e = console).log.apply(e, arguments);\n              }\n            }]) && o(t.prototype, i), c && o(t, c), e;\n          }();\n\n          e.exports = c;\n        }\n      });\n    }, e.exports = n();\n  }, function (e, t, i) {\n    \"use strict\";\n\n    i.r(t);\n\n    var n = function n(e) {\n      return function (e) {\n        return !!e && \"object\" == _typeof(e);\n      }(e) && !function (e) {\n        var t = Object.prototype.toString.call(e);\n        return \"[object RegExp]\" === t || \"[object Date]\" === t || function (e) {\n          return e.$$typeof === o;\n        }(e);\n      }(e);\n    };\n\n    var o = \"function\" == typeof Symbol && Symbol[\"for\"] ? Symbol[\"for\"](\"react.element\") : 60103;\n\n    function r(e, t) {\n      return !1 !== t.clone && t.isMergeableObject(e) ? a((i = e, Array.isArray(i) ? [] : {}), e, t) : e;\n      var i;\n    }\n\n    function s(e, t, i) {\n      return e.concat(t).map(function (e) {\n        return r(e, i);\n      });\n    }\n\n    function a(e, t, i) {\n      (i = i || {}).arrayMerge = i.arrayMerge || s, i.isMergeableObject = i.isMergeableObject || n;\n      var o = Array.isArray(t);\n      return o === Array.isArray(e) ? o ? i.arrayMerge(e, t, i) : function (e, t, i) {\n        var n = {};\n        return i.isMergeableObject(e) && Object.keys(e).forEach(function (t) {\n          n[t] = r(e[t], i);\n        }), Object.keys(t).forEach(function (o) {\n          i.isMergeableObject(t[o]) && e[o] ? n[o] = a(e[o], t[o], i) : n[o] = r(t[o], i);\n        }), n;\n      }(e, t, i) : r(t, i);\n    }\n\n    a.all = function (e, t) {\n      if (!Array.isArray(e)) throw new Error(\"first argument should be an array\");\n      return e.reduce(function (e, i) {\n        return a(e, i, t);\n      }, {});\n    };\n\n    var c = a;\n    t[\"default\"] = c;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n,\n        o = i(6),\n        r = (n = i(15)) && n.__esModule ? n : {\n      \"default\": n\n    };\n\n    function s(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var a = function () {\n      function e() {\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), this._store = (0, o.createStore)(r[\"default\"], window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n      }\n\n      var t, i, n;\n      return t = e, (i = [{\n        key: \"subscribe\",\n        value: function value(e) {\n          this._store.subscribe(e);\n        }\n      }, {\n        key: \"dispatch\",\n        value: function value(e) {\n          this._store.dispatch(e);\n        }\n      }, {\n        key: \"isLoading\",\n        value: function value() {\n          return this.state.general.loading;\n        }\n      }, {\n        key: \"getChoiceById\",\n        value: function value(e) {\n          return !!e && this.activeChoices.find(function (t) {\n            return t.id === parseInt(e, 10);\n          });\n        }\n      }, {\n        key: \"getGroupById\",\n        value: function value(e) {\n          return this.groups.find(function (t) {\n            return t.id === parseInt(e, 10);\n          });\n        }\n      }, {\n        key: \"state\",\n        get: function get() {\n          return this._store.getState();\n        }\n      }, {\n        key: \"items\",\n        get: function get() {\n          return this.state.items;\n        }\n      }, {\n        key: \"activeItems\",\n        get: function get() {\n          return this.items.filter(function (e) {\n            return !0 === e.active;\n          });\n        }\n      }, {\n        key: \"highlightedActiveItems\",\n        get: function get() {\n          return this.items.filter(function (e) {\n            return e.active && e.highlighted;\n          });\n        }\n      }, {\n        key: \"choices\",\n        get: function get() {\n          return this.state.choices;\n        }\n      }, {\n        key: \"activeChoices\",\n        get: function get() {\n          return this.choices.filter(function (e) {\n            return !0 === e.active;\n          });\n        }\n      }, {\n        key: \"selectableChoices\",\n        get: function get() {\n          return this.choices.filter(function (e) {\n            return !0 !== e.disabled;\n          });\n        }\n      }, {\n        key: \"searchableChoices\",\n        get: function get() {\n          return this.selectableChoices.filter(function (e) {\n            return !0 !== e.placeholder;\n          });\n        }\n      }, {\n        key: \"placeholderChoice\",\n        get: function get() {\n          return [].concat(this.choices).reverse().find(function (e) {\n            return !0 === e.placeholder;\n          });\n        }\n      }, {\n        key: \"groups\",\n        get: function get() {\n          return this.state.groups;\n        }\n      }, {\n        key: \"activeGroups\",\n        get: function get() {\n          var e = this.groups,\n              t = this.choices;\n          return e.filter(function (e) {\n            var i = !0 === e.active && !1 === e.disabled,\n                n = t.some(function (e) {\n              return !0 === e.active && !1 === e.disabled;\n            });\n            return i && n;\n          }, []);\n        }\n      }]) && s(t.prototype, i), n && s(t, n), e;\n    }();\n\n    t[\"default\"] = a;\n  }, function (e, t) {\n    e.exports = function (e) {\n      if (!e.webpackPolyfill) {\n        var t = Object.create(e);\n        t.children || (t.children = []), Object.defineProperty(t, \"loaded\", {\n          enumerable: !0,\n          get: function get() {\n            return t.l;\n          }\n        }), Object.defineProperty(t, \"id\", {\n          enumerable: !0,\n          get: function get() {\n            return t.i;\n          }\n        }), Object.defineProperty(t, \"exports\", {\n          enumerable: !0\n        }), t.webpackPolyfill = 1;\n      }\n\n      return t;\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = i(6),\n        o = l(i(16)),\n        r = l(i(17)),\n        s = l(i(18)),\n        a = l(i(19)),\n        c = i(0);\n\n    function l(e) {\n      return e && e.__esModule ? e : {\n        \"default\": e\n      };\n    }\n\n    var u = (0, n.combineReducers)({\n      items: o[\"default\"],\n      groups: r[\"default\"],\n      choices: s[\"default\"],\n      general: a[\"default\"]\n    }),\n        h = function h(e, t) {\n      var i = e;\n      if (\"CLEAR_ALL\" === t.type) i = void 0;else if (\"RESET_TO\" === t.type) return (0, c.cloneObject)(t.state);\n      return u(i, t);\n    };\n\n    t[\"default\"] = h;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = function () {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n,\n          t = arguments.length > 1 ? arguments[1] : void 0;\n\n      switch (t.type) {\n        case \"ADD_ITEM\":\n          var i = [].concat(e, [{\n            id: t.id,\n            choiceId: t.choiceId,\n            groupId: t.groupId,\n            value: t.value,\n            label: t.label,\n            active: !0,\n            highlighted: !1,\n            customProperties: t.customProperties,\n            placeholder: t.placeholder || !1,\n            keyCode: null\n          }]);\n          return i.map(function (e) {\n            var t = e;\n            return t.highlighted = !1, t;\n          });\n\n        case \"REMOVE_ITEM\":\n          return e.map(function (e) {\n            var i = e;\n            return i.id === t.id && (i.active = !1), i;\n          });\n\n        case \"HIGHLIGHT_ITEM\":\n          return e.map(function (e) {\n            var i = e;\n            return i.id === t.id && (i.highlighted = t.highlighted), i;\n          });\n\n        default:\n          return e;\n      }\n    }, t.defaultState = void 0;\n    var n = [];\n    t.defaultState = n;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = function () {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n,\n          t = arguments.length > 1 ? arguments[1] : void 0;\n\n      switch (t.type) {\n        case \"ADD_GROUP\":\n          return [].concat(e, [{\n            id: t.id,\n            value: t.value,\n            active: t.active,\n            disabled: t.disabled\n          }]);\n\n        case \"CLEAR_CHOICES\":\n          return [];\n\n        default:\n          return e;\n      }\n    }, t.defaultState = void 0;\n    var n = [];\n    t.defaultState = n;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = function () {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n,\n          t = arguments.length > 1 ? arguments[1] : void 0;\n\n      switch (t.type) {\n        case \"ADD_CHOICE\":\n          return [].concat(e, [{\n            id: t.id,\n            elementId: t.elementId,\n            groupId: t.groupId,\n            value: t.value,\n            label: t.label || t.value,\n            disabled: t.disabled || !1,\n            selected: !1,\n            active: !0,\n            score: 9999,\n            customProperties: t.customProperties,\n            placeholder: t.placeholder || !1,\n            keyCode: null\n          }]);\n\n        case \"ADD_ITEM\":\n          return t.activateOptions ? e.map(function (e) {\n            var i = e;\n            return i.active = t.active, i;\n          }) : t.choiceId > -1 ? e.map(function (e) {\n            var i = e;\n            return i.id === parseInt(t.choiceId, 10) && (i.selected = !0), i;\n          }) : e;\n\n        case \"REMOVE_ITEM\":\n          return t.choiceId > -1 ? e.map(function (e) {\n            var i = e;\n            return i.id === parseInt(t.choiceId, 10) && (i.selected = !1), i;\n          }) : e;\n\n        case \"FILTER_CHOICES\":\n          return e.map(function (e) {\n            var i = e;\n            return i.active = t.results.some(function (e) {\n              var t = e.item,\n                  n = e.score;\n              return t.id === i.id && (i.score = n, !0);\n            }), i;\n          });\n\n        case \"ACTIVATE_CHOICES\":\n          return e.map(function (e) {\n            var i = e;\n            return i.active = t.active, i;\n          });\n\n        case \"CLEAR_CHOICES\":\n          return n;\n\n        default:\n          return e;\n      }\n    }, t.defaultState = void 0;\n    var n = [];\n    t.defaultState = n;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = t.defaultState = void 0;\n    var n = {\n      loading: !1\n    };\n    t.defaultState = n;\n\n    var o = function o() {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n,\n          t = arguments.length > 1 ? arguments[1] : void 0;\n\n      switch (t.type) {\n        case \"SET_IS_LOADING\":\n          return {\n            loading: t.isLoading\n          };\n\n        default:\n          return e;\n      }\n    };\n\n    t[\"default\"] = o;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), Object.defineProperty(t, \"Dropdown\", {\n      enumerable: !0,\n      get: function get() {\n        return n[\"default\"];\n      }\n    }), Object.defineProperty(t, \"Container\", {\n      enumerable: !0,\n      get: function get() {\n        return o[\"default\"];\n      }\n    }), Object.defineProperty(t, \"Input\", {\n      enumerable: !0,\n      get: function get() {\n        return r[\"default\"];\n      }\n    }), Object.defineProperty(t, \"List\", {\n      enumerable: !0,\n      get: function get() {\n        return s[\"default\"];\n      }\n    }), Object.defineProperty(t, \"WrappedInput\", {\n      enumerable: !0,\n      get: function get() {\n        return a[\"default\"];\n      }\n    }), Object.defineProperty(t, \"WrappedSelect\", {\n      enumerable: !0,\n      get: function get() {\n        return c[\"default\"];\n      }\n    });\n    var n = l(i(21)),\n        o = l(i(22)),\n        r = l(i(23)),\n        s = l(i(24)),\n        a = l(i(25)),\n        c = l(i(26));\n\n    function l(e) {\n      return e && e.__esModule ? e : {\n        \"default\": e\n      };\n    }\n  }, function (e, t, i) {\n    \"use strict\";\n\n    function n(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n\n    var o = function () {\n      function e(t) {\n        var i = t.element,\n            n = t.type,\n            o = t.classNames;\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), Object.assign(this, {\n          element: i,\n          type: n,\n          classNames: o\n        }), this.isActive = !1;\n      }\n\n      var t, i, o;\n      return t = e, (i = [{\n        key: \"distanceFromTopWindow\",\n        value: function value() {\n          return this.dimensions = this.element.getBoundingClientRect(), this.position = Math.ceil(this.dimensions.top + window.pageYOffset + this.element.offsetHeight), this.position;\n        }\n      }, {\n        key: \"getChild\",\n        value: function value(e) {\n          return this.element.querySelector(e);\n        }\n      }, {\n        key: \"show\",\n        value: function value() {\n          return this.element.classList.add(this.classNames.activeState), this.element.setAttribute(\"aria-expanded\", \"true\"), this.isActive = !0, this;\n        }\n      }, {\n        key: \"hide\",\n        value: function value() {\n          return this.element.classList.remove(this.classNames.activeState), this.element.setAttribute(\"aria-expanded\", \"false\"), this.isActive = !1, this;\n        }\n      }]) && n(t.prototype, i), o && n(t, o), e;\n    }();\n\n    t[\"default\"] = o;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = i(0);\n\n    function o(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var r = function () {\n      function e(t) {\n        var i = t.element,\n            n = t.type,\n            o = t.classNames,\n            r = t.position;\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), Object.assign(this, {\n          element: i,\n          classNames: o,\n          type: n,\n          position: r\n        }), this.isOpen = !1, this.isFlipped = !1, this.isFocussed = !1, this.isDisabled = !1, this.isLoading = !1, this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this);\n      }\n\n      var t, i, r;\n      return t = e, (i = [{\n        key: \"addEventListeners\",\n        value: function value() {\n          this.element.addEventListener(\"focus\", this._onFocus), this.element.addEventListener(\"blur\", this._onBlur);\n        }\n      }, {\n        key: \"removeEventListeners\",\n        value: function value() {\n          this.element.removeEventListener(\"focus\", this._onFocus), this.element.removeEventListener(\"blur\", this._onBlur);\n        }\n      }, {\n        key: \"shouldFlip\",\n        value: function value(e) {\n          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (0, n.getWindowHeight)();\n          if (void 0 === e) return !1;\n          var i = !1;\n          return \"auto\" === this.position ? i = e >= t : \"top\" === this.position && (i = !0), i;\n        }\n      }, {\n        key: \"setActiveDescendant\",\n        value: function value(e) {\n          this.element.setAttribute(\"aria-activedescendant\", e);\n        }\n      }, {\n        key: \"removeActiveDescendant\",\n        value: function value() {\n          this.element.removeAttribute(\"aria-activedescendant\");\n        }\n      }, {\n        key: \"open\",\n        value: function value(e) {\n          this.element.classList.add(this.classNames.openState), this.element.setAttribute(\"aria-expanded\", \"true\"), this.isOpen = !0, this.shouldFlip(e) && (this.element.classList.add(this.classNames.flippedState), this.isFlipped = !0);\n        }\n      }, {\n        key: \"close\",\n        value: function value() {\n          this.element.classList.remove(this.classNames.openState), this.element.setAttribute(\"aria-expanded\", \"false\"), this.removeActiveDescendant(), this.isOpen = !1, this.isFlipped && (this.element.classList.remove(this.classNames.flippedState), this.isFlipped = !1);\n        }\n      }, {\n        key: \"focus\",\n        value: function value() {\n          this.isFocussed || this.element.focus();\n        }\n      }, {\n        key: \"addFocusState\",\n        value: function value() {\n          this.element.classList.add(this.classNames.focusState);\n        }\n      }, {\n        key: \"removeFocusState\",\n        value: function value() {\n          this.element.classList.remove(this.classNames.focusState);\n        }\n      }, {\n        key: \"enable\",\n        value: function value() {\n          this.element.classList.remove(this.classNames.disabledState), this.element.removeAttribute(\"aria-disabled\"), \"select-one\" === this.type && this.element.setAttribute(\"tabindex\", \"0\"), this.isDisabled = !1;\n        }\n      }, {\n        key: \"disable\",\n        value: function value() {\n          this.element.classList.add(this.classNames.disabledState), this.element.setAttribute(\"aria-disabled\", \"true\"), \"select-one\" === this.type && this.element.setAttribute(\"tabindex\", \"-1\"), this.isDisabled = !0;\n        }\n      }, {\n        key: \"wrap\",\n        value: function value(e) {\n          (0, n.wrap)(e, this.element);\n        }\n      }, {\n        key: \"unwrap\",\n        value: function value(e) {\n          this.element.parentNode.insertBefore(e, this.element), this.element.parentNode.removeChild(this.element);\n        }\n      }, {\n        key: \"addLoadingState\",\n        value: function value() {\n          this.element.classList.add(this.classNames.loadingState), this.element.setAttribute(\"aria-busy\", \"true\"), this.isLoading = !0;\n        }\n      }, {\n        key: \"removeLoadingState\",\n        value: function value() {\n          this.element.classList.remove(this.classNames.loadingState), this.element.removeAttribute(\"aria-busy\"), this.isLoading = !1;\n        }\n      }, {\n        key: \"_onFocus\",\n        value: function value() {\n          this.isFocussed = !0;\n        }\n      }, {\n        key: \"_onBlur\",\n        value: function value() {\n          this.isFocussed = !1;\n        }\n      }]) && o(t.prototype, i), r && o(t, r), e;\n    }();\n\n    t[\"default\"] = r;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = i(0);\n\n    function o(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var r = function () {\n      function e(t) {\n        var i = t.element,\n            n = t.type,\n            o = t.classNames,\n            r = t.placeholderValue;\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), Object.assign(this, {\n          element: i,\n          type: n,\n          classNames: o,\n          placeholderValue: r\n        }), this.element = i, this.classNames = o, this.isFocussed = this.element === document.activeElement, this.isDisabled = !1, this._onPaste = this._onPaste.bind(this), this._onInput = this._onInput.bind(this), this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this);\n      }\n\n      var t, i, r;\n      return t = e, (i = [{\n        key: \"addEventListeners\",\n        value: function value() {\n          this.element.addEventListener(\"input\", this._onInput), this.element.addEventListener(\"paste\", this._onPaste), this.element.addEventListener(\"focus\", this._onFocus), this.element.addEventListener(\"blur\", this._onBlur), this.element.form && this.element.form.addEventListener(\"reset\", this._onFormReset);\n        }\n      }, {\n        key: \"removeEventListeners\",\n        value: function value() {\n          this.element.removeEventListener(\"input\", this._onInput), this.element.removeEventListener(\"paste\", this._onPaste), this.element.removeEventListener(\"focus\", this._onFocus), this.element.removeEventListener(\"blur\", this._onBlur), this.element.form && this.element.form.removeEventListener(\"reset\", this._onFormReset);\n        }\n      }, {\n        key: \"enable\",\n        value: function value() {\n          this.element.removeAttribute(\"disabled\"), this.isDisabled = !1;\n        }\n      }, {\n        key: \"disable\",\n        value: function value() {\n          this.element.setAttribute(\"disabled\", \"\"), this.isDisabled = !0;\n        }\n      }, {\n        key: \"focus\",\n        value: function value() {\n          this.isFocussed || this.element.focus();\n        }\n      }, {\n        key: \"blur\",\n        value: function value() {\n          this.isFocussed && this.element.blur();\n        }\n      }, {\n        key: \"clear\",\n        value: function value() {\n          var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];\n          return this.element.value && (this.element.value = \"\"), e && this.setWidth(), this;\n        }\n      }, {\n        key: \"setWidth\",\n        value: function value(e) {\n          var t = this,\n              i = function i(e) {\n            t.element.style.width = e;\n          };\n\n          if (this._placeholderValue) {\n            var n = this.element.value.length >= this._placeholderValue.length / 1.25;\n            (this.element.value && n || e) && this.calcWidth(i);\n          } else this.calcWidth(i);\n        }\n      }, {\n        key: \"calcWidth\",\n        value: function value(e) {\n          return (0, n.calcWidthOfInput)(this.element, e);\n        }\n      }, {\n        key: \"setActiveDescendant\",\n        value: function value(e) {\n          this.element.setAttribute(\"aria-activedescendant\", e);\n        }\n      }, {\n        key: \"removeActiveDescendant\",\n        value: function value() {\n          this.element.removeAttribute(\"aria-activedescendant\");\n        }\n      }, {\n        key: \"_onInput\",\n        value: function value() {\n          \"select-one\" !== this.type && this.setWidth();\n        }\n      }, {\n        key: \"_onPaste\",\n        value: function value(e) {\n          e.target === this.element && this.preventPaste && e.preventDefault();\n        }\n      }, {\n        key: \"_onFocus\",\n        value: function value() {\n          this.isFocussed = !0;\n        }\n      }, {\n        key: \"_onBlur\",\n        value: function value() {\n          this.isFocussed = !1;\n        }\n      }, {\n        key: \"placeholder\",\n        set: function set(e) {\n          this.element.placeholder = e;\n        }\n      }, {\n        key: \"value\",\n        set: function set(e) {\n          this.element.value = e;\n        },\n        get: function get() {\n          return (0, n.sanitise)(this.element.value);\n        }\n      }]) && o(t.prototype, i), r && o(t, r), e;\n    }();\n\n    t[\"default\"] = r;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = i(1);\n\n    function o(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    var r = function () {\n      function e(t) {\n        var i = t.element;\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), Object.assign(this, {\n          element: i\n        }), this.scrollPos = this.element.scrollTop, this.height = this.element.offsetHeight, this.hasChildren = !!this.element.children;\n      }\n\n      var t, i, r;\n      return t = e, (i = [{\n        key: \"clear\",\n        value: function value() {\n          this.element.innerHTML = \"\";\n        }\n      }, {\n        key: \"append\",\n        value: function value(e) {\n          this.element.appendChild(e);\n        }\n      }, {\n        key: \"getChild\",\n        value: function value(e) {\n          return this.element.querySelector(e);\n        }\n      }, {\n        key: \"scrollToTop\",\n        value: function value() {\n          this.element.scrollTop = 0;\n        }\n      }, {\n        key: \"scrollToChoice\",\n        value: function value(e, t) {\n          var i = this;\n\n          if (e) {\n            var n = this.element.offsetHeight,\n                o = e.offsetHeight,\n                r = e.offsetTop + o,\n                s = this.element.scrollTop + n,\n                a = t > 0 ? this.element.scrollTop + r - s : e.offsetTop;\n            requestAnimationFrame(function (e) {\n              i._animateScroll(e, a, t);\n            });\n          }\n        }\n      }, {\n        key: \"_scrollDown\",\n        value: function value(e, t, i) {\n          var n = (i - e) / t,\n              o = n > 1 ? n : 1;\n          this.element.scrollTop = e + o;\n        }\n      }, {\n        key: \"_scrollUp\",\n        value: function value(e, t, i) {\n          var n = (e - i) / t,\n              o = n > 1 ? n : 1;\n          this.element.scrollTop = e - o;\n        }\n      }, {\n        key: \"_animateScroll\",\n        value: function value(e, t, i) {\n          var o = this,\n              r = n.SCROLLING_SPEED,\n              s = this.element.scrollTop,\n              a = !1;\n          i > 0 ? (this._scrollDown(s, r, t), s < t && (a = !0)) : (this._scrollUp(s, r, t), s > t && (a = !0)), a && requestAnimationFrame(function () {\n            o._animateScroll(e, t, i);\n          });\n        }\n      }]) && o(t.prototype, i), r && o(t, r), e;\n    }();\n\n    t[\"default\"] = r;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n,\n        o = (n = i(4)) && n.__esModule ? n : {\n      \"default\": n\n    };\n\n    function r(e) {\n      return (r = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n        return _typeof(e);\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n      })(e);\n    }\n\n    function s(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    function a(e, t) {\n      return !t || \"object\" !== r(t) && \"function\" != typeof t ? function (e) {\n        if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return e;\n      }(e) : t;\n    }\n\n    function c(e, t, i) {\n      return (c = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get : function (e, t, i) {\n        var n = function (e, t) {\n          for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = l(e));) {\n            ;\n          }\n\n          return e;\n        }(e, t);\n\n        if (n) {\n          var o = Object.getOwnPropertyDescriptor(n, t);\n          return o.get ? o.get.call(i) : o.value;\n        }\n      })(e, t, i || e);\n    }\n\n    function l(e) {\n      return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n        return e.__proto__ || Object.getPrototypeOf(e);\n      })(e);\n    }\n\n    function u(e, t) {\n      return (u = Object.setPrototypeOf || function (e, t) {\n        return e.__proto__ = t, e;\n      })(e, t);\n    }\n\n    var h = function (e) {\n      function t(e) {\n        var i,\n            n = e.element,\n            o = e.classNames,\n            r = e.delimiter;\n        return function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, t), (i = a(this, l(t).call(this, {\n          element: n,\n          classNames: o\n        }))).delimiter = r, i;\n      }\n\n      var i, n, r;\n      return function (e, t) {\n        if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n        e.prototype = Object.create(t && t.prototype, {\n          constructor: {\n            value: e,\n            writable: !0,\n            configurable: !0\n          }\n        }), t && u(e, t);\n      }(t, o[\"default\"]), i = t, (n = [{\n        key: \"value\",\n        set: function set(e) {\n          var t = e.map(function (e) {\n            return e.value;\n          }).join(this.delimiter);\n          this.element.setAttribute(\"value\", t), this.element.value = t;\n        },\n        get: function get() {\n          return c(l(t.prototype), \"value\", this);\n        }\n      }]) && s(i.prototype, n), r && s(i, r), t;\n    }();\n\n    t[\"default\"] = h;\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t[\"default\"] = void 0;\n    var n = r(i(4)),\n        o = r(i(5));\n\n    function r(e) {\n      return e && e.__esModule ? e : {\n        \"default\": e\n      };\n    }\n\n    function s(e) {\n      return (s = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n        return _typeof(e);\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n      })(e);\n    }\n\n    function a(e, t) {\n      for (var i = 0; i < t.length; i++) {\n        var n = t[i];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n      }\n    }\n\n    function c(e, t) {\n      return !t || \"object\" !== s(t) && \"function\" != typeof t ? function (e) {\n        if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return e;\n      }(e) : t;\n    }\n\n    function l(e) {\n      return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n        return e.__proto__ || Object.getPrototypeOf(e);\n      })(e);\n    }\n\n    function u(e, t) {\n      return (u = Object.setPrototypeOf || function (e, t) {\n        return e.__proto__ = t, e;\n      })(e, t);\n    }\n\n    var h = function (e) {\n      function t(e) {\n        var i = e.element,\n            n = e.classNames;\n        return function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, t), c(this, l(t).call(this, {\n          element: i,\n          classNames: n\n        }));\n      }\n\n      var i, r, s;\n      return function (e, t) {\n        if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n        e.prototype = Object.create(t && t.prototype, {\n          constructor: {\n            value: e,\n            writable: !0,\n            configurable: !0\n          }\n        }), t && u(e, t);\n      }(t, n[\"default\"]), i = t, (r = [{\n        key: \"appendDocFragment\",\n        value: function value(e) {\n          this.element.innerHTML = \"\", this.element.appendChild(e);\n        }\n      }, {\n        key: \"placeholderOption\",\n        get: function get() {\n          return this.element.querySelector(\"option[placeholder]\");\n        }\n      }, {\n        key: \"optionGroups\",\n        get: function get() {\n          return Array.from(this.element.getElementsByTagName(\"OPTGROUP\"));\n        }\n      }, {\n        key: \"options\",\n        get: function get() {\n          return Array.from(this.element.options);\n        },\n        set: function set(e) {\n          var t = document.createDocumentFragment();\n          e.forEach(function (e) {\n            return i = e, n = o[\"default\"].option(i), void t.appendChild(n);\n            var i, n;\n          }), this.appendDocFragment(t);\n        }\n      }]) && a(i.prototype, r), s && a(i, s), t;\n    }();\n\n    t[\"default\"] = h;\n  }, function (e, t, i) {\n    var n;\n    /*!\n      Copyright (c) 2017 Jed Watson.\n      Licensed under the MIT License (MIT), see\n      http://jedwatson.github.io/classnames\n    */\n\n    /*!\n      Copyright (c) 2017 Jed Watson.\n      Licensed under the MIT License (MIT), see\n      http://jedwatson.github.io/classnames\n    */\n\n    !function () {\n      \"use strict\";\n\n      var i = {}.hasOwnProperty;\n\n      function o() {\n        for (var e = [], t = 0; t < arguments.length; t++) {\n          var n = arguments[t];\n\n          if (n) {\n            var r = _typeof(n);\n\n            if (\"string\" === r || \"number\" === r) e.push(n);else if (Array.isArray(n) && n.length) {\n              var s = o.apply(null, n);\n              s && e.push(s);\n            } else if (\"object\" === r) for (var a in n) {\n              i.call(n, a) && n[a] && e.push(a);\n            }\n          }\n        }\n\n        return e.join(\" \");\n      }\n\n      e.exports ? (o[\"default\"] = o, e.exports = o) : void 0 === (n = function () {\n        return o;\n      }.apply(t, [])) || (e.exports = n);\n    }();\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.clearChoices = t.activateChoices = t.filterChoices = t.addChoice = void 0;\n    var n = i(1);\n\n    t.addChoice = function (e) {\n      var t = e.value,\n          i = e.label,\n          o = e.id,\n          r = e.groupId,\n          s = e.disabled,\n          a = e.elementId,\n          c = e.customProperties,\n          l = e.placeholder,\n          u = e.keyCode;\n      return {\n        type: n.ACTION_TYPES.ADD_CHOICE,\n        value: t,\n        label: i,\n        id: o,\n        groupId: r,\n        disabled: s,\n        elementId: a,\n        customProperties: c,\n        placeholder: l,\n        keyCode: u\n      };\n    };\n\n    t.filterChoices = function (e) {\n      return {\n        type: n.ACTION_TYPES.FILTER_CHOICES,\n        results: e\n      };\n    };\n\n    t.activateChoices = function () {\n      var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];\n      return {\n        type: n.ACTION_TYPES.ACTIVATE_CHOICES,\n        active: e\n      };\n    };\n\n    t.clearChoices = function () {\n      return {\n        type: n.ACTION_TYPES.CLEAR_CHOICES\n      };\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.highlightItem = t.removeItem = t.addItem = void 0;\n    var n = i(1);\n\n    t.addItem = function (e) {\n      var t = e.value,\n          i = e.label,\n          o = e.id,\n          r = e.choiceId,\n          s = e.groupId,\n          a = e.customProperties,\n          c = e.placeholder,\n          l = e.keyCode;\n      return {\n        type: n.ACTION_TYPES.ADD_ITEM,\n        value: t,\n        label: i,\n        id: o,\n        choiceId: r,\n        groupId: s,\n        customProperties: a,\n        placeholder: c,\n        keyCode: l\n      };\n    };\n\n    t.removeItem = function (e, t) {\n      return {\n        type: n.ACTION_TYPES.REMOVE_ITEM,\n        id: e,\n        choiceId: t\n      };\n    };\n\n    t.highlightItem = function (e, t) {\n      return {\n        type: n.ACTION_TYPES.HIGHLIGHT_ITEM,\n        id: e,\n        highlighted: t\n      };\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.addGroup = void 0;\n    var n = i(1);\n\n    t.addGroup = function (e, t, i, o) {\n      return {\n        type: n.ACTION_TYPES.ADD_GROUP,\n        value: e,\n        id: t,\n        active: i,\n        disabled: o\n      };\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.resetTo = t.clearAll = void 0;\n\n    t.clearAll = function () {\n      return {\n        type: \"CLEAR_ALL\"\n      };\n    };\n\n    t.resetTo = function (e) {\n      return {\n        type: \"RESET_TO\",\n        state: e\n      };\n    };\n  }, function (e, t, i) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.setIsLoading = void 0;\n\n    t.setIsLoading = function (e) {\n      return {\n        type: \"SET_IS_LOADING\",\n        isLoading: e\n      };\n    };\n  }]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/choices.min.js\n");

/***/ }),

/***/ "./resources/js/plugins/datetimepicker.js":
/*!************************************************!*\
  !*** ./resources/js/plugins/datetimepicker.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* flatpickr v4.5.7, @license MIT */\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n\n  var HOOKS = [\"onChange\", \"onClose\", \"onDayCreate\", \"onDestroy\", \"onKeyDown\", \"onMonthChange\", \"onOpen\", \"onParseConfig\", \"onReady\", \"onValueUpdate\", \"onYearChange\", \"onPreCalendarPosition\"];\n  var defaults = {\n    _disable: [],\n    _enable: [],\n    allowInput: false,\n    altFormat: \"F j, Y\",\n    altInput: false,\n    altInputClass: \"form-control input\",\n    animate: (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\" && window.navigator.userAgent.indexOf(\"MSIE\") === -1,\n    ariaDateFormat: \"F j, Y\",\n    clickOpens: true,\n    closeOnSelect: true,\n    conjunction: \", \",\n    dateFormat: \"Y-m-d\",\n    defaultHour: 12,\n    defaultMinute: 0,\n    defaultSeconds: 0,\n    disable: [],\n    disableMobile: false,\n    enable: [],\n    enableSeconds: false,\n    enableTime: false,\n    errorHandler: function errorHandler(err) {\n      return typeof console !== \"undefined\" && console.warn(err);\n    },\n    getWeek: function getWeek(givenDate) {\n      var date = new Date(givenDate.getTime());\n      date.setHours(0, 0, 0, 0); // Thursday in current week decides the year.\n\n      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // January 4 is always in week 1.\n\n      var week1 = new Date(date.getFullYear(), 0, 4); // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n\n      return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n    },\n    hourIncrement: 1,\n    ignoredFocusElements: [],\n    inline: false,\n    locale: \"default\",\n    minuteIncrement: 5,\n    mode: \"single\",\n    nextArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\n    noCalendar: false,\n    now: new Date(),\n    onChange: [],\n    onClose: [],\n    onDayCreate: [],\n    onDestroy: [],\n    onKeyDown: [],\n    onMonthChange: [],\n    onOpen: [],\n    onParseConfig: [],\n    onReady: [],\n    onValueUpdate: [],\n    onYearChange: [],\n    onPreCalendarPosition: [],\n    plugins: [],\n    position: \"auto\",\n    positionElement: undefined,\n    prevArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\n    shorthandCurrentMonth: false,\n    showMonths: 1,\n    \"static\": false,\n    time_24hr: false,\n    weekNumbers: false,\n    wrap: false\n  };\n  var english = {\n    weekdays: {\n      shorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      longhand: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    },\n    months: {\n      shorthand: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      longhand: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    },\n    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    firstDayOfWeek: 0,\n    ordinal: function ordinal(nth) {\n      var s = nth % 100;\n      if (s > 3 && s < 21) return \"th\";\n\n      switch (s % 10) {\n        case 1:\n          return \"st\";\n\n        case 2:\n          return \"nd\";\n\n        case 3:\n          return \"rd\";\n\n        default:\n          return \"th\";\n      }\n    },\n    rangeSeparator: \" to \",\n    weekAbbreviation: \"Wk\",\n    scrollTitle: \"Scroll to increment\",\n    toggleTitle: \"Click to toggle\",\n    amPM: [\"AM\", \"PM\"],\n    yearAriaLabel: \"Year\"\n  };\n\n  var pad = function pad(number) {\n    return (\"0\" + number).slice(-2);\n  };\n\n  var _int = function _int(bool) {\n    return bool === true ? 1 : 0;\n  };\n  /* istanbul ignore next */\n\n\n  function debounce(func, wait, immediate) {\n    if (immediate === void 0) {\n      immediate = false;\n    }\n\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n      timeout !== null && clearTimeout(timeout);\n      timeout = window.setTimeout(function () {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      }, wait);\n      if (immediate && !timeout) func.apply(context, args);\n    };\n  }\n\n  var arrayify = function arrayify(obj) {\n    return obj instanceof Array ? obj : [obj];\n  };\n\n  function toggleClass(elem, className, bool) {\n    if (bool === true) return elem.classList.add(className);\n    elem.classList.remove(className);\n  }\n\n  function createElement(tag, className, content) {\n    var e = window.document.createElement(tag);\n    className = className || \"\";\n    content = content || \"\";\n    e.className = className;\n    if (content !== undefined) e.textContent = content;\n    return e;\n  }\n\n  function clearNode(node) {\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n  }\n\n  function findParent(node, condition) {\n    if (condition(node)) return node;else if (node.parentNode) return findParent(node.parentNode, condition);\n    return undefined; // nothing found\n  }\n\n  function createNumberInput(inputClassName, opts) {\n    var wrapper = createElement(\"div\", \"numInputWrapper\"),\n        numInput = createElement(\"input\", \"numInput \" + inputClassName),\n        arrowUp = createElement(\"span\", \"arrowUp\"),\n        arrowDown = createElement(\"span\", \"arrowDown\");\n\n    if (navigator.userAgent.indexOf(\"MSIE 9.0\") === -1) {\n      numInput.type = \"number\";\n    } else {\n      numInput.type = \"text\";\n      numInput.pattern = \"\\\\d*\";\n    }\n\n    if (opts !== undefined) for (var key in opts) {\n      numInput.setAttribute(key, opts[key]);\n    }\n    wrapper.appendChild(numInput);\n    wrapper.appendChild(arrowUp);\n    wrapper.appendChild(arrowDown);\n    return wrapper;\n  }\n\n  function getEventTarget(event) {\n    if (typeof event.composedPath === \"function\") {\n      var path = event.composedPath();\n      return path[0];\n    }\n\n    return event.target;\n  }\n\n  var do_nothing = function do_nothing() {\n    return undefined;\n  };\n\n  var monthToStr = function monthToStr(monthNumber, shorthand, locale) {\n    return locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\n  };\n\n  var revFormat = {\n    D: do_nothing,\n    F: function F(dateObj, monthName, locale) {\n      dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n    },\n    G: function G(dateObj, hour) {\n      dateObj.setHours(parseFloat(hour));\n    },\n    H: function H(dateObj, hour) {\n      dateObj.setHours(parseFloat(hour));\n    },\n    J: function J(dateObj, day) {\n      dateObj.setDate(parseFloat(day));\n    },\n    K: function K(dateObj, amPM, locale) {\n      dateObj.setHours(dateObj.getHours() % 12 + 12 * _int(new RegExp(locale.amPM[1], \"i\").test(amPM)));\n    },\n    M: function M(dateObj, shortMonth, locale) {\n      dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n    },\n    S: function S(dateObj, seconds) {\n      dateObj.setSeconds(parseFloat(seconds));\n    },\n    U: function U(_, unixSeconds) {\n      return new Date(parseFloat(unixSeconds) * 1000);\n    },\n    W: function W(dateObj, weekNum) {\n      var weekNumber = parseInt(weekNum);\n      return new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\n    },\n    Y: function Y(dateObj, year) {\n      dateObj.setFullYear(parseFloat(year));\n    },\n    Z: function Z(_, ISODate) {\n      return new Date(ISODate);\n    },\n    d: function d(dateObj, day) {\n      dateObj.setDate(parseFloat(day));\n    },\n    h: function h(dateObj, hour) {\n      dateObj.setHours(parseFloat(hour));\n    },\n    i: function i(dateObj, minutes) {\n      dateObj.setMinutes(parseFloat(minutes));\n    },\n    j: function j(dateObj, day) {\n      dateObj.setDate(parseFloat(day));\n    },\n    l: do_nothing,\n    m: function m(dateObj, month) {\n      dateObj.setMonth(parseFloat(month) - 1);\n    },\n    n: function n(dateObj, month) {\n      dateObj.setMonth(parseFloat(month) - 1);\n    },\n    s: function s(dateObj, seconds) {\n      dateObj.setSeconds(parseFloat(seconds));\n    },\n    u: function u(_, unixMillSeconds) {\n      return new Date(parseFloat(unixMillSeconds));\n    },\n    w: do_nothing,\n    y: function y(dateObj, year) {\n      dateObj.setFullYear(2000 + parseFloat(year));\n    }\n  };\n  var tokenRegex = {\n    D: \"(\\\\w+)\",\n    F: \"(\\\\w+)\",\n    G: \"(\\\\d\\\\d|\\\\d)\",\n    H: \"(\\\\d\\\\d|\\\\d)\",\n    J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\n    K: \"\",\n    M: \"(\\\\w+)\",\n    S: \"(\\\\d\\\\d|\\\\d)\",\n    U: \"(.+)\",\n    W: \"(\\\\d\\\\d|\\\\d)\",\n    Y: \"(\\\\d{4})\",\n    Z: \"(.+)\",\n    d: \"(\\\\d\\\\d|\\\\d)\",\n    h: \"(\\\\d\\\\d|\\\\d)\",\n    i: \"(\\\\d\\\\d|\\\\d)\",\n    j: \"(\\\\d\\\\d|\\\\d)\",\n    l: \"(\\\\w+)\",\n    m: \"(\\\\d\\\\d|\\\\d)\",\n    n: \"(\\\\d\\\\d|\\\\d)\",\n    s: \"(\\\\d\\\\d|\\\\d)\",\n    u: \"(.+)\",\n    w: \"(\\\\d\\\\d|\\\\d)\",\n    y: \"(\\\\d{2})\"\n  };\n  var formats = {\n    // get the date in UTC\n    Z: function Z(date) {\n      return date.toISOString();\n    },\n    // weekday name, short, e.g. Thu\n    D: function D(date, locale, options) {\n      return locale.weekdays.shorthand[formats.w(date, locale, options)];\n    },\n    // full month name e.g. January\n    F: function F(date, locale, options) {\n      return monthToStr(formats.n(date, locale, options) - 1, false, locale);\n    },\n    // padded hour 1-12\n    G: function G(date, locale, options) {\n      return pad(formats.h(date, locale, options));\n    },\n    // hours with leading zero e.g. 03\n    H: function H(date) {\n      return pad(date.getHours());\n    },\n    // day (1-30) with ordinal suffix e.g. 1st, 2nd\n    J: function J(date, locale) {\n      return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();\n    },\n    // AM/PM\n    K: function K(date, locale) {\n      return locale.amPM[_int(date.getHours() > 11)];\n    },\n    // shorthand month e.g. Jan, Sep, Oct, etc\n    M: function M(date, locale) {\n      return monthToStr(date.getMonth(), true, locale);\n    },\n    // seconds 00-59\n    S: function S(date) {\n      return pad(date.getSeconds());\n    },\n    // unix timestamp\n    U: function U(date) {\n      return date.getTime() / 1000;\n    },\n    W: function W(date, _, options) {\n      return options.getWeek(date);\n    },\n    // full year e.g. 2016\n    Y: function Y(date) {\n      return date.getFullYear();\n    },\n    // day in month, padded (01-30)\n    d: function d(date) {\n      return pad(date.getDate());\n    },\n    // hour from 1-12 (am/pm)\n    h: function h(date) {\n      return date.getHours() % 12 ? date.getHours() % 12 : 12;\n    },\n    // minutes, padded with leading zero e.g. 09\n    i: function i(date) {\n      return pad(date.getMinutes());\n    },\n    // day in month (1-30)\n    j: function j(date) {\n      return date.getDate();\n    },\n    // weekday name, full, e.g. Thursday\n    l: function l(date, locale) {\n      return locale.weekdays.longhand[date.getDay()];\n    },\n    // padded month number (01-12)\n    m: function m(date) {\n      return pad(date.getMonth() + 1);\n    },\n    // the month number (1-12)\n    n: function n(date) {\n      return date.getMonth() + 1;\n    },\n    // seconds 0-59\n    s: function s(date) {\n      return date.getSeconds();\n    },\n    // Unix Milliseconds\n    u: function u(date) {\n      return date.getTime();\n    },\n    // number of the day of the week\n    w: function w(date) {\n      return date.getDay();\n    },\n    // last two digits of year e.g. 16 for 2016\n    y: function y(date) {\n      return String(date.getFullYear()).substring(2);\n    }\n  };\n\n  var createDateFormatter = function createDateFormatter(_a) {\n    var _b = _a.config,\n        config = _b === void 0 ? defaults : _b,\n        _c = _a.l10n,\n        l10n = _c === void 0 ? english : _c;\n    return function (dateObj, frmt, overrideLocale) {\n      var locale = overrideLocale || l10n;\n\n      if (config.formatDate !== undefined) {\n        return config.formatDate(dateObj, frmt, locale);\n      }\n\n      return frmt.split(\"\").map(function (c, i, arr) {\n        return formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\";\n      }).join(\"\");\n    };\n  };\n\n  var createDateParser = function createDateParser(_a) {\n    var _b = _a.config,\n        config = _b === void 0 ? defaults : _b,\n        _c = _a.l10n,\n        l10n = _c === void 0 ? english : _c;\n    return function (date, givenFormat, timeless, customLocale) {\n      if (date !== 0 && !date) return undefined;\n      var locale = customLocale || l10n;\n      var parsedDate;\n      var date_orig = date;\n      if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined // timestamp\n      ) // create a copy\n        parsedDate = new Date(date);else if (typeof date === \"string\") {\n        // date string\n        var format = givenFormat || (config || defaults).dateFormat;\n        var datestr = String(date).trim();\n\n        if (datestr === \"today\") {\n          parsedDate = new Date();\n          timeless = true;\n        } else if (/Z$/.test(datestr) || /GMT$/.test(datestr) // datestrings w/ timezone\n        ) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n          parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n          var matched = void 0,\n              ops = [];\n\n          for (var i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n            var token_1 = format[i];\n            var isBackSlash = token_1 === \"\\\\\";\n            var escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n            if (tokenRegex[token_1] && !escaped) {\n              regexStr += tokenRegex[token_1];\n              var match = new RegExp(regexStr).exec(date);\n\n              if (match && (matched = true)) {\n                ops[token_1 !== \"Y\" ? \"push\" : \"unshift\"]({\n                  fn: revFormat[token_1],\n                  val: match[++matchIndex]\n                });\n              }\n            } else if (!isBackSlash) regexStr += \".\"; // don't really care\n\n\n            ops.forEach(function (_a) {\n              var fn = _a.fn,\n                  val = _a.val;\n              return parsedDate = fn(parsedDate, val, locale) || parsedDate;\n            });\n          }\n\n          parsedDate = matched ? parsedDate : undefined;\n        }\n      }\n      /* istanbul ignore next */\n\n      if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n        config.errorHandler(new Error(\"Invalid date provided: \" + date_orig));\n        return undefined;\n      }\n\n      if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n      return parsedDate;\n    };\n  };\n  /**\r\n   * Compute the difference in dates, measured in ms\r\n   */\n\n\n  function compareDates(date1, date2, timeless) {\n    if (timeless === void 0) {\n      timeless = true;\n    }\n\n    if (timeless !== false) {\n      return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n    }\n\n    return date1.getTime() - date2.getTime();\n  }\n\n  var isBetween = function isBetween(ts, ts1, ts2) {\n    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n  };\n\n  var duration = {\n    DAY: 86400000\n  };\n\n  if (typeof Object.assign !== \"function\") {\n    Object.assign = function (target) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      if (!target) {\n        throw TypeError(\"Cannot convert undefined or null to object\");\n      }\n\n      var _loop_1 = function _loop_1(source) {\n        if (source) {\n          Object.keys(source).forEach(function (key) {\n            return target[key] = source[key];\n          });\n        }\n      };\n\n      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var source = args_1[_a];\n\n        _loop_1(source);\n      }\n\n      return target;\n    };\n  }\n\n  var DEBOUNCED_CHANGE_MS = 300;\n\n  function FlatpickrInstance(element, instanceConfig) {\n    var self = {\n      config: _assign({}, flatpickr.defaultConfig),\n      l10n: english\n    };\n    self.parseDate = createDateParser({\n      config: self.config,\n      l10n: self.l10n\n    });\n    self._handlers = [];\n    self._bind = bind;\n    self._setHoursFromDate = setHoursFromDate;\n    self._positionCalendar = positionCalendar;\n    self.changeMonth = changeMonth;\n    self.changeYear = changeYear;\n    self.clear = clear;\n    self.close = close;\n    self._createElement = createElement;\n    self.destroy = destroy;\n    self.isEnabled = isEnabled;\n    self.jumpToDate = jumpToDate;\n    self.open = open;\n    self.redraw = redraw;\n    self.set = set;\n    self.setDate = setDate;\n    self.toggle = toggle;\n\n    function setupHelperFunctions() {\n      self.utils = {\n        getDaysInMonth: function getDaysInMonth(month, yr) {\n          if (month === void 0) {\n            month = self.currentMonth;\n          }\n\n          if (yr === void 0) {\n            yr = self.currentYear;\n          }\n\n          if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;\n          return self.l10n.daysInMonth[month];\n        }\n      };\n    }\n\n    function init() {\n      self.element = self.input = element;\n      self.isOpen = false;\n      parseConfig();\n      setupLocale();\n      setupInputs();\n      setupDates();\n      setupHelperFunctions();\n      if (!self.isMobile) build();\n      bindEvents();\n\n      if (self.selectedDates.length || self.config.noCalendar) {\n        if (self.config.enableTime) {\n          setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj || self.config.minDate : undefined);\n        }\n\n        updateValue(false);\n      }\n\n      setCalendarWidth();\n      self.showTimeInput = self.selectedDates.length > 0 || self.config.noCalendar;\n      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      /* TODO: investigate this further\r\n          Currently, there is weird positioning behavior in safari causing pages\r\n        to scroll up. https://github.com/chmln/flatpickr/issues/563\r\n          However, most browsers are not Safari and positioning is expensive when used\r\n        in scale. https://github.com/chmln/flatpickr/issues/1096\r\n      */\n\n      if (!self.isMobile && isSafari) {\n        positionCalendar();\n      }\n\n      triggerEvent(\"onReady\");\n    }\n\n    function bindToInstance(fn) {\n      return fn.bind(self);\n    }\n\n    function setCalendarWidth() {\n      var config = self.config;\n      if (config.weekNumbers === false && config.showMonths === 1) return;else if (config.noCalendar !== true) {\n        window.requestAnimationFrame(function () {\n          if (self.calendarContainer !== undefined) {\n            self.calendarContainer.style.visibility = \"hidden\";\n            self.calendarContainer.style.display = \"block\";\n          }\n\n          if (self.daysContainer !== undefined) {\n            var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;\n            self.daysContainer.style.width = daysWidth + \"px\";\n            self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== undefined ? self.weekWrapper.offsetWidth : 0) + \"px\";\n            self.calendarContainer.style.removeProperty(\"visibility\");\n            self.calendarContainer.style.removeProperty(\"display\");\n          }\n        });\n      }\n    }\n    /**\r\n     * The handler for all events targeting the time inputs\r\n     */\n\n\n    function updateTime(e) {\n      if (self.selectedDates.length === 0) {\n        setDefaultTime();\n      }\n\n      if (e !== undefined && e.type !== \"blur\") {\n        timeWrapper(e);\n      }\n\n      var prevValue = self._input.value;\n      setHoursFromInputs();\n      updateValue();\n\n      if (self._input.value !== prevValue) {\n        self._debouncedChange();\n      }\n    }\n\n    function ampm2military(hour, amPM) {\n      return hour % 12 + 12 * _int(amPM === self.l10n.amPM[1]);\n    }\n\n    function military2ampm(hour) {\n      switch (hour % 24) {\n        case 0:\n        case 12:\n          return 12;\n\n        default:\n          return hour % 12;\n      }\n    }\n    /**\r\n     * Syncs the selected date object time with user's time input\r\n     */\n\n\n    function setHoursFromInputs() {\n      if (self.hourElement === undefined || self.minuteElement === undefined) return;\n      var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24,\n          minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60,\n          seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;\n\n      if (self.amPM !== undefined) {\n        hours = ampm2military(hours, self.amPM.textContent);\n      }\n\n      var limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;\n      var limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;\n\n      if (limitMaxHours) {\n        var maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;\n        hours = Math.min(hours, maxTime.getHours());\n        if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());\n        if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());\n      }\n\n      if (limitMinHours) {\n        var minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;\n        hours = Math.max(hours, minTime.getHours());\n        if (hours === minTime.getHours()) minutes = Math.max(minutes, minTime.getMinutes());\n        if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());\n      }\n\n      setHours(hours, minutes, seconds);\n    }\n    /**\r\n     * Syncs time input values with a date\r\n     */\n\n\n    function setHoursFromDate(dateObj) {\n      var date = dateObj || self.latestSelectedDateObj;\n      if (date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());\n    }\n\n    function setDefaultHours() {\n      var hours = self.config.defaultHour;\n      var minutes = self.config.defaultMinute;\n      var seconds = self.config.defaultSeconds;\n\n      if (self.config.minDate !== undefined) {\n        var min_hr = self.config.minDate.getHours();\n        var min_minutes = self.config.minDate.getMinutes();\n        hours = Math.max(hours, min_hr);\n        if (hours === min_hr) minutes = Math.max(min_minutes, minutes);\n        if (hours === min_hr && minutes === min_minutes) seconds = self.config.minDate.getSeconds();\n      }\n\n      if (self.config.maxDate !== undefined) {\n        var max_hr = self.config.maxDate.getHours();\n        var max_minutes = self.config.maxDate.getMinutes();\n        hours = Math.min(hours, max_hr);\n        if (hours === max_hr) minutes = Math.min(max_minutes, minutes);\n        if (hours === max_hr && minutes === max_minutes) seconds = self.config.maxDate.getSeconds();\n      }\n\n      setHours(hours, minutes, seconds);\n    }\n    /**\r\n     * Sets the hours, minutes, and optionally seconds\r\n     * of the latest selected date object and the\r\n     * corresponding time inputs\r\n     * @param {Number} hours the hour. whether its military\r\n     *                 or am-pm gets inferred from config\r\n     * @param {Number} minutes the minutes\r\n     * @param {Number} seconds the seconds (optional)\r\n     */\n\n\n    function setHours(hours, minutes, seconds) {\n      if (self.latestSelectedDateObj !== undefined) {\n        self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\n      }\n\n      if (!self.hourElement || !self.minuteElement || self.isMobile) return;\n      self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * _int(hours % 12 === 0) : hours);\n      self.minuteElement.value = pad(minutes);\n      if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[_int(hours >= 12)];\n      if (self.secondElement !== undefined) self.secondElement.value = pad(seconds);\n    }\n    /**\r\n     * Handles the year input and incrementing events\r\n     * @param {Event} event the keyup or increment event\r\n     */\n\n\n    function onYearInput(event) {\n      var year = parseInt(event.target.value) + (event.delta || 0);\n\n      if (year / 1000 > 1 || event.key === \"Enter\" && !/[^\\d]/.test(year.toString())) {\n        changeYear(year);\n      }\n    }\n    /**\r\n     * Essentially addEventListener + tracking\r\n     * @param {Element} element the element to addEventListener to\r\n     * @param {String} event the event name\r\n     * @param {Function} handler the event handler\r\n     */\n\n\n    function bind(element, event, handler, options) {\n      if (event instanceof Array) return event.forEach(function (ev) {\n        return bind(element, ev, handler, options);\n      });\n      if (element instanceof Array) return element.forEach(function (el) {\n        return bind(el, event, handler, options);\n      });\n      element.addEventListener(event, handler, options);\n\n      self._handlers.push({\n        element: element,\n        event: event,\n        handler: handler,\n        options: options\n      });\n    }\n    /**\r\n     * A mousedown handler which mimics click.\r\n     * Minimizes latency, since we don't need to wait for mouseup in most cases.\r\n     * Also, avoids handling right clicks.\r\n     *\r\n     * @param {Function} handler the event handler\r\n     */\n\n\n    function onClick(handler) {\n      return function (evt) {\n        evt.which === 1 && handler(evt);\n      };\n    }\n\n    function triggerChange() {\n      triggerEvent(\"onChange\");\n    }\n    /**\r\n     * Adds all the necessary event listeners\r\n     */\n\n\n    function bindEvents() {\n      if (self.config.wrap) {\n        [\"open\", \"close\", \"toggle\", \"clear\"].forEach(function (evt) {\n          Array.prototype.forEach.call(self.element.querySelectorAll(\"[data-\" + evt + \"]\"), function (el) {\n            return bind(el, \"click\", self[evt]);\n          });\n        });\n      }\n\n      if (self.isMobile) {\n        setupMobile();\n        return;\n      }\n\n      var debouncedResize = debounce(onResize, 50);\n      self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);\n      if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, \"mouseover\", function (e) {\n        if (self.config.mode === \"range\") onMouseOver(e.target);\n      });\n      bind(window.document.body, \"keydown\", onKeyDown);\n      if (!self.config[\"static\"]) bind(self._input, \"keydown\", onKeyDown);\n      if (!self.config.inline && !self.config[\"static\"]) bind(window, \"resize\", debouncedResize);\n      if (window.ontouchstart !== undefined) bind(window.document, \"click\", documentClick);else bind(window.document, \"mousedown\", onClick(documentClick));\n      bind(window.document, \"focus\", documentClick, {\n        capture: true\n      });\n\n      if (self.config.clickOpens === true) {\n        bind(self._input, \"focus\", self.open);\n        bind(self._input, \"mousedown\", onClick(self.open));\n      }\n\n      if (self.daysContainer !== undefined) {\n        bind(self.monthNav, \"mousedown\", onClick(onMonthNavClick));\n        bind(self.monthNav, [\"keyup\", \"increment\"], onYearInput);\n        bind(self.daysContainer, \"mousedown\", onClick(selectDate));\n      }\n\n      if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {\n        var selText = function selText(e) {\n          return e.target.select();\n        };\n\n        bind(self.timeContainer, [\"increment\"], updateTime);\n        bind(self.timeContainer, \"blur\", updateTime, {\n          capture: true\n        });\n        bind(self.timeContainer, \"mousedown\", onClick(timeIncrement));\n        bind([self.hourElement, self.minuteElement], [\"focus\", \"click\"], selText);\n        if (self.secondElement !== undefined) bind(self.secondElement, \"focus\", function () {\n          return self.secondElement && self.secondElement.select();\n        });\n\n        if (self.amPM !== undefined) {\n          bind(self.amPM, \"mousedown\", onClick(function (e) {\n            updateTime(e);\n            triggerChange();\n          }));\n        }\n      }\n    }\n    /**\r\n     * Set the calendar view to a particular date.\r\n     * @param {Date} jumpDate the date to set the view to\r\n     */\n\n\n    function jumpToDate(jumpDate) {\n      var jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);\n\n      try {\n        if (jumpTo !== undefined) {\n          self.currentYear = jumpTo.getFullYear();\n          self.currentMonth = jumpTo.getMonth();\n        }\n      } catch (e) {\n        /* istanbul ignore next */\n        e.message = \"Invalid date supplied: \" + jumpTo;\n        self.config.errorHandler(e);\n      }\n\n      self.redraw();\n    }\n    /**\r\n     * The up/down arrow handler for time inputs\r\n     * @param {Event} e the click event\r\n     */\n\n\n    function timeIncrement(e) {\n      if (~e.target.className.indexOf(\"arrow\")) incrementNumInput(e, e.target.classList.contains(\"arrowUp\") ? 1 : -1);\n    }\n    /**\r\n     * Increments/decrements the value of input associ-\r\n     * ated with the up/down arrow by dispatching an\r\n     * \"increment\" event on the input.\r\n     *\r\n     * @param {Event} e the click event\r\n     * @param {Number} delta the diff (usually 1 or -1)\r\n     * @param {Element} inputElem the input element\r\n     */\n\n\n    function incrementNumInput(e, delta, inputElem) {\n      var target = e && e.target;\n      var input = inputElem || target && target.parentNode && target.parentNode.firstChild;\n      var event = createEvent(\"increment\");\n      event.delta = delta;\n      input && input.dispatchEvent(event);\n    }\n\n    function build() {\n      var fragment = window.document.createDocumentFragment();\n      self.calendarContainer = createElement(\"div\", \"flatpickr-calendar\");\n      self.calendarContainer.tabIndex = -1;\n\n      if (!self.config.noCalendar) {\n        fragment.appendChild(buildMonthNav());\n        self.innerContainer = createElement(\"div\", \"flatpickr-innerContainer\");\n\n        if (self.config.weekNumbers) {\n          var _a = buildWeeks(),\n              weekWrapper = _a.weekWrapper,\n              weekNumbers = _a.weekNumbers;\n\n          self.innerContainer.appendChild(weekWrapper);\n          self.weekNumbers = weekNumbers;\n          self.weekWrapper = weekWrapper;\n        }\n\n        self.rContainer = createElement(\"div\", \"flatpickr-rContainer\");\n        self.rContainer.appendChild(buildWeekdays());\n\n        if (!self.daysContainer) {\n          self.daysContainer = createElement(\"div\", \"flatpickr-days\");\n          self.daysContainer.tabIndex = -1;\n        }\n\n        buildDays();\n        self.rContainer.appendChild(self.daysContainer);\n        self.innerContainer.appendChild(self.rContainer);\n        fragment.appendChild(self.innerContainer);\n      }\n\n      if (self.config.enableTime) {\n        fragment.appendChild(buildTime());\n      }\n\n      toggleClass(self.calendarContainer, \"rangeMode\", self.config.mode === \"range\");\n      toggleClass(self.calendarContainer, \"animate\", self.config.animate === true);\n      toggleClass(self.calendarContainer, \"multiMonth\", self.config.showMonths > 1);\n      self.calendarContainer.appendChild(fragment);\n      var customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;\n\n      if (self.config.inline || self.config[\"static\"]) {\n        self.calendarContainer.classList.add(self.config.inline ? \"inline\" : \"static\");\n\n        if (self.config.inline) {\n          if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);\n        }\n\n        if (self.config[\"static\"]) {\n          var wrapper = createElement(\"div\", \"flatpickr-wrapper\");\n          if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);\n          wrapper.appendChild(self.element);\n          if (self.altInput) wrapper.appendChild(self.altInput);\n          wrapper.appendChild(self.calendarContainer);\n        }\n      }\n\n      if (!self.config[\"static\"] && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);\n    }\n\n    function createDay(className, date, dayNumber, i) {\n      var dateIsEnabled = isEnabled(date, true),\n          dayElement = createElement(\"span\", \"flatpickr-day \" + className, date.getDate().toString());\n      dayElement.dateObj = date;\n      dayElement.$i = i;\n      dayElement.setAttribute(\"aria-label\", self.formatDate(date, self.config.ariaDateFormat));\n\n      if (className.indexOf(\"hidden\") === -1 && compareDates(date, self.now) === 0) {\n        self.todayDateElem = dayElement;\n        dayElement.classList.add(\"today\");\n        dayElement.setAttribute(\"aria-current\", \"date\");\n      }\n\n      if (dateIsEnabled) {\n        dayElement.tabIndex = -1;\n\n        if (isDateSelected(date)) {\n          dayElement.classList.add(\"selected\");\n          self.selectedDateElem = dayElement;\n\n          if (self.config.mode === \"range\") {\n            toggleClass(dayElement, \"startRange\", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);\n            toggleClass(dayElement, \"endRange\", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);\n            if (className === \"nextMonthDay\") dayElement.classList.add(\"inRange\");\n          }\n        }\n      } else {\n        dayElement.classList.add(\"disabled\");\n      }\n\n      if (self.config.mode === \"range\") {\n        if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add(\"inRange\");\n      }\n\n      if (self.weekNumbers && self.config.showMonths === 1 && className !== \"prevMonthDay\" && dayNumber % 7 === 1) {\n        self.weekNumbers.insertAdjacentHTML(\"beforeend\", \"<span class='flatpickr-day'>\" + self.config.getWeek(date) + \"</span>\");\n      }\n\n      triggerEvent(\"onDayCreate\", dayElement);\n      return dayElement;\n    }\n\n    function focusOnDayElem(targetNode) {\n      targetNode.focus();\n      if (self.config.mode === \"range\") onMouseOver(targetNode);\n    }\n\n    function getFirstAvailableDay(delta) {\n      var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;\n      var endMonth = delta > 0 ? self.config.showMonths : -1;\n\n      for (var m = startMonth; m != endMonth; m += delta) {\n        var month = self.daysContainer.children[m];\n        var startIndex = delta > 0 ? 0 : month.children.length - 1;\n        var endIndex = delta > 0 ? month.children.length : -1;\n\n        for (var i = startIndex; i != endIndex; i += delta) {\n          var c = month.children[i];\n          if (c.className.indexOf(\"hidden\") === -1 && isEnabled(c.dateObj)) return c;\n        }\n      }\n\n      return undefined;\n    }\n\n    function getNextAvailableDay(current, delta) {\n      var givenMonth = current.className.indexOf(\"Month\") === -1 ? current.dateObj.getMonth() : self.currentMonth;\n      var endMonth = delta > 0 ? self.config.showMonths : -1;\n      var loopDelta = delta > 0 ? 1 : -1;\n\n      for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {\n        var month = self.daysContainer.children[m];\n        var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;\n        var numMonthDays = month.children.length;\n\n        for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {\n          var c = month.children[i];\n          if (c.className.indexOf(\"hidden\") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta)) return focusOnDayElem(c);\n        }\n      }\n\n      self.changeMonth(loopDelta);\n      focusOnDay(getFirstAvailableDay(loopDelta), 0);\n      return undefined;\n    }\n\n    function focusOnDay(current, offset) {\n      var dayFocused = isInView(document.activeElement || document.body);\n      var startElem = current !== undefined ? current : dayFocused ? document.activeElement : self.selectedDateElem !== undefined && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== undefined && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);\n      if (startElem === undefined) return self._input.focus();\n      if (!dayFocused) return focusOnDayElem(startElem);\n      getNextAvailableDay(startElem, offset);\n    }\n\n    function buildMonthDays(year, month) {\n      var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;\n      var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12);\n      var daysInMonth = self.utils.getDaysInMonth(month),\n          days = window.document.createDocumentFragment(),\n          isMultiMonth = self.config.showMonths > 1,\n          prevMonthDayClass = isMultiMonth ? \"prevMonthDay hidden\" : \"prevMonthDay\",\n          nextMonthDayClass = isMultiMonth ? \"nextMonthDay hidden\" : \"nextMonthDay\";\n      var dayNumber = prevMonthDays + 1 - firstOfMonth,\n          dayIndex = 0; // prepend days from the ending of previous month\n\n      for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {\n        days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));\n      } // Start at 1 since there is no 0th day\n\n\n      for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {\n        days.appendChild(createDay(\"\", new Date(year, month, dayNumber), dayNumber, dayIndex));\n      } // append days from the next month\n\n\n      for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {\n        days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));\n      } //updateNavigationCurrentMonth();\n\n\n      var dayContainer = createElement(\"div\", \"dayContainer\");\n      dayContainer.appendChild(days);\n      return dayContainer;\n    }\n\n    function buildDays() {\n      if (self.daysContainer === undefined) {\n        return;\n      }\n\n      clearNode(self.daysContainer); // TODO: week numbers for each month\n\n      if (self.weekNumbers) clearNode(self.weekNumbers);\n      var frag = document.createDocumentFragment();\n\n      for (var i = 0; i < self.config.showMonths; i++) {\n        var d = new Date(self.currentYear, self.currentMonth, 1);\n        d.setMonth(self.currentMonth + i);\n        frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));\n      }\n\n      self.daysContainer.appendChild(frag);\n      self.days = self.daysContainer.firstChild;\n\n      if (self.config.mode === \"range\" && self.selectedDates.length === 1) {\n        onMouseOver();\n      }\n    }\n\n    function buildMonth() {\n      var container = createElement(\"div\", \"flatpickr-month\");\n      var monthNavFragment = window.document.createDocumentFragment();\n      var monthElement = createElement(\"span\", \"cur-month\");\n      var yearInput = createNumberInput(\"cur-year\", {\n        tabindex: \"-1\"\n      });\n      var yearElement = yearInput.getElementsByTagName(\"input\")[0];\n      yearElement.setAttribute(\"aria-label\", self.l10n.yearAriaLabel);\n\n      if (self.config.minDate) {\n        yearElement.setAttribute(\"min\", self.config.minDate.getFullYear().toString());\n      }\n\n      if (self.config.maxDate) {\n        yearElement.setAttribute(\"max\", self.config.maxDate.getFullYear().toString());\n        yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\n      }\n\n      var currentMonth = createElement(\"div\", \"flatpickr-current-month\");\n      currentMonth.appendChild(monthElement);\n      currentMonth.appendChild(yearInput);\n      monthNavFragment.appendChild(currentMonth);\n      container.appendChild(monthNavFragment);\n      return {\n        container: container,\n        yearElement: yearElement,\n        monthElement: monthElement\n      };\n    }\n\n    function buildMonths() {\n      clearNode(self.monthNav);\n      self.monthNav.appendChild(self.prevMonthNav);\n\n      if (self.config.showMonths) {\n        self.yearElements = [];\n        self.monthElements = [];\n      }\n\n      for (var m = self.config.showMonths; m--;) {\n        var month = buildMonth();\n        self.yearElements.push(month.yearElement);\n        self.monthElements.push(month.monthElement);\n        self.monthNav.appendChild(month.container);\n      }\n\n      self.monthNav.appendChild(self.nextMonthNav);\n    }\n\n    function buildMonthNav() {\n      self.monthNav = createElement(\"div\", \"flatpickr-months\");\n      self.yearElements = [];\n      self.monthElements = [];\n      self.prevMonthNav = createElement(\"span\", \"flatpickr-prev-month\");\n      self.prevMonthNav.innerHTML = self.config.prevArrow;\n      self.nextMonthNav = createElement(\"span\", \"flatpickr-next-month\");\n      self.nextMonthNav.innerHTML = self.config.nextArrow;\n      buildMonths();\n      Object.defineProperty(self, \"_hidePrevMonthArrow\", {\n        get: function get() {\n          return self.__hidePrevMonthArrow;\n        },\n        set: function set(bool) {\n          if (self.__hidePrevMonthArrow !== bool) {\n            toggleClass(self.prevMonthNav, \"disabled\", bool);\n            self.__hidePrevMonthArrow = bool;\n          }\n        }\n      });\n      Object.defineProperty(self, \"_hideNextMonthArrow\", {\n        get: function get() {\n          return self.__hideNextMonthArrow;\n        },\n        set: function set(bool) {\n          if (self.__hideNextMonthArrow !== bool) {\n            toggleClass(self.nextMonthNav, \"disabled\", bool);\n            self.__hideNextMonthArrow = bool;\n          }\n        }\n      });\n      self.currentYearElement = self.yearElements[0];\n      updateNavigationCurrentMonth();\n      return self.monthNav;\n    }\n\n    function buildTime() {\n      self.calendarContainer.classList.add(\"hasTime\");\n      if (self.config.noCalendar) self.calendarContainer.classList.add(\"noCalendar\");\n      self.timeContainer = createElement(\"div\", \"flatpickr-time\");\n      self.timeContainer.tabIndex = -1;\n      var separator = createElement(\"span\", \"flatpickr-time-separator\", \":\");\n      var hourInput = createNumberInput(\"flatpickr-hour\");\n      self.hourElement = hourInput.getElementsByTagName(\"input\")[0];\n      var minuteInput = createNumberInput(\"flatpickr-minute\");\n      self.minuteElement = minuteInput.getElementsByTagName(\"input\")[0];\n      self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\n      self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? self.config.defaultHour : military2ampm(self.config.defaultHour));\n      self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : self.config.defaultMinute);\n      self.hourElement.setAttribute(\"step\", self.config.hourIncrement.toString());\n      self.minuteElement.setAttribute(\"step\", self.config.minuteIncrement.toString());\n      self.hourElement.setAttribute(\"min\", self.config.time_24hr ? \"0\" : \"1\");\n      self.hourElement.setAttribute(\"max\", self.config.time_24hr ? \"23\" : \"12\");\n      self.minuteElement.setAttribute(\"min\", \"0\");\n      self.minuteElement.setAttribute(\"max\", \"59\");\n      self.timeContainer.appendChild(hourInput);\n      self.timeContainer.appendChild(separator);\n      self.timeContainer.appendChild(minuteInput);\n      if (self.config.time_24hr) self.timeContainer.classList.add(\"time24hr\");\n\n      if (self.config.enableSeconds) {\n        self.timeContainer.classList.add(\"hasSeconds\");\n        var secondInput = createNumberInput(\"flatpickr-second\");\n        self.secondElement = secondInput.getElementsByTagName(\"input\")[0];\n        self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : self.config.defaultSeconds);\n        self.secondElement.setAttribute(\"step\", self.minuteElement.getAttribute(\"step\"));\n        self.secondElement.setAttribute(\"min\", \"0\");\n        self.secondElement.setAttribute(\"max\", \"59\");\n        self.timeContainer.appendChild(createElement(\"span\", \"flatpickr-time-separator\", \":\"));\n        self.timeContainer.appendChild(secondInput);\n      }\n\n      if (!self.config.time_24hr) {\n        // add self.amPM if appropriate\n        self.amPM = createElement(\"span\", \"flatpickr-am-pm\", self.l10n.amPM[_int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);\n        self.amPM.title = self.l10n.toggleTitle;\n        self.amPM.tabIndex = -1;\n        self.timeContainer.appendChild(self.amPM);\n      }\n\n      return self.timeContainer;\n    }\n\n    function buildWeekdays() {\n      if (!self.weekdayContainer) self.weekdayContainer = createElement(\"div\", \"flatpickr-weekdays\");else clearNode(self.weekdayContainer);\n\n      for (var i = self.config.showMonths; i--;) {\n        var container = createElement(\"div\", \"flatpickr-weekdaycontainer\");\n        self.weekdayContainer.appendChild(container);\n      }\n\n      updateWeekdays();\n      return self.weekdayContainer;\n    }\n\n    function updateWeekdays() {\n      var firstDayOfWeek = self.l10n.firstDayOfWeek;\n      var weekdays = self.l10n.weekdays.shorthand.slice();\n\n      if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\n        weekdays = weekdays.splice(firstDayOfWeek, weekdays.length).concat(weekdays.splice(0, firstDayOfWeek));\n      }\n\n      for (var i = self.config.showMonths; i--;) {\n        self.weekdayContainer.children[i].innerHTML = \"\\n      <span class='flatpickr-weekday'>\\n        \" + weekdays.join(\"</span><span class='flatpickr-weekday'>\") + \"\\n      </span>\\n      \";\n      }\n    }\n    /* istanbul ignore next */\n\n\n    function buildWeeks() {\n      self.calendarContainer.classList.add(\"hasWeeks\");\n      var weekWrapper = createElement(\"div\", \"flatpickr-weekwrapper\");\n      weekWrapper.appendChild(createElement(\"span\", \"flatpickr-weekday\", self.l10n.weekAbbreviation));\n      var weekNumbers = createElement(\"div\", \"flatpickr-weeks\");\n      weekWrapper.appendChild(weekNumbers);\n      return {\n        weekWrapper: weekWrapper,\n        weekNumbers: weekNumbers\n      };\n    }\n\n    function changeMonth(value, is_offset) {\n      if (is_offset === void 0) {\n        is_offset = true;\n      }\n\n      var delta = is_offset ? value : value - self.currentMonth;\n      if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;\n      self.currentMonth += delta;\n\n      if (self.currentMonth < 0 || self.currentMonth > 11) {\n        self.currentYear += self.currentMonth > 11 ? 1 : -1;\n        self.currentMonth = (self.currentMonth + 12) % 12;\n        triggerEvent(\"onYearChange\");\n      }\n\n      buildDays();\n      triggerEvent(\"onMonthChange\");\n      updateNavigationCurrentMonth();\n    }\n\n    function clear(triggerChangeEvent, toInitial) {\n      if (triggerChangeEvent === void 0) {\n        triggerChangeEvent = true;\n      }\n\n      if (toInitial === void 0) {\n        toInitial = true;\n      }\n\n      self.input.value = \"\";\n      if (self.altInput !== undefined) self.altInput.value = \"\";\n      if (self.mobileInput !== undefined) self.mobileInput.value = \"\";\n      self.selectedDates = [];\n      self.latestSelectedDateObj = undefined;\n\n      if (toInitial === true) {\n        self.currentYear = self._initialDate.getFullYear();\n        self.currentMonth = self._initialDate.getMonth();\n      }\n\n      self.showTimeInput = false;\n\n      if (self.config.enableTime === true) {\n        setDefaultHours();\n      }\n\n      self.redraw();\n      if (triggerChangeEvent) // triggerChangeEvent is true (default) or an Event\n        triggerEvent(\"onChange\");\n    }\n\n    function close() {\n      self.isOpen = false;\n\n      if (!self.isMobile) {\n        if (self.calendarContainer !== undefined) {\n          self.calendarContainer.classList.remove(\"open\");\n        }\n\n        if (self._input !== undefined) {\n          self._input.classList.remove(\"active\");\n        }\n      }\n\n      triggerEvent(\"onClose\");\n    }\n\n    function destroy() {\n      if (self.config !== undefined) triggerEvent(\"onDestroy\");\n\n      for (var i = self._handlers.length; i--;) {\n        var h = self._handlers[i];\n        h.element.removeEventListener(h.event, h.handler, h.options);\n      }\n\n      self._handlers = [];\n\n      if (self.mobileInput) {\n        if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);\n        self.mobileInput = undefined;\n      } else if (self.calendarContainer && self.calendarContainer.parentNode) {\n        if (self.config[\"static\"] && self.calendarContainer.parentNode) {\n          var wrapper = self.calendarContainer.parentNode;\n          wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);\n\n          if (wrapper.parentNode) {\n            while (wrapper.firstChild) {\n              wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);\n            }\n\n            wrapper.parentNode.removeChild(wrapper);\n          }\n        } else self.calendarContainer.parentNode.removeChild(self.calendarContainer);\n      }\n\n      if (self.altInput) {\n        self.input.type = \"text\";\n        if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);\n        delete self.altInput;\n      }\n\n      if (self.input) {\n        self.input.type = self.input._type;\n        self.input.classList.remove(\"flatpickr-input\");\n        self.input.removeAttribute(\"readonly\");\n        self.input.value = \"\";\n      }\n\n      [\"_showTimeInput\", \"latestSelectedDateObj\", \"_hideNextMonthArrow\", \"_hidePrevMonthArrow\", \"__hideNextMonthArrow\", \"__hidePrevMonthArrow\", \"isMobile\", \"isOpen\", \"selectedDateElem\", \"minDateHasTime\", \"maxDateHasTime\", \"days\", \"daysContainer\", \"_input\", \"_positionElement\", \"innerContainer\", \"rContainer\", \"monthNav\", \"todayDateElem\", \"calendarContainer\", \"weekdayContainer\", \"prevMonthNav\", \"nextMonthNav\", \"currentMonthElement\", \"currentYearElement\", \"navigationCurrentMonth\", \"selectedDateElem\", \"config\"].forEach(function (k) {\n        try {\n          delete self[k];\n        } catch (_) {}\n      });\n    }\n\n    function isCalendarElem(elem) {\n      if (self.config.appendTo && self.config.appendTo.contains(elem)) return true;\n      return self.calendarContainer.contains(elem);\n    }\n\n    function documentClick(e) {\n      if (self.isOpen && !self.config.inline) {\n        var eventTarget_1 = getEventTarget(e);\n        var isCalendarElement = isCalendarElem(eventTarget_1);\n        var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || // web components\n        // e.path is not present in all browsers. circumventing typechecks\n        e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));\n        var lostFocus = e.type === \"blur\" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);\n        var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {\n          return elem.contains(eventTarget_1);\n        });\n\n        if (lostFocus && isIgnored) {\n          self.close();\n\n          if (self.config.mode === \"range\" && self.selectedDates.length === 1) {\n            self.clear(false);\n            self.redraw();\n          }\n        }\n      }\n    }\n\n    function changeYear(newYear) {\n      if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;\n      var newYearNum = newYear,\n          isNewYear = self.currentYear !== newYearNum;\n      self.currentYear = newYearNum || self.currentYear;\n\n      if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {\n        self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\n      } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {\n        self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\n      }\n\n      if (isNewYear) {\n        self.redraw();\n        triggerEvent(\"onYearChange\");\n      }\n    }\n\n    function isEnabled(date, timeless) {\n      if (timeless === void 0) {\n        timeless = true;\n      }\n\n      var dateToCheck = self.parseDate(date, undefined, timeless); // timeless\n\n      if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;\n      if (self.config.enable.length === 0 && self.config.disable.length === 0) return true;\n      if (dateToCheck === undefined) return false;\n      var bool = self.config.enable.length > 0,\n          array = bool ? self.config.enable : self.config.disable;\n\n      for (var i = 0, d = void 0; i < array.length; i++) {\n        d = array[i];\n        if (typeof d === \"function\" && d(dateToCheck) // disabled by function\n        ) return bool;else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) // disabled by date\n          return bool;else if (typeof d === \"string\" && dateToCheck !== undefined) {\n          // disabled by date string\n          var parsed = self.parseDate(d, undefined, true);\n          return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;\n        } else if ( // disabled by range\n        _typeof(d) === \"object\" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;\n      }\n\n      return !bool;\n    }\n\n    function isInView(elem) {\n      if (self.daysContainer !== undefined) return elem.className.indexOf(\"hidden\") === -1 && self.daysContainer.contains(elem);\n      return false;\n    }\n\n    function onKeyDown(e) {\n      // e.key                      e.keyCode\n      // \"Backspace\"                        8\n      // \"Tab\"                              9\n      // \"Enter\"                           13\n      // \"Escape\"     (IE \"Esc\")           27\n      // \"ArrowLeft\"  (IE \"Left\")          37\n      // \"ArrowUp\"    (IE \"Up\")            38\n      // \"ArrowRight\" (IE \"Right\")         39\n      // \"ArrowDown\"  (IE \"Down\")          40\n      // \"Delete\"     (IE \"Del\")           46\n      var isInput = e.target === self._input;\n      var allowInput = self.config.allowInput;\n      var allowKeydown = self.isOpen && (!allowInput || !isInput);\n      var allowInlineKeydown = self.config.inline && isInput && !allowInput;\n\n      if (e.keyCode === 13 && isInput) {\n        if (allowInput) {\n          self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);\n          return e.target.blur();\n        } else self.open();\n      } else if (isCalendarElem(e.target) || allowKeydown || allowInlineKeydown) {\n        var isTimeObj = !!self.timeContainer && self.timeContainer.contains(e.target);\n\n        switch (e.keyCode) {\n          case 13:\n            if (isTimeObj) {\n              updateTime();\n              focusAndClose();\n            } else selectDate(e);\n\n            break;\n\n          case 27:\n            // escape\n            e.preventDefault();\n            focusAndClose();\n            break;\n\n          case 8:\n          case 46:\n            if (isInput && !self.config.allowInput) {\n              e.preventDefault();\n              self.clear();\n            }\n\n            break;\n\n          case 37:\n          case 39:\n            if (!isTimeObj) {\n              e.preventDefault();\n\n              if (self.daysContainer !== undefined && (allowInput === false || document.activeElement && isInView(document.activeElement))) {\n                var delta_1 = e.keyCode === 39 ? 1 : -1;\n                if (!e.ctrlKey) focusOnDay(undefined, delta_1);else {\n                  e.stopPropagation();\n                  changeMonth(delta_1);\n                  focusOnDay(getFirstAvailableDay(1), 0);\n                }\n              }\n            } else if (self.hourElement) self.hourElement.focus();\n\n            break;\n\n          case 38:\n          case 40:\n            e.preventDefault();\n            var delta = e.keyCode === 40 ? 1 : -1;\n\n            if (self.daysContainer && e.target.$i !== undefined || e.target === self.input) {\n              if (e.ctrlKey) {\n                e.stopPropagation();\n                changeYear(self.currentYear - delta);\n                focusOnDay(getFirstAvailableDay(1), 0);\n              } else if (!isTimeObj) focusOnDay(undefined, delta * 7);\n            } else if (self.config.enableTime) {\n              if (!isTimeObj && self.hourElement) self.hourElement.focus();\n              updateTime(e);\n\n              self._debouncedChange();\n            }\n\n            break;\n\n          case 9:\n            if (isTimeObj) {\n              var elems = [self.hourElement, self.minuteElement, self.secondElement, self.amPM].filter(function (x) {\n                return x;\n              });\n              var i = elems.indexOf(e.target);\n\n              if (i !== -1) {\n                var target = elems[i + (e.shiftKey ? -1 : 1)];\n\n                if (target !== undefined) {\n                  e.preventDefault();\n                  target.focus();\n                } else if (e.shiftKey) {\n                  e.preventDefault();\n\n                  self._input.focus();\n                }\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (self.amPM !== undefined && e.target === self.amPM) {\n        switch (e.key) {\n          case self.l10n.amPM[0].charAt(0):\n          case self.l10n.amPM[0].charAt(0).toLowerCase():\n            self.amPM.textContent = self.l10n.amPM[0];\n            setHoursFromInputs();\n            updateValue();\n            break;\n\n          case self.l10n.amPM[1].charAt(0):\n          case self.l10n.amPM[1].charAt(0).toLowerCase():\n            self.amPM.textContent = self.l10n.amPM[1];\n            setHoursFromInputs();\n            updateValue();\n            break;\n        }\n      }\n\n      triggerEvent(\"onKeyDown\", e);\n    }\n\n    function onMouseOver(elem) {\n      if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(\"flatpickr-day\") || elem.classList.contains(\"disabled\"))) return;\n      var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(),\n          initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(),\n          rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()),\n          rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime()),\n          lastDate = self.daysContainer.lastChild.lastChild.dateObj.getTime();\n      var containsDisabled = false;\n      var minRange = 0,\n          maxRange = 0;\n\n      for (var t = rangeStartDate; t < lastDate; t += duration.DAY) {\n        if (!isEnabled(new Date(t), true)) {\n          containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;\n          if (t < initialDate && (!minRange || t > minRange)) minRange = t;else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;\n        }\n      }\n\n      for (var m = 0; m < self.config.showMonths; m++) {\n        var month = self.daysContainer.children[m];\n        var prevMonth = self.daysContainer.children[m - 1];\n\n        var _loop_1 = function _loop_1(i, l) {\n          var dayElem = month.children[i],\n              date = dayElem.dateObj;\n          var timestamp = date.getTime();\n          var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;\n\n          if (outOfRange) {\n            dayElem.classList.add(\"notAllowed\");\n            [\"inRange\", \"startRange\", \"endRange\"].forEach(function (c) {\n              dayElem.classList.remove(c);\n            });\n            return \"continue\";\n          } else if (containsDisabled && !outOfRange) return \"continue\";\n\n          [\"startRange\", \"inRange\", \"endRange\", \"notAllowed\"].forEach(function (c) {\n            dayElem.classList.remove(c);\n          });\n\n          if (elem !== undefined) {\n            elem.classList.add(hoverDate < self.selectedDates[0].getTime() ? \"startRange\" : \"endRange\");\n\n            if (month.contains(elem) || !(m > 0 && prevMonth && prevMonth.lastChild.dateObj.getTime() >= timestamp)) {\n              if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add(\"startRange\");else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add(\"endRange\");\n              if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate)) dayElem.classList.add(\"inRange\");\n            }\n          }\n        };\n\n        for (var i = 0, l = month.children.length; i < l; i++) {\n          _loop_1(i, l);\n        }\n      }\n    }\n\n    function onResize() {\n      if (self.isOpen && !self.config[\"static\"] && !self.config.inline) positionCalendar();\n    }\n\n    function setDefaultTime() {\n      self.setDate(self.config.minDate !== undefined ? new Date(self.config.minDate.getTime()) : new Date(), false);\n      setDefaultHours();\n      updateValue();\n    }\n\n    function open(e, positionElement) {\n      if (positionElement === void 0) {\n        positionElement = self._positionElement;\n      }\n\n      if (self.isMobile === true) {\n        if (e) {\n          e.preventDefault();\n          e.target && e.target.blur();\n        }\n\n        if (self.mobileInput !== undefined) {\n          self.mobileInput.focus();\n          self.mobileInput.click();\n        }\n\n        triggerEvent(\"onOpen\");\n        return;\n      }\n\n      if (self._input.disabled || self.config.inline) return;\n      var wasOpen = self.isOpen;\n      self.isOpen = true;\n\n      if (!wasOpen) {\n        self.calendarContainer.classList.add(\"open\");\n\n        self._input.classList.add(\"active\");\n\n        triggerEvent(\"onOpen\");\n        positionCalendar(positionElement);\n      }\n\n      if (self.config.enableTime === true && self.config.noCalendar === true) {\n        if (self.selectedDates.length === 0) {\n          setDefaultTime();\n        }\n\n        if (self.config.allowInput === false && (e === undefined || !self.timeContainer.contains(e.relatedTarget))) {\n          setTimeout(function () {\n            return self.hourElement.select();\n          }, 50);\n        }\n      }\n    }\n\n    function minMaxDateSetter(type) {\n      return function (date) {\n        var dateObj = self.config[\"_\" + type + \"Date\"] = self.parseDate(date, self.config.dateFormat);\n        var inverseDateObj = self.config[\"_\" + (type === \"min\" ? \"max\" : \"min\") + \"Date\"];\n\n        if (dateObj !== undefined) {\n          self[type === \"min\" ? \"minDateHasTime\" : \"maxDateHasTime\"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;\n        }\n\n        if (self.selectedDates) {\n          self.selectedDates = self.selectedDates.filter(function (d) {\n            return isEnabled(d);\n          });\n          if (!self.selectedDates.length && type === \"min\") setHoursFromDate(dateObj);\n          updateValue();\n        }\n\n        if (self.daysContainer) {\n          redraw();\n          if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();else self.currentYearElement.removeAttribute(type);\n          self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();\n        }\n      };\n    }\n\n    function parseConfig() {\n      var boolOpts = [\"wrap\", \"weekNumbers\", \"allowInput\", \"clickOpens\", \"time_24hr\", \"enableTime\", \"noCalendar\", \"altInput\", \"shorthandCurrentMonth\", \"inline\", \"static\", \"enableSeconds\", \"disableMobile\"];\n\n      var userConfig = _assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));\n\n      var formats = {};\n      self.config.parseDate = userConfig.parseDate;\n      self.config.formatDate = userConfig.formatDate;\n      Object.defineProperty(self.config, \"enable\", {\n        get: function get() {\n          return self.config._enable;\n        },\n        set: function set(dates) {\n          self.config._enable = parseDateRules(dates);\n        }\n      });\n      Object.defineProperty(self.config, \"disable\", {\n        get: function get() {\n          return self.config._disable;\n        },\n        set: function set(dates) {\n          self.config._disable = parseDateRules(dates);\n        }\n      });\n      var timeMode = userConfig.mode === \"time\";\n\n      if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {\n        formats.dateFormat = userConfig.noCalendar || timeMode ? \"H:i\" + (userConfig.enableSeconds ? \":S\" : \"\") : flatpickr.defaultConfig.dateFormat + \" H:i\" + (userConfig.enableSeconds ? \":S\" : \"\");\n      }\n\n      if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {\n        formats.altFormat = userConfig.noCalendar || timeMode ? \"h:i\" + (userConfig.enableSeconds ? \":S K\" : \" K\") : flatpickr.defaultConfig.altFormat + (\" h:i\" + (userConfig.enableSeconds ? \":S\" : \"\") + \" K\");\n      }\n\n      Object.defineProperty(self.config, \"minDate\", {\n        get: function get() {\n          return self.config._minDate;\n        },\n        set: minMaxDateSetter(\"min\")\n      });\n      Object.defineProperty(self.config, \"maxDate\", {\n        get: function get() {\n          return self.config._maxDate;\n        },\n        set: minMaxDateSetter(\"max\")\n      });\n\n      var minMaxTimeSetter = function minMaxTimeSetter(type) {\n        return function (val) {\n          self.config[type === \"min\" ? \"_minTime\" : \"_maxTime\"] = self.parseDate(val, \"H:i\");\n        };\n      };\n\n      Object.defineProperty(self.config, \"minTime\", {\n        get: function get() {\n          return self.config._minTime;\n        },\n        set: minMaxTimeSetter(\"min\")\n      });\n      Object.defineProperty(self.config, \"maxTime\", {\n        get: function get() {\n          return self.config._maxTime;\n        },\n        set: minMaxTimeSetter(\"max\")\n      });\n\n      if (userConfig.mode === \"time\") {\n        self.config.noCalendar = true;\n        self.config.enableTime = true;\n      }\n\n      Object.assign(self.config, formats, userConfig);\n\n      for (var i = 0; i < boolOpts.length; i++) {\n        self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === \"true\";\n      }\n\n      HOOKS.filter(function (hook) {\n        return self.config[hook] !== undefined;\n      }).forEach(function (hook) {\n        self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);\n      });\n      self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === \"single\" && !self.config.disable.length && !self.config.enable.length && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n      for (var i = 0; i < self.config.plugins.length; i++) {\n        var pluginConf = self.config.plugins[i](self) || {};\n\n        for (var key in pluginConf) {\n          if (HOOKS.indexOf(key) > -1) {\n            self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);\n          } else if (typeof userConfig[key] === \"undefined\") self.config[key] = pluginConf[key];\n        }\n      }\n\n      triggerEvent(\"onParseConfig\");\n    }\n\n    function setupLocale() {\n      if (_typeof(self.config.locale) !== \"object\" && typeof flatpickr.l10ns[self.config.locale] === \"undefined\") self.config.errorHandler(new Error(\"flatpickr: invalid locale \" + self.config.locale));\n      self.l10n = _assign({}, flatpickr.l10ns[\"default\"], _typeof(self.config.locale) === \"object\" ? self.config.locale : self.config.locale !== \"default\" ? flatpickr.l10ns[self.config.locale] : undefined);\n      tokenRegex.K = \"(\" + self.l10n.amPM[0] + \"|\" + self.l10n.amPM[1] + \"|\" + self.l10n.amPM[0].toLowerCase() + \"|\" + self.l10n.amPM[1].toLowerCase() + \")\";\n      self.formatDate = createDateFormatter(self);\n      self.parseDate = createDateParser({\n        config: self.config,\n        l10n: self.l10n\n      });\n    }\n\n    function positionCalendar(customPositionElement) {\n      if (self.calendarContainer === undefined) return;\n      triggerEvent(\"onPreCalendarPosition\");\n      var positionElement = customPositionElement || self._positionElement;\n      var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function (acc, child) {\n        return acc + child.offsetHeight;\n      }, 0),\n          calendarWidth = self.calendarContainer.offsetWidth,\n          configPos = self.config.position.split(\" \"),\n          configPosVertical = configPos[0],\n          configPosHorizontal = configPos.length > 1 ? configPos[1] : null,\n          inputBounds = positionElement.getBoundingClientRect(),\n          distanceFromBottom = window.innerHeight - inputBounds.bottom,\n          showOnTop = configPosVertical === \"above\" || configPosVertical !== \"below\" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;\n      var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);\n      toggleClass(self.calendarContainer, \"arrowTop\", !showOnTop);\n      toggleClass(self.calendarContainer, \"arrowBottom\", showOnTop);\n      if (self.config.inline) return;\n      var left = window.pageXOffset + inputBounds.left - (configPosHorizontal != null && configPosHorizontal === \"center\" ? (calendarWidth - inputBounds.width) / 2 : 0);\n      var right = window.document.body.offsetWidth - inputBounds.right;\n      var rightMost = left + calendarWidth > window.document.body.offsetWidth;\n      var centerMost = right + calendarWidth > window.document.body.offsetWidth;\n      toggleClass(self.calendarContainer, \"rightMost\", rightMost);\n      if (self.config[\"static\"]) return;\n      self.calendarContainer.style.top = top + \"px\";\n\n      if (!rightMost) {\n        self.calendarContainer.style.left = left + \"px\";\n        self.calendarContainer.style.right = \"auto\";\n      } else if (!centerMost) {\n        self.calendarContainer.style.left = \"auto\";\n        self.calendarContainer.style.right = right + \"px\";\n      } else {\n        var doc = document.styleSheets[0]; // some testing environments don't have css support\n\n        if (doc === undefined) return;\n        var bodyWidth = window.document.body.offsetWidth;\n        var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);\n        var centerBefore = \".flatpickr-calendar.centerMost:before\";\n        var centerAfter = \".flatpickr-calendar.centerMost:after\";\n        var centerIndex = doc.cssRules.length;\n        var centerStyle = \"{left:\" + inputBounds.left + \"px;right:auto;}\";\n        toggleClass(self.calendarContainer, \"rightMost\", false);\n        toggleClass(self.calendarContainer, \"centerMost\", true);\n        doc.insertRule(centerBefore + \",\" + centerAfter + centerStyle, centerIndex);\n        self.calendarContainer.style.left = centerLeft + \"px\";\n        self.calendarContainer.style.right = \"auto\";\n      }\n    }\n\n    function redraw() {\n      if (self.config.noCalendar || self.isMobile) return;\n      updateNavigationCurrentMonth();\n      buildDays();\n    }\n\n    function focusAndClose() {\n      self._input.focus();\n\n      if (window.navigator.userAgent.indexOf(\"MSIE\") !== -1 || navigator.msMaxTouchPoints !== undefined) {\n        // hack - bugs in the way IE handles focus keeps the calendar open\n        setTimeout(self.close, 0);\n      } else {\n        self.close();\n      }\n    }\n\n    function selectDate(e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      var isSelectable = function isSelectable(day) {\n        return day.classList && day.classList.contains(\"flatpickr-day\") && !day.classList.contains(\"disabled\") && !day.classList.contains(\"notAllowed\");\n      };\n\n      var t = findParent(e.target, isSelectable);\n      if (t === undefined) return;\n      var target = t;\n      var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());\n      var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== \"range\";\n      self.selectedDateElem = target;\n      if (self.config.mode === \"single\") self.selectedDates = [selectedDate];else if (self.config.mode === \"multiple\") {\n        var selectedIndex = isDateSelected(selectedDate);\n        if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);else self.selectedDates.push(selectedDate);\n      } else if (self.config.mode === \"range\") {\n        if (self.selectedDates.length === 2) {\n          self.clear(false, false);\n        }\n\n        self.latestSelectedDateObj = selectedDate;\n        self.selectedDates.push(selectedDate); // unless selecting same date twice, sort ascendingly\n\n        if (compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function (a, b) {\n          return a.getTime() - b.getTime();\n        });\n      }\n      setHoursFromInputs();\n\n      if (shouldChangeMonth) {\n        var isNewYear = self.currentYear !== selectedDate.getFullYear();\n        self.currentYear = selectedDate.getFullYear();\n        self.currentMonth = selectedDate.getMonth();\n        if (isNewYear) triggerEvent(\"onYearChange\");\n        triggerEvent(\"onMonthChange\");\n      }\n\n      updateNavigationCurrentMonth();\n      buildDays();\n      updateValue();\n      if (self.config.enableTime) setTimeout(function () {\n        return self.showTimeInput = true;\n      }, 50); // maintain focus\n\n      if (!shouldChangeMonth && self.config.mode !== \"range\" && self.config.showMonths === 1) focusOnDayElem(target);else if (self.selectedDateElem !== undefined && self.hourElement === undefined) {\n        self.selectedDateElem && self.selectedDateElem.focus();\n      }\n      if (self.hourElement !== undefined) self.hourElement !== undefined && self.hourElement.focus();\n\n      if (self.config.closeOnSelect) {\n        var single = self.config.mode === \"single\" && !self.config.enableTime;\n        var range = self.config.mode === \"range\" && self.selectedDates.length === 2 && !self.config.enableTime;\n\n        if (single || range) {\n          focusAndClose();\n        }\n      }\n\n      triggerChange();\n    }\n\n    var CALLBACKS = {\n      locale: [setupLocale, updateWeekdays],\n      showMonths: [buildMonths, setCalendarWidth, buildWeekdays]\n    };\n\n    function set(option, value) {\n      if (option !== null && _typeof(option) === \"object\") Object.assign(self.config, option);else {\n        self.config[option] = value;\n        if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach(function (x) {\n          return x();\n        });else if (HOOKS.indexOf(option) > -1) self.config[option] = arrayify(value);\n      }\n      self.redraw();\n      updateValue(false);\n    }\n\n    function setSelectedDate(inputDate, format) {\n      var dates = [];\n      if (inputDate instanceof Array) dates = inputDate.map(function (d) {\n        return self.parseDate(d, format);\n      });else if (inputDate instanceof Date || typeof inputDate === \"number\") dates = [self.parseDate(inputDate, format)];else if (typeof inputDate === \"string\") {\n        switch (self.config.mode) {\n          case \"single\":\n          case \"time\":\n            dates = [self.parseDate(inputDate, format)];\n            break;\n\n          case \"multiple\":\n            dates = inputDate.split(self.config.conjunction).map(function (date) {\n              return self.parseDate(date, format);\n            });\n            break;\n\n          case \"range\":\n            dates = inputDate.split(self.l10n.rangeSeparator).map(function (date) {\n              return self.parseDate(date, format);\n            });\n            break;\n\n          default:\n            break;\n        }\n      } else self.config.errorHandler(new Error(\"Invalid date supplied: \" + JSON.stringify(inputDate)));\n      self.selectedDates = dates.filter(function (d) {\n        return d instanceof Date && isEnabled(d, false);\n      });\n      if (self.config.mode === \"range\") self.selectedDates.sort(function (a, b) {\n        return a.getTime() - b.getTime();\n      });\n    }\n\n    function setDate(date, triggerChange, format) {\n      if (triggerChange === void 0) {\n        triggerChange = false;\n      }\n\n      if (format === void 0) {\n        format = self.config.dateFormat;\n      }\n\n      if (date !== 0 && !date || date instanceof Array && date.length === 0) return self.clear(triggerChange);\n      setSelectedDate(date, format);\n      self.showTimeInput = self.selectedDates.length > 0;\n      self.latestSelectedDateObj = self.selectedDates[0];\n      self.redraw();\n      jumpToDate();\n      setHoursFromDate();\n      updateValue(triggerChange);\n      if (triggerChange) triggerEvent(\"onChange\");\n    }\n\n    function parseDateRules(arr) {\n      return arr.slice().map(function (rule) {\n        if (typeof rule === \"string\" || typeof rule === \"number\" || rule instanceof Date) {\n          return self.parseDate(rule, undefined, true);\n        } else if (rule && _typeof(rule) === \"object\" && rule.from && rule.to) return {\n          from: self.parseDate(rule.from, undefined),\n          to: self.parseDate(rule.to, undefined)\n        };\n\n        return rule;\n      }).filter(function (x) {\n        return x;\n      }); // remove falsy values\n    }\n\n    function setupDates() {\n      self.selectedDates = [];\n      self.now = self.parseDate(self.config.now) || new Date(); // Workaround IE11 setting placeholder as the input's value\n\n      var preloadedDate = self.config.defaultDate || ((self.input.nodeName === \"INPUT\" || self.input.nodeName === \"TEXTAREA\") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);\n      if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);\n      self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;\n      self.currentYear = self._initialDate.getFullYear();\n      self.currentMonth = self._initialDate.getMonth();\n      if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];\n      if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, \"H:i\");\n      if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, \"H:i\");\n      self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);\n      self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);\n      Object.defineProperty(self, \"showTimeInput\", {\n        get: function get() {\n          return self._showTimeInput;\n        },\n        set: function set(bool) {\n          self._showTimeInput = bool;\n          if (self.calendarContainer) toggleClass(self.calendarContainer, \"showTimeInput\", bool);\n          self.isOpen && positionCalendar();\n        }\n      });\n    }\n\n    function setupInputs() {\n      self.input = self.config.wrap ? element.querySelector(\"[data-input]\") : element;\n      /* istanbul ignore next */\n\n      if (!self.input) {\n        self.config.errorHandler(new Error(\"Invalid input element specified\"));\n        return;\n      } // hack: store previous type to restore it after destroy()\n\n\n      self.input._type = self.input.type;\n      self.input.type = \"text\";\n      self.input.classList.add(\"flatpickr-input\");\n      self._input = self.input;\n\n      if (self.config.altInput) {\n        // replicate self.element\n        self.altInput = createElement(self.input.nodeName, self.input.className + \" \" + self.config.altInputClass);\n        self._input = self.altInput;\n        self.altInput.placeholder = self.input.placeholder;\n        self.altInput.disabled = self.input.disabled;\n        self.altInput.required = self.input.required;\n        self.altInput.tabIndex = self.input.tabIndex;\n        self.altInput.type = \"text\";\n        self.input.setAttribute(\"type\", \"hidden\");\n        if (!self.config[\"static\"] && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\n      }\n\n      if (!self.config.allowInput) self._input.setAttribute(\"readonly\", \"readonly\");\n      self._positionElement = self.config.positionElement || self._input;\n    }\n\n    function setupMobile() {\n      var inputType = self.config.enableTime ? self.config.noCalendar ? \"time\" : \"datetime-local\" : \"date\";\n      self.mobileInput = createElement(\"input\", self.input.className + \" flatpickr-mobile\");\n      self.mobileInput.step = self.input.getAttribute(\"step\") || \"any\";\n      self.mobileInput.tabIndex = 1;\n      self.mobileInput.type = inputType;\n      self.mobileInput.disabled = self.input.disabled;\n      self.mobileInput.required = self.input.required;\n      self.mobileInput.placeholder = self.input.placeholder;\n      self.mobileFormatStr = inputType === \"datetime-local\" ? \"Y-m-d\\\\TH:i:S\" : inputType === \"date\" ? \"Y-m-d\" : \"H:i:S\";\n\n      if (self.selectedDates.length > 0) {\n        self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);\n      }\n\n      if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, \"Y-m-d\");\n      if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, \"Y-m-d\");\n      self.input.type = \"hidden\";\n      if (self.altInput !== undefined) self.altInput.type = \"hidden\";\n\n      try {\n        if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\n      } catch (_a) {}\n\n      bind(self.mobileInput, \"change\", function (e) {\n        self.setDate(e.target.value, false, self.mobileFormatStr);\n        triggerEvent(\"onChange\");\n        triggerEvent(\"onClose\");\n      });\n    }\n\n    function toggle(e) {\n      if (self.isOpen === true) return self.close();\n      self.open(e);\n    }\n\n    function triggerEvent(event, data) {\n      // If the instance has been destroyed already, all hooks have been removed\n      if (self.config === undefined) return;\n      var hooks = self.config[event];\n\n      if (hooks !== undefined && hooks.length > 0) {\n        for (var i = 0; hooks[i] && i < hooks.length; i++) {\n          hooks[i](self.selectedDates, self.input.value, self, data);\n        }\n      }\n\n      if (event === \"onChange\") {\n        self.input.dispatchEvent(createEvent(\"change\")); // many front-end frameworks bind to the input event\n\n        self.input.dispatchEvent(createEvent(\"input\"));\n      }\n    }\n\n    function createEvent(name) {\n      var e = document.createEvent(\"Event\");\n      e.initEvent(name, true, true);\n      return e;\n    }\n\n    function isDateSelected(date) {\n      for (var i = 0; i < self.selectedDates.length; i++) {\n        if (compareDates(self.selectedDates[i], date) === 0) return \"\" + i;\n      }\n\n      return false;\n    }\n\n    function isDateInRange(date) {\n      if (self.config.mode !== \"range\" || self.selectedDates.length < 2) return false;\n      return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;\n    }\n\n    function updateNavigationCurrentMonth() {\n      if (self.config.noCalendar || self.isMobile || !self.monthNav) return;\n      self.yearElements.forEach(function (yearElement, i) {\n        var d = new Date(self.currentYear, self.currentMonth, 1);\n        d.setMonth(self.currentMonth + i);\n        self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + \" \";\n        yearElement.value = d.getFullYear().toString();\n      });\n      self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());\n      self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());\n    }\n\n    function getDateStr(format) {\n      return self.selectedDates.map(function (dObj) {\n        return self.formatDate(dObj, format);\n      }).filter(function (d, i, arr) {\n        return self.config.mode !== \"range\" || self.config.enableTime || arr.indexOf(d) === i;\n      }).join(self.config.mode !== \"range\" ? self.config.conjunction : self.l10n.rangeSeparator);\n    }\n    /**\r\n     * Updates the values of inputs associated with the calendar\r\n     */\n\n\n    function updateValue(triggerChange) {\n      if (triggerChange === void 0) {\n        triggerChange = true;\n      }\n\n      if (self.selectedDates.length === 0) return self.clear(triggerChange);\n\n      if (self.mobileInput !== undefined && self.mobileFormatStr) {\n        self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : \"\";\n      }\n\n      self.input.value = getDateStr(self.config.dateFormat);\n\n      if (self.altInput !== undefined) {\n        self.altInput.value = getDateStr(self.config.altFormat);\n      }\n\n      if (triggerChange !== false) triggerEvent(\"onValueUpdate\");\n    }\n\n    function onMonthNavClick(e) {\n      e.preventDefault();\n      var isPrevMonth = self.prevMonthNav.contains(e.target);\n      var isNextMonth = self.nextMonthNav.contains(e.target);\n\n      if (isPrevMonth || isNextMonth) {\n        changeMonth(isPrevMonth ? -1 : 1);\n      } else if (self.yearElements.indexOf(e.target) >= 0) {\n        e.target.select();\n      } else if (e.target.classList.contains(\"arrowUp\")) {\n        self.changeYear(self.currentYear + 1);\n      } else if (e.target.classList.contains(\"arrowDown\")) {\n        self.changeYear(self.currentYear - 1);\n      }\n    }\n\n    function timeWrapper(e) {\n      e.preventDefault();\n      var isKeyDown = e.type === \"keydown\",\n          input = e.target;\n\n      if (self.amPM !== undefined && e.target === self.amPM) {\n        self.amPM.textContent = self.l10n.amPM[_int(self.amPM.textContent === self.l10n.amPM[0])];\n      }\n\n      var min = parseFloat(input.getAttribute(\"min\")),\n          max = parseFloat(input.getAttribute(\"max\")),\n          step = parseFloat(input.getAttribute(\"step\")),\n          curValue = parseInt(input.value, 10),\n          delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);\n      var newValue = curValue + step * delta;\n\n      if (typeof input.value !== \"undefined\" && input.value.length === 2) {\n        var isHourElem = input === self.hourElement,\n            isMinuteElem = input === self.minuteElement;\n\n        if (newValue < min) {\n          newValue = max + newValue + _int(!isHourElem) + (_int(isHourElem) && _int(!self.amPM));\n          if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);\n        } else if (newValue > max) {\n          newValue = input === self.hourElement ? newValue - max - _int(!self.amPM) : min;\n          if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);\n        }\n\n        if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {\n          self.amPM.textContent = self.l10n.amPM[_int(self.amPM.textContent === self.l10n.amPM[0])];\n        }\n\n        input.value = pad(newValue);\n      }\n    }\n\n    init();\n    return self;\n  }\n  /* istanbul ignore next */\n\n\n  function _flatpickr(nodeList, config) {\n    // static list\n    var nodes = Array.prototype.slice.call(nodeList).filter(function (x) {\n      return x instanceof HTMLElement;\n    });\n    var instances = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      try {\n        if (node.getAttribute(\"data-fp-omit\") !== null) continue;\n\n        if (node._flatpickr !== undefined) {\n          node._flatpickr.destroy();\n\n          node._flatpickr = undefined;\n        }\n\n        node._flatpickr = FlatpickrInstance(node, config || {});\n        instances.push(node._flatpickr);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    return instances.length === 1 ? instances[0] : instances;\n  }\n  /* istanbul ignore next */\n\n\n  if (typeof HTMLElement !== \"undefined\") {\n    // browser env\n    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\n      return _flatpickr(this, config);\n    };\n\n    HTMLElement.prototype.flatpickr = function (config) {\n      return _flatpickr([this], config);\n    };\n  }\n  /* istanbul ignore next */\n\n\n  var flatpickr = function flatpickr(selector, config) {\n    if (typeof selector === \"string\") {\n      return _flatpickr(window.document.querySelectorAll(selector), config);\n    } else if (selector instanceof Node) {\n      return _flatpickr([selector], config);\n    } else {\n      return _flatpickr(selector, config);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  flatpickr.defaultConfig = defaults;\n  flatpickr.l10ns = {\n    en: _assign({}, english),\n    \"default\": _assign({}, english)\n  };\n\n  flatpickr.localize = function (l10n) {\n    flatpickr.l10ns[\"default\"] = _assign({}, flatpickr.l10ns[\"default\"], l10n);\n  };\n\n  flatpickr.setDefaults = function (config) {\n    flatpickr.defaultConfig = _assign({}, flatpickr.defaultConfig, config);\n  };\n\n  flatpickr.parseDate = createDateParser({});\n  flatpickr.formatDate = createDateFormatter({});\n  flatpickr.compareDates = compareDates;\n  /* istanbul ignore next */\n\n  if (typeof jQuery !== \"undefined\") {\n    jQuery.fn.flatpickr = function (config) {\n      return _flatpickr(this, config);\n    };\n  }\n\n  Date.prototype.fp_incr = function (days) {\n    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === \"string\" ? parseInt(days, 10) : days));\n  };\n\n  if (typeof window !== \"undefined\") {\n    window.flatpickr = flatpickr;\n  }\n\n  return flatpickr;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/datetimepicker.js\n");

/***/ }),

/***/ "./resources/js/plugins/glide.js":
/*!***************************************!*\
  !*** ./resources/js/plugins/glide.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n/*!\n * Glide.js v3.3.0\n * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)\n * Released under the MIT License.\n */\n(function (global, factory) {\n  ( false ? 0 : _typeof2(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  var defaults = {\n    /**\n     * Type of the movement.\n     *\n     * Available types:\n     * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.\n     * `carousel` - Changes slides without starting over when it reaches the first or last slide.\n     *\n     * @type {String}\n     */\n    type: 'slider',\n\n    /**\n     * Start at specific slide number defined with zero-based index.\n     *\n     * @type {Number}\n     */\n    startAt: 0,\n\n    /**\n     * A number of slides visible on the single viewport.\n     *\n     * @type {Number}\n     */\n    perView: 1,\n\n    /**\n     * Focus currently active slide at a specified position in the track.\n     *\n     * Available inputs:\n     * `center` - Current slide will be always focused at the center of a track.\n     * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.\n     *\n     * @type {String|Number}\n     */\n    focusAt: 0,\n\n    /**\n     * A size of the gap added between slides.\n     *\n     * @type {Number}\n     */\n    gap: 10,\n\n    /**\n     * Change slides after a specified interval. Use `false` for turning off autoplay.\n     *\n     * @type {Number|Boolean}\n     */\n    autoplay: false,\n\n    /**\n     * Stop autoplay on mouseover event.\n     *\n     * @type {Boolean}\n     */\n    hoverpause: true,\n\n    /**\n     * Allow for changing slides with left and right keyboard arrows.\n     *\n     * @type {Boolean}\n     */\n    keyboard: true,\n\n    /**\n     * Stop running `perView` number of slides from the end. Use this\n     * option if you don't want to have an empty space after\n     * a slider. Works only with `slider` type and a\n     * non-centered `focusAt` setting.\n     *\n     * @type {Boolean}\n     */\n    bound: false,\n\n    /**\n     * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.\n     *\n     * @type {Number|Boolean}\n     */\n    swipeThreshold: 80,\n\n    /**\n     * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.\n     *\n     * @type {Number|Boolean}\n     */\n    dragThreshold: 120,\n\n    /**\n     * A number of slides moved on single swipe.\n     *\n     * Available types:\n     * `` - Moves slider by one slide per swipe\n     * `|` - Moves slider between views per swipe (number of slides defined in `perView` options)\n     *\n     * @type {String}\n     */\n    perSwipe: '|',\n\n    /**\n     * Moving distance ratio of the slides on a swiping and dragging.\n     *\n     * @type {Number}\n     */\n    touchRatio: 0.5,\n\n    /**\n     * Angle required to activate slides moving on swiping or dragging.\n     *\n     * @type {Number}\n     */\n    touchAngle: 45,\n\n    /**\n     * Duration of the animation in milliseconds.\n     *\n     * @type {Number}\n     */\n    animationDuration: 400,\n\n    /**\n     * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.\n     *\n     * @type {Boolean}\n     */\n    rewind: true,\n\n    /**\n     * Duration of the rewinding animation of the `slider` type in milliseconds.\n     *\n     * @type {Number}\n     */\n    rewindDuration: 800,\n\n    /**\n     * Easing function for the animation.\n     *\n     * @type {String}\n     */\n    animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',\n\n    /**\n     * Wait for the animation to finish until the next user input can be processed\n     *\n     * @type {boolean}\n     */\n    waitForTransition: true,\n\n    /**\n     * Throttle costly events at most once per every wait milliseconds.\n     *\n     * @type {Number}\n     */\n    throttle: 10,\n\n    /**\n     * Moving direction mode.\n     *\n     * Available inputs:\n     * - 'ltr' - left to right movement,\n     * - 'rtl' - right to left movement.\n     *\n     * @type {String}\n     */\n    direction: 'ltr',\n\n    /**\n     * The distance value of the next and previous viewports which\n     * have to peek in the current view. Accepts number and\n     * pixels as a string. Left and right peeking can be\n     * set up separately with a directions object.\n     *\n     * For example:\n     * `100` - Peek 100px on the both sides.\n     * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.\n     *\n     * @type {Number|String|Object}\n     */\n    peek: 0,\n\n    /**\n     * Collection of options applied at specified media breakpoints.\n     * For example: display two slides per view under 800px.\n     * `{\n     *   '800px': {\n     *     perView: 2\n     *   }\n     * }`\n     */\n    breakpoints: {},\n\n    /**\n     * Collection of internally used HTML classes.\n     *\n     * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object\n     * @type {Object}\n     */\n    classes: {\n      swipeable: 'glide--swipeable',\n      dragging: 'glide--dragging',\n      direction: {\n        ltr: 'glide--ltr',\n        rtl: 'glide--rtl'\n      },\n      type: {\n        slider: 'glide--slider',\n        carousel: 'glide--carousel'\n      },\n      slide: {\n        clone: 'glide__slide--clone',\n        active: 'glide__slide--active'\n      },\n      arrow: {\n        disabled: 'glide__arrow--disabled'\n      },\n      nav: {\n        active: 'glide__bullet--active'\n      }\n    }\n  };\n  /**\n   * Outputs warning message to the bowser console.\n   *\n   * @param  {String} msg\n   * @return {Void}\n   */\n\n  function warn(msg) {\n    console.error(\"[Glide warn]: \" + msg);\n  }\n\n  var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return _typeof2(obj);\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n  };\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  var inherits = function inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof2(superClass));\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (_typeof2(call) === \"object\" || typeof call === \"function\") ? call : self;\n  };\n  /**\n   * Converts value entered as number\n   * or string to integer value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n\n\n  function toInt(value) {\n    return parseInt(value);\n  }\n  /**\n   * Converts value entered as number\n   * or string to flat value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n\n\n  function toFloat(value) {\n    return parseFloat(value);\n  }\n  /**\n   * Indicates whether the specified value is a string.\n   *\n   * @param  {*}   value\n   * @return {Boolean}\n   */\n\n\n  function isString(value) {\n    return typeof value === 'string';\n  }\n  /**\n   * Indicates whether the specified value is an object.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n\n\n  function isObject(value) {\n    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n    return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators\n  }\n  /**\n   * Indicates whether the specified value is a function.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  /**\n   * Indicates whether the specified value is undefined.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Indicates whether the specified value is an array.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n\n\n  function isArray(value) {\n    return value.constructor === Array;\n  }\n  /**\n   * Creates and initializes specified collection of extensions.\n   * Each extension receives access to instance of glide and rest of components.\n   *\n   * @param {Object} glide\n   * @param {Object} extensions\n   *\n   * @returns {Object}\n   */\n\n\n  function mount(glide, extensions, events) {\n    var components = {};\n\n    for (var name in extensions) {\n      if (isFunction(extensions[name])) {\n        components[name] = extensions[name](glide, components, events);\n      } else {\n        warn('Extension must be a function');\n      }\n    }\n\n    for (var _name in components) {\n      if (isFunction(components[_name].mount)) {\n        components[_name].mount();\n      }\n    }\n\n    return components;\n  }\n  /**\n   * Defines getter and setter property on the specified object.\n   *\n   * @param  {Object} obj         Object where property has to be defined.\n   * @param  {String} prop        Name of the defined property.\n   * @param  {Object} definition  Get and set definitions for the property.\n   * @return {Void}\n   */\n\n\n  function define(obj, prop, definition) {\n    Object.defineProperty(obj, prop, definition);\n  }\n  /**\n   * Sorts aphabetically object keys.\n   *\n   * @param  {Object} obj\n   * @return {Object}\n   */\n\n\n  function sortKeys(obj) {\n    return Object.keys(obj).sort().reduce(function (r, k) {\n      r[k] = obj[k];\n      return r[k], r;\n    }, {});\n  }\n  /**\n   * Merges passed settings object with default options.\n   *\n   * @param  {Object} defaults\n   * @param  {Object} settings\n   * @return {Object}\n   */\n\n\n  function mergeOptions(defaults, settings) {\n    var options = _extends({}, defaults, settings); // `Object.assign` do not deeply merge objects, so we\n    // have to do it manually for every nested object\n    // in options. Although it does not look smart,\n    // it's smaller and faster than some fancy\n    // merging deep-merge algorithm script.\n\n\n    if (settings.hasOwnProperty('classes')) {\n      options.classes = _extends({}, defaults.classes, settings.classes);\n\n      if (settings.classes.hasOwnProperty('direction')) {\n        options.classes.direction = _extends({}, defaults.classes.direction, settings.classes.direction);\n      }\n\n      if (settings.classes.hasOwnProperty('type')) {\n        options.classes.type = _extends({}, defaults.classes.type, settings.classes.type);\n      }\n\n      if (settings.classes.hasOwnProperty('slide')) {\n        options.classes.slide = _extends({}, defaults.classes.slide, settings.classes.slide);\n      }\n\n      if (settings.classes.hasOwnProperty('arrow')) {\n        options.classes.arrow = _extends({}, defaults.classes.arrow, settings.classes.arrow);\n      }\n\n      if (settings.classes.hasOwnProperty('nav')) {\n        options.classes.nav = _extends({}, defaults.classes.nav, settings.classes.nav);\n      }\n    }\n\n    if (settings.hasOwnProperty('breakpoints')) {\n      options.breakpoints = _extends({}, defaults.breakpoints, settings.breakpoints);\n    }\n\n    return options;\n  }\n\n  var EventsBus = function () {\n    /**\n     * Construct a EventBus instance.\n     *\n     * @param {Object} events\n     */\n    function EventsBus() {\n      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, EventsBus);\n      this.events = events;\n      this.hop = events.hasOwnProperty;\n    }\n    /**\n     * Adds listener to the specifed event.\n     *\n     * @param {String|Array} event\n     * @param {Function} handler\n     */\n\n\n    createClass(EventsBus, [{\n      key: 'on',\n      value: function on(event, handler) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.on(event[i], handler);\n          }\n        } // Create the event's object if not yet created\n\n\n        if (!this.hop.call(this.events, event)) {\n          this.events[event] = [];\n        } // Add the handler to queue\n\n\n        var index = this.events[event].push(handler) - 1; // Provide handle back for removal of event\n\n        return {\n          remove: function remove() {\n            delete this.events[event][index];\n          }\n        };\n      }\n      /**\n       * Runs registered handlers for specified event.\n       *\n       * @param {String|Array} event\n       * @param {Object=} context\n       */\n\n    }, {\n      key: 'emit',\n      value: function emit(event, context) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.emit(event[i], context);\n          }\n        } // If the event doesn't exist, or there's no handlers in queue, just leave\n\n\n        if (!this.hop.call(this.events, event)) {\n          return;\n        } // Cycle through events queue, fire!\n\n\n        this.events[event].forEach(function (item) {\n          item(context || {});\n        });\n      }\n    }]);\n    return EventsBus;\n  }();\n\n  var Glide = function () {\n    /**\n     * Construct glide.\n     *\n     * @param  {String} selector\n     * @param  {Object} options\n     */\n    function Glide(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      classCallCheck(this, Glide);\n      this._c = {};\n      this._t = [];\n      this._e = new EventsBus();\n      this.disabled = false;\n      this.selector = selector;\n      this.settings = mergeOptions(defaults, options);\n      this.index = this.settings.startAt;\n    }\n    /**\n     * Initializes glide.\n     *\n     * @param {Object} extensions Collection of extensions to initialize.\n     * @return {Glide}\n     */\n\n\n    createClass(Glide, [{\n      key: 'mount',\n      value: function mount$$1() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        this._e.emit('mount.before');\n\n        if (isObject(extensions)) {\n          this._c = mount(this, extensions, this._e);\n        } else {\n          warn('You need to provide a object on `mount()`');\n        }\n\n        this._e.emit('mount.after');\n\n        return this;\n      }\n      /**\n       * Collects an instance `translate` transformers.\n       *\n       * @param  {Array} transformers Collection of transformers.\n       * @return {Void}\n       */\n\n    }, {\n      key: 'mutate',\n      value: function mutate() {\n        var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        if (isArray(transformers)) {\n          this._t = transformers;\n        } else {\n          warn('You need to provide a array on `mutate()`');\n        }\n\n        return this;\n      }\n      /**\n       * Updates glide with specified settings.\n       *\n       * @param {Object} settings\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'update',\n      value: function update() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.settings = mergeOptions(this.settings, settings);\n\n        if (settings.hasOwnProperty('startAt')) {\n          this.index = settings.startAt;\n        }\n\n        this._e.emit('update');\n\n        return this;\n      }\n      /**\n       * Change slide with specified pattern. A pattern must be in the special format:\n       * `>` - Move one forward\n       * `<` - Move one backward\n       * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)\n       * `>>` - Rewinds to end (last slide)\n       * `<<` - Rewinds to start (first slide)\n       *\n       * @param {String} pattern\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'go',\n      value: function go(pattern) {\n        this._c.Run.make(pattern);\n\n        return this;\n      }\n      /**\n       * Move track by specified distance.\n       *\n       * @param {String} distance\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'move',\n      value: function move(distance) {\n        this._c.Transition.disable();\n\n        this._c.Move.make(distance);\n\n        return this;\n      }\n      /**\n       * Destroy instance and revert all changes done by this._c.\n       *\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._e.emit('destroy');\n\n        return this;\n      }\n      /**\n       * Start instance autoplaying.\n       *\n       * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'play',\n      value: function play() {\n        var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (interval) {\n          this.settings.autoplay = interval;\n        }\n\n        this._e.emit('play');\n\n        return this;\n      }\n      /**\n       * Stop instance autoplaying.\n       *\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'pause',\n      value: function pause() {\n        this._e.emit('pause');\n\n        return this;\n      }\n      /**\n       * Sets glide into a idle status.\n       *\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'disable',\n      value: function disable() {\n        this.disabled = true;\n        return this;\n      }\n      /**\n       * Sets glide into a active status.\n       *\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'enable',\n      value: function enable() {\n        this.disabled = false;\n        return this;\n      }\n      /**\n       * Adds cuutom event listener with handler.\n       *\n       * @param  {String|Array} event\n       * @param  {Function} handler\n       * @return {Glide}\n       */\n\n    }, {\n      key: 'on',\n      value: function on(event, handler) {\n        this._e.on(event, handler);\n\n        return this;\n      }\n      /**\n       * Checks if glide is a precised type.\n       *\n       * @param  {String} name\n       * @return {Boolean}\n       */\n\n    }, {\n      key: 'isType',\n      value: function isType(name) {\n        return this.settings.type === name;\n      }\n      /**\n       * Gets value of the core options.\n       *\n       * @return {Object}\n       */\n\n    }, {\n      key: 'settings',\n      get: function get$$1() {\n        return this._o;\n      }\n      /**\n       * Sets value of the core options.\n       *\n       * @param  {Object} o\n       * @return {Void}\n       */\n      ,\n      set: function set$$1(o) {\n        if (isObject(o)) {\n          this._o = o;\n        } else {\n          warn('Options must be an `object` instance.');\n        }\n      }\n      /**\n       * Gets current index of the slider.\n       *\n       * @return {Object}\n       */\n\n    }, {\n      key: 'index',\n      get: function get$$1() {\n        return this._i;\n      }\n      /**\n       * Sets current index a slider.\n       *\n       * @return {Object}\n       */\n      ,\n      set: function set$$1(i) {\n        this._i = toInt(i);\n      }\n      /**\n       * Gets type name of the slider.\n       *\n       * @return {String}\n       */\n\n    }, {\n      key: 'type',\n      get: function get$$1() {\n        return this.settings.type;\n      }\n      /**\n       * Gets value of the idle status.\n       *\n       * @return {Boolean}\n       */\n\n    }, {\n      key: 'disabled',\n      get: function get$$1() {\n        return this._d;\n      }\n      /**\n       * Sets value of the idle status.\n       *\n       * @return {Boolean}\n       */\n      ,\n      set: function set$$1(status) {\n        this._d = !!status;\n      }\n    }]);\n    return Glide;\n  }();\n\n  function Run(Glide, Components, Events) {\n    var Run = {\n      /**\n       * Initializes autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this._o = false;\n      },\n\n      /**\n       * Makes glides running based on the passed moving schema.\n       *\n       * @param {String} move\n       */\n      make: function make(move) {\n        var _this = this;\n\n        if (!Glide.disabled) {\n          !Glide.settings.waitForTransition || Glide.disable();\n          this.move = move;\n          Events.emit('run.before', this.move);\n          this.calculate();\n          Events.emit('run', this.move);\n          Components.Transition.after(function () {\n            if (_this.isStart()) {\n              Events.emit('run.start', _this.move);\n            }\n\n            if (_this.isEnd()) {\n              Events.emit('run.end', _this.move);\n            }\n\n            if (_this.isOffset()) {\n              _this._o = false;\n              Events.emit('run.offset', _this.move);\n            }\n\n            Events.emit('run.after', _this.move);\n            Glide.enable();\n          });\n        }\n      },\n\n      /**\n       * Calculates current index based on defined move.\n       *\n       * @return {Number|Undefined}\n       */\n      calculate: function calculate() {\n        var move = this.move,\n            length = this.length;\n        var steps = move.steps,\n            direction = move.direction; // By default assume that size of view is equal to one slide\n\n        var viewSize = 1; // While direction is `=` we want jump to\n        // a specified index described in steps.\n\n        if (direction === '=') {\n          Glide.index = steps;\n          return;\n        } // When pattern is equal to `>>` we want\n        // fast forward to the last slide.\n\n\n        if (direction === '>' && steps === '>') {\n          Glide.index = length;\n          return;\n        } // When pattern is equal to `<<` we want\n        // fast forward to the first slide.\n\n\n        if (direction === '<' && steps === '<') {\n          Glide.index = 0;\n          return;\n        } // pagination movement\n\n\n        if (direction === '|') {\n          viewSize = Glide.settings.perView || 1;\n        } // we are moving forward\n\n\n        if (direction === '>' || direction === '|' && steps === '>') {\n          var index = calculateForwardIndex(viewSize);\n\n          if (index > length) {\n            this._o = true;\n          }\n\n          Glide.index = normalizeForwardIndex(index, viewSize);\n          return;\n        } // we are moving backward\n\n\n        if (direction === '<' || direction === '|' && steps === '<') {\n          var _index = calculateBackwardIndex(viewSize);\n\n          if (_index < 0) {\n            this._o = true;\n          }\n\n          Glide.index = normalizeBackwardIndex(_index, viewSize);\n          return;\n        }\n\n        warn('Invalid direction pattern [' + direction + steps + '] has been used');\n      },\n\n      /**\n       * Checks if we are on the first slide.\n       *\n       * @return {Boolean}\n       */\n      isStart: function isStart() {\n        return Glide.index <= 0;\n      },\n\n      /**\n       * Checks if we are on the last slide.\n       *\n       * @return {Boolean}\n       */\n      isEnd: function isEnd() {\n        return Glide.index >= this.length;\n      },\n\n      /**\n       * Checks if we are making a offset run.\n       *\n       * @param {String} direction\n       * @return {Boolean}\n       */\n      isOffset: function isOffset() {\n        var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!direction) {\n          return this._o;\n        }\n\n        if (!this._o) {\n          return false;\n        } // did we view to the right?\n\n\n        if (direction === '|>') {\n          return this.move.direction === '|' && this.move.steps === '>';\n        } // did we view to the left?\n\n\n        if (direction === '|<') {\n          return this.move.direction === '|' && this.move.steps === '<';\n        }\n\n        return this.move.direction === direction;\n      },\n\n      /**\n       * Checks if bound mode is active\n       *\n       * @return {Boolean}\n       */\n      isBound: function isBound() {\n        return Glide.isType('slider') && Glide.settings.focusAt !== 'center' && Glide.settings.bound;\n      }\n    };\n    /**\n     * Returns index value to move forward/to the right\n     *\n     * @param viewSize\n     * @returns {Number}\n     */\n\n    function calculateForwardIndex(viewSize) {\n      var index = Glide.index;\n\n      if (Glide.isType('carousel')) {\n        return index + viewSize;\n      }\n\n      return index + (viewSize - index % viewSize);\n    }\n    /**\n     * Normalizes the given forward index based on glide settings, preventing it to exceed certain boundaries\n     *\n     * @param index\n     * @param length\n     * @param viewSize\n     * @returns {Number}\n     */\n\n\n    function normalizeForwardIndex(index, viewSize) {\n      var length = Run.length;\n\n      if (index <= length) {\n        return index;\n      }\n\n      if (Glide.isType('carousel')) {\n        return index - (length + 1);\n      }\n\n      if (Glide.settings.rewind) {\n        // bound does funny things with the length, therefor we have to be certain\n        // that we are on the last possible index value given by bound\n        if (Run.isBound() && !Run.isEnd()) {\n          return length;\n        }\n\n        return 0;\n      }\n\n      if (Run.isBound()) {\n        return length;\n      }\n\n      return Math.floor(length / viewSize) * viewSize;\n    }\n    /**\n     * Calculates index value to move backward/to the left\n     *\n     * @param viewSize\n     * @returns {Number}\n     */\n\n\n    function calculateBackwardIndex(viewSize) {\n      var index = Glide.index;\n\n      if (Glide.isType('carousel')) {\n        return index - viewSize;\n      } // ensure our back navigation results in the same index as a forward navigation\n      // to experience a homogeneous paging\n\n\n      var view = Math.ceil(index / viewSize);\n      return (view - 1) * viewSize;\n    }\n    /**\n     * Normalizes the given backward index based on glide settings, preventing it to exceed certain boundaries\n     *\n     * @param index\n     * @param length\n     * @param viewSize\n     * @returns {*}\n     */\n\n\n    function normalizeBackwardIndex(index, viewSize) {\n      var length = Run.length;\n\n      if (index >= 0) {\n        return index;\n      }\n\n      if (Glide.isType('carousel')) {\n        return index + (length + 1);\n      }\n\n      if (Glide.settings.rewind) {\n        // bound does funny things with the length, therefor we have to be certain\n        // that we are on first possible index value before we to rewind to the length given by bound\n        if (Run.isBound() && Run.isStart()) {\n          return length;\n        }\n\n        return Math.floor(length / viewSize) * viewSize;\n      }\n\n      return 0;\n    }\n\n    define(Run, 'move', {\n      /**\n       * Gets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      get: function get() {\n        return this._m;\n      },\n\n      /**\n       * Sets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      set: function set(value) {\n        var step = value.substr(1);\n        this._m = {\n          direction: value.substr(0, 1),\n          steps: step ? toInt(step) ? toInt(step) : step : 0\n        };\n      }\n    });\n    define(Run, 'length', {\n      /**\n       * Gets value of the running distance based\n       * on zero-indexing number of slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n        var length = Components.Html.slides.length; // If the `bound` option is active, a maximum running distance should be\n        // reduced by `perView` and `focusAt` settings. Running distance\n        // should end before creating an empty space after instance.\n\n        if (this.isBound()) {\n          return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);\n        }\n\n        return length - 1;\n      }\n    });\n    define(Run, 'offset', {\n      /**\n       * Gets status of the offsetting flag.\n       *\n       * @return {Boolean}\n       */\n      get: function get() {\n        return this._o;\n      }\n    });\n    return Run;\n  }\n  /**\n   * Returns a current time.\n   *\n   * @return {Number}\n   */\n\n\n  function now() {\n    return new Date().getTime();\n  }\n  /**\n   * Returns a function, that, when invoked, will only be triggered\n   * at most once during a given window of time.\n   *\n   * @param {Function} func\n   * @param {Number} wait\n   * @param {Object=} options\n   * @return {Function}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n\n\n  function throttle(func, wait, options) {\n    var timeout = void 0,\n        context = void 0,\n        args = void 0,\n        result = void 0;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function later() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function throttled() {\n      var at = now();\n      if (!previous && options.leading === false) previous = at;\n      var remaining = wait - (at - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = at;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  var MARGIN_TYPE = {\n    ltr: ['marginLeft', 'marginRight'],\n    rtl: ['marginRight', 'marginLeft']\n  };\n\n  function Gaps(Glide, Components, Events) {\n    var Gaps = {\n      /**\n       * Applies gaps between slides. First and last\n       * slides do not receive it's edge margins.\n       *\n       * @param {HTMLCollection} slides\n       * @return {Void}\n       */\n      apply: function apply(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n          var direction = Components.Direction.value;\n\n          if (i !== 0) {\n            style[MARGIN_TYPE[direction][0]] = this.value / 2 + 'px';\n          } else {\n            style[MARGIN_TYPE[direction][0]] = '';\n          }\n\n          if (i !== slides.length - 1) {\n            style[MARGIN_TYPE[direction][1]] = this.value / 2 + 'px';\n          } else {\n            style[MARGIN_TYPE[direction][1]] = '';\n          }\n        }\n      },\n\n      /**\n       * Removes gaps from the slides.\n       *\n       * @param {HTMLCollection} slides\n       * @returns {Void}\n       */\n      remove: function remove(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n          style.marginLeft = '';\n          style.marginRight = '';\n        }\n      }\n    };\n    define(Gaps, 'value', {\n      /**\n       * Gets value of the gap.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return toInt(Glide.settings.gap);\n      }\n    });\n    define(Gaps, 'grow', {\n      /**\n       * Gets additional dimentions value caused by gaps.\n       * Used to increase width of the slides wrapper.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Gaps.value * Components.Sizes.length;\n      }\n    });\n    define(Gaps, 'reductor', {\n      /**\n       * Gets reduction value caused by gaps.\n       * Used to subtract width of the slides.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var perView = Glide.settings.perView;\n        return Gaps.value * (perView - 1) / perView;\n      }\n    });\n    /**\n     * Apply calculated gaps:\n     * - after building, so slides (including clones) will receive proper margins\n     * - on updating via API, to recalculate gaps with new options\n     */\n\n    Events.on(['build.after', 'update'], throttle(function () {\n      Gaps.apply(Components.Html.wrapper.children);\n    }, 30));\n    /**\n     * Remove gaps:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Gaps.remove(Components.Html.wrapper.children);\n    });\n    return Gaps;\n  }\n  /**\n   * Finds siblings nodes of the passed node.\n   *\n   * @param  {Element} node\n   * @return {Array}\n   */\n\n\n  function siblings(node) {\n    if (node && node.parentNode) {\n      var n = node.parentNode.firstChild;\n      var matched = [];\n\n      for (; n; n = n.nextSibling) {\n        if (n.nodeType === 1 && n !== node) {\n          matched.push(n);\n        }\n      }\n\n      return matched;\n    }\n\n    return [];\n  }\n  /**\n   * Checks if passed node exist and is a valid element.\n   *\n   * @param  {Element} node\n   * @return {Boolean}\n   */\n\n\n  function exist(node) {\n    if (node && node instanceof window.HTMLElement) {\n      return true;\n    }\n\n    return false;\n  }\n\n  var TRACK_SELECTOR = '[data-glide-el=\"track\"]';\n\n  function Html(Glide, Components) {\n    var Html = {\n      /**\n       * Setup slider HTML nodes.\n       *\n       * @param {Glide} glide\n       */\n      mount: function mount() {\n        this.root = Glide.selector;\n        this.track = this.root.querySelector(TRACK_SELECTOR);\n        this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (slide) {\n          return !slide.classList.contains(Glide.settings.classes.slide.clone);\n        });\n      }\n    };\n    define(Html, 'root', {\n      /**\n       * Gets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._r;\n      },\n\n      /**\n       * Sets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      set: function set(r) {\n        if (isString(r)) {\n          r = document.querySelector(r);\n        }\n\n        if (exist(r)) {\n          Html._r = r;\n        } else {\n          warn('Root element must be a existing Html node');\n        }\n      }\n    });\n    define(Html, 'track', {\n      /**\n       * Gets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._t;\n      },\n\n      /**\n       * Sets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      set: function set(t) {\n        if (exist(t)) {\n          Html._t = t;\n        } else {\n          warn('Could not find track element. Please use ' + TRACK_SELECTOR + ' attribute.');\n        }\n      }\n    });\n    define(Html, 'wrapper', {\n      /**\n       * Gets node of the slides wrapper.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html.track.children[0];\n      }\n    });\n    return Html;\n  }\n\n  function Peek(Glide, Components, Events) {\n    var Peek = {\n      /**\n       * Setups how much to peek based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.peek;\n      }\n    };\n    define(Peek, 'value', {\n      /**\n       * Gets value of the peek.\n       *\n       * @returns {Number|Object}\n       */\n      get: function get() {\n        return Peek._v;\n      },\n\n      /**\n       * Sets value of the peek.\n       *\n       * @param {Number|Object} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (isObject(value)) {\n          value.before = toInt(value.before);\n          value.after = toInt(value.after);\n        } else {\n          value = toInt(value);\n        }\n\n        Peek._v = value;\n      }\n    });\n    define(Peek, 'reductor', {\n      /**\n       * Gets reduction value caused by peek.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var value = Peek.value;\n        var perView = Glide.settings.perView;\n\n        if (isObject(value)) {\n          return value.before / perView + value.after / perView;\n        }\n\n        return value * 2 / perView;\n      }\n    });\n    /**\n     * Recalculate peeking sizes on:\n     * - when resizing window to update to proper percents\n     */\n\n    Events.on(['resize', 'update'], function () {\n      Peek.mount();\n    });\n    return Peek;\n  }\n\n  function Move(Glide, Components, Events) {\n    var Move = {\n      /**\n       * Constructs move component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        this._o = 0;\n      },\n\n      /**\n       * Calculates a movement value based on passed offset and currently active index.\n       *\n       * @param  {Number} offset\n       * @return {Void}\n       */\n      make: function make() {\n        var _this = this;\n\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this.offset = offset;\n        Events.emit('move', {\n          movement: this.value\n        });\n        Components.Transition.after(function () {\n          Events.emit('move.after', {\n            movement: _this.value\n          });\n        });\n      }\n    };\n    define(Move, 'offset', {\n      /**\n       * Gets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Move._o;\n      },\n\n      /**\n       * Sets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      set: function set(value) {\n        Move._o = !isUndefined(value) ? toInt(value) : 0;\n      }\n    });\n    define(Move, 'translate', {\n      /**\n       * Gets a raw movement value.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Sizes.slideWidth * Glide.index;\n      }\n    });\n    define(Move, 'value', {\n      /**\n       * Gets an actual movement value corrected by offset.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var offset = this.offset;\n        var translate = this.translate;\n\n        if (Components.Direction.is('rtl')) {\n          return translate + offset;\n        }\n\n        return translate - offset;\n      }\n    });\n    /**\n     * Make movement to proper slide on:\n     * - before build, so glide will start at `startAt` index\n     * - on each standard run to move to newly calculated index\n     */\n\n    Events.on(['build.before', 'run'], function () {\n      Move.make();\n    });\n    return Move;\n  }\n\n  function Sizes(Glide, Components, Events) {\n    var Sizes = {\n      /**\n       * Setups dimentions of slides.\n       *\n       * @return {Void}\n       */\n      setupSlides: function setupSlides() {\n        var width = this.slideWidth + 'px';\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = width;\n        }\n      },\n\n      /**\n       * Setups dimentions of slides wrapper.\n       *\n       * @return {Void}\n       */\n      setupWrapper: function setupWrapper() {\n        Components.Html.wrapper.style.width = this.wrapperSize + 'px';\n      },\n\n      /**\n       * Removes applied styles from HTML elements.\n       *\n       * @returns {Void}\n       */\n      remove: function remove() {\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = '';\n        }\n\n        Components.Html.wrapper.style.width = '';\n      }\n    };\n    define(Sizes, 'length', {\n      /**\n       * Gets count number of the slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.slides.length;\n      }\n    });\n    define(Sizes, 'width', {\n      /**\n       * Gets width value of the slider (visible area).\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.root.offsetWidth;\n      }\n    });\n    define(Sizes, 'wrapperSize', {\n      /**\n       * Gets size of the slides wrapper.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;\n      }\n    });\n    define(Sizes, 'slideWidth', {\n      /**\n       * Gets width value of a single slide.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;\n      }\n    });\n    /**\n     * Apply calculated glide's dimensions:\n     * - before building, so other dimentions (e.g. translate) will be calculated propertly\n     * - when resizing window to recalculate sildes dimensions\n     * - on updating via API, to calculate dimensions based on new options\n     */\n\n    Events.on(['build.before', 'resize', 'update'], function () {\n      Sizes.setupSlides();\n      Sizes.setupWrapper();\n    });\n    /**\n     * Remove calculated glide's dimensions:\n     * - on destoting to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Sizes.remove();\n    });\n    return Sizes;\n  }\n\n  function Build(Glide, Components, Events) {\n    var Build = {\n      /**\n       * Init glide building. Adds classes, sets\n       * dimensions and setups initial state.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        Events.emit('build.before');\n        this.typeClass();\n        this.activeClass();\n        Events.emit('build.after');\n      },\n\n      /**\n       * Adds `type` class to the glide element.\n       *\n       * @return {Void}\n       */\n      typeClass: function typeClass() {\n        Components.Html.root.classList.add(Glide.settings.classes.type[Glide.settings.type]);\n      },\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      activeClass: function activeClass() {\n        var classes = Glide.settings.classes;\n        var slide = Components.Html.slides[Glide.index];\n\n        if (slide) {\n          slide.classList.add(classes.slide.active);\n          siblings(slide).forEach(function (sibling) {\n            sibling.classList.remove(classes.slide.active);\n          });\n        }\n      },\n\n      /**\n       * Removes HTML classes applied at building.\n       *\n       * @return {Void}\n       */\n      removeClasses: function removeClasses() {\n        var _Glide$settings$class = Glide.settings.classes,\n            type = _Glide$settings$class.type,\n            slide = _Glide$settings$class.slide;\n        Components.Html.root.classList.remove(type[Glide.settings.type]);\n        Components.Html.slides.forEach(function (sibling) {\n          sibling.classList.remove(slide.active);\n        });\n      }\n    };\n    /**\n     * Clear building classes:\n     * - on destroying to bring HTML to its initial state\n     * - on updating to remove classes before remounting component\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Build.removeClasses();\n    });\n    /**\n     * Remount component:\n     * - on resizing of the window to calculate new dimentions\n     * - on updating settings via API\n     */\n\n    Events.on(['resize', 'update'], function () {\n      Build.mount();\n    });\n    /**\n     * Swap active class of current slide:\n     * - after each move to the new index\n     */\n\n    Events.on('move.after', function () {\n      Build.activeClass();\n    });\n    return Build;\n  }\n\n  function Clones(Glide, Components, Events) {\n    var Clones = {\n      /**\n       * Create pattern map and collect slides to be cloned.\n       */\n      mount: function mount() {\n        this.items = [];\n\n        if (Glide.isType('carousel')) {\n          this.items = this.collect();\n        }\n      },\n\n      /**\n       * Collect clones with pattern.\n       *\n       * @return {[]}\n       */\n      collect: function collect() {\n        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var slides = Components.Html.slides;\n        var _Glide$settings = Glide.settings,\n            perView = _Glide$settings.perView,\n            classes = _Glide$settings.classes;\n        var peekIncrementer = +!!Glide.settings.peek;\n        var cloneCount = perView + peekIncrementer + Math.round(perView / 2);\n        var append = slides.slice(0, cloneCount).reverse();\n        var prepend = slides.slice(cloneCount * -1);\n\n        for (var r = 0; r < Math.max(1, Math.floor(perView / slides.length)); r++) {\n          for (var i = 0; i < append.length; i++) {\n            var clone = append[i].cloneNode(true);\n            clone.classList.add(classes.slide.clone);\n            items.push(clone);\n          }\n\n          for (var _i = 0; _i < prepend.length; _i++) {\n            var _clone = prepend[_i].cloneNode(true);\n\n            _clone.classList.add(classes.slide.clone);\n\n            items.unshift(_clone);\n          }\n        }\n\n        return items;\n      },\n\n      /**\n       * Append cloned slides with generated pattern.\n       *\n       * @return {Void}\n       */\n      append: function append() {\n        var items = this.items;\n        var _Components$Html = Components.Html,\n            wrapper = _Components$Html.wrapper,\n            slides = _Components$Html.slides;\n        var half = Math.floor(items.length / 2);\n        var prepend = items.slice(0, half).reverse();\n        var append = items.slice(half * -1).reverse();\n        var width = Components.Sizes.slideWidth + 'px';\n\n        for (var i = 0; i < append.length; i++) {\n          wrapper.appendChild(append[i]);\n        }\n\n        for (var _i2 = 0; _i2 < prepend.length; _i2++) {\n          wrapper.insertBefore(prepend[_i2], slides[0]);\n        }\n\n        for (var _i3 = 0; _i3 < items.length; _i3++) {\n          items[_i3].style.width = width;\n        }\n      },\n\n      /**\n       * Remove all cloned slides.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        var items = this.items;\n\n        for (var i = 0; i < items.length; i++) {\n          Components.Html.wrapper.removeChild(items[i]);\n        }\n      }\n    };\n    define(Clones, 'grow', {\n      /**\n       * Gets additional dimentions value caused by clones.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;\n      }\n    });\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n\n    Events.on('update', function () {\n      Clones.remove();\n      Clones.mount();\n      Clones.append();\n    });\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n\n    Events.on('build.before', function () {\n      if (Glide.isType('carousel')) {\n        Clones.append();\n      }\n    });\n    /**\n     * Remove clones HTMLElements:\n     * - on destroying, to bring HTML to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Clones.remove();\n    });\n    return Clones;\n  }\n\n  var EventsBinder = function () {\n    /**\n     * Construct a EventsBinder instance.\n     */\n    function EventsBinder() {\n      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, EventsBinder);\n      this.listeners = listeners;\n    }\n    /**\n     * Adds events listeners to arrows HTML elements.\n     *\n     * @param  {String|Array} events\n     * @param  {Element|Window|Document} el\n     * @param  {Function} closure\n     * @param  {Boolean|Object} capture\n     * @return {Void}\n     */\n\n\n    createClass(EventsBinder, [{\n      key: 'on',\n      value: function on(events, el, closure) {\n        var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          this.listeners[events[i]] = closure;\n          el.addEventListener(events[i], this.listeners[events[i]], capture);\n        }\n      }\n      /**\n       * Removes event listeners from arrows HTML elements.\n       *\n       * @param  {String|Array} events\n       * @param  {Element|Window|Document} el\n       * @param  {Boolean|Object} capture\n       * @return {Void}\n       */\n\n    }, {\n      key: 'off',\n      value: function off(events, el) {\n        var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          el.removeEventListener(events[i], this.listeners[events[i]], capture);\n        }\n      }\n      /**\n       * Destroy collected listeners.\n       *\n       * @returns {Void}\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        delete this.listeners;\n      }\n    }]);\n    return EventsBinder;\n  }();\n\n  function Resize(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Resize = {\n      /**\n       * Initializes window bindings.\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n      /**\n       * Binds `rezsize` listener to the window.\n       * It's a costly event, so we are debouncing it.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('resize', window, throttle(function () {\n          Events.emit('resize');\n        }, Glide.settings.throttle));\n      },\n\n      /**\n       * Unbinds listeners from the window.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('resize', window);\n      }\n    };\n    /**\n     * Remove bindings from window:\n     * - on destroying, to remove added EventListener\n     */\n\n    Events.on('destroy', function () {\n      Resize.unbind();\n      Binder.destroy();\n    });\n    return Resize;\n  }\n\n  var VALID_DIRECTIONS = ['ltr', 'rtl'];\n  var FLIPED_MOVEMENTS = {\n    '>': '<',\n    '<': '>',\n    '=': '='\n  };\n\n  function Direction(Glide, Components, Events) {\n    var Direction = {\n      /**\n       * Setups gap value based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.direction;\n      },\n\n      /**\n       * Resolves pattern based on direction value\n       *\n       * @param {String} pattern\n       * @returns {String}\n       */\n      resolve: function resolve(pattern) {\n        var token = pattern.slice(0, 1);\n\n        if (this.is('rtl')) {\n          return pattern.split(token).join(FLIPED_MOVEMENTS[token]);\n        }\n\n        return pattern;\n      },\n\n      /**\n       * Checks value of direction mode.\n       *\n       * @param {String} direction\n       * @returns {Boolean}\n       */\n      is: function is(direction) {\n        return this.value === direction;\n      },\n\n      /**\n       * Applies direction class to the root HTML element.\n       *\n       * @return {Void}\n       */\n      addClass: function addClass() {\n        Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);\n      },\n\n      /**\n       * Removes direction class from the root HTML element.\n       *\n       * @return {Void}\n       */\n      removeClass: function removeClass() {\n        Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);\n      }\n    };\n    define(Direction, 'value', {\n      /**\n       * Gets value of the direction.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Direction._v;\n      },\n\n      /**\n       * Sets value of the direction.\n       *\n       * @param {String} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (VALID_DIRECTIONS.indexOf(value) > -1) {\n          Direction._v = value;\n        } else {\n          warn('Direction value must be `ltr` or `rtl`');\n        }\n      }\n    });\n    /**\n     * Clear direction class:\n     * - on destroy to bring HTML to its initial state\n     * - on update to remove class before reappling bellow\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Direction.removeClass();\n    });\n    /**\n     * Remount component:\n     * - on update to reflect changes in direction value\n     */\n\n    Events.on('update', function () {\n      Direction.mount();\n    });\n    /**\n     * Apply direction class:\n     * - before building to apply class for the first time\n     * - on updating to reapply direction class that may changed\n     */\n\n    Events.on(['build.before', 'update'], function () {\n      Direction.addClass();\n    });\n    return Direction;\n  }\n  /**\n   * Reflects value of glide movement.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function Rtl(Glide, Components) {\n    return {\n      /**\n       * Negates the passed translate if glide is in RTL option.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Components.Direction.is('rtl')) {\n          return -translate;\n        }\n\n        return translate;\n      }\n    };\n  }\n  /**\n   * Updates glide movement with a `gap` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function Gap(Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with number in the `gap` settings.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        var multiplier = Math.floor(translate / Components.Sizes.slideWidth);\n        return translate + Components.Gaps.value * multiplier;\n      }\n    };\n  }\n  /**\n   * Updates glide movement with width of additional clones width.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function Grow(Glide, Components) {\n    return {\n      /**\n       * Adds to the passed translate width of the half of clones.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        return translate + Components.Clones.grow / 2;\n      }\n    };\n  }\n  /**\n   * Updates glide movement with a `peek` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function Peeking(Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with a `peek` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Glide.settings.focusAt >= 0) {\n          var peek = Components.Peek.value;\n\n          if (isObject(peek)) {\n            return translate - peek.before;\n          }\n\n          return translate - peek;\n        }\n\n        return translate;\n      }\n    };\n  }\n  /**\n   * Updates glide movement with a `focusAt` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function Focusing(Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with index in the `focusAt` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        var gap = Components.Gaps.value;\n        var width = Components.Sizes.width;\n        var focusAt = Glide.settings.focusAt;\n        var slideWidth = Components.Sizes.slideWidth;\n\n        if (focusAt === 'center') {\n          return translate - (width / 2 - slideWidth / 2);\n        }\n\n        return translate - slideWidth * focusAt - gap * focusAt;\n      }\n    };\n  }\n  /**\n   * Applies diffrent transformers on translate value.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n\n\n  function mutator(Glide, Components, Events) {\n    /**\n     * Merge instance transformers with collection of default transformers.\n     * It's important that the Rtl component be last on the list,\n     * so it reflects all previous transformations.\n     *\n     * @type {Array}\n     */\n    var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);\n    return {\n      /**\n       * Piplines translate value with registered transformers.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      mutate: function mutate(translate) {\n        for (var i = 0; i < TRANSFORMERS.length; i++) {\n          var transformer = TRANSFORMERS[i];\n\n          if (isFunction(transformer) && isFunction(transformer().modify)) {\n            translate = transformer(Glide, Components, Events).modify(translate);\n          } else {\n            warn('Transformer should be a function that returns an object with `modify()` method');\n          }\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  function Translate(Glide, Components, Events) {\n    var Translate = {\n      /**\n       * Sets value of translate on HTML element.\n       *\n       * @param {Number} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        var transform = mutator(Glide, Components).mutate(value);\n        Components.Html.wrapper.style.transform = 'translate3d(' + -1 * transform + 'px, 0px, 0px)';\n      },\n\n      /**\n       * Removes value of translate from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transform = '';\n      },\n\n      /**\n       * @return {number}\n       */\n      getStartIndex: function getStartIndex() {\n        var length = Components.Sizes.length;\n        var index = Glide.index;\n        var perView = Glide.settings.perView;\n\n        if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {\n          return length + (index - perView);\n        } // \"modulo length\" converts an index that equals length to zero\n\n\n        return (index + perView) % length;\n      },\n\n      /**\n       * @return {number}\n       */\n      getTravelDistance: function getTravelDistance() {\n        var travelDistance = Components.Sizes.slideWidth * Glide.settings.perView;\n\n        if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {\n          // reverse travel distance so that we don't have to change subtract operations\n          return travelDistance * -1;\n        }\n\n        return travelDistance;\n      }\n    };\n    /**\n     * Set new translate value:\n     * - on move to reflect index change\n     * - on updating via API to reflect possible changes in options\n     */\n\n    Events.on('move', function (context) {\n      if (!Glide.isType('carousel') || !Components.Run.isOffset()) {\n        return Translate.set(context.movement);\n      }\n\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n        Translate.set(Components.Sizes.slideWidth * Glide.index);\n      });\n      var startWidth = Components.Sizes.slideWidth * Components.Translate.getStartIndex();\n      return Translate.set(startWidth - Components.Translate.getTravelDistance());\n    });\n    /**\n     * Remove translate:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Translate.remove();\n    });\n    return Translate;\n  }\n\n  function Transition(Glide, Components, Events) {\n    /**\n     * Holds inactivity status of transition.\n     * When true transition is not applied.\n     *\n     * @type {Boolean}\n     */\n    var disabled = false;\n    var Transition = {\n      /**\n       * Composes string of the CSS transition.\n       *\n       * @param {String} property\n       * @return {String}\n       */\n      compose: function compose(property) {\n        var settings = Glide.settings;\n\n        if (!disabled) {\n          return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;\n        }\n\n        return property + ' 0ms ' + settings.animationTimingFunc;\n      },\n\n      /**\n       * Sets value of transition on HTML element.\n       *\n       * @param {String=} property\n       * @return {Void}\n       */\n      set: function set() {\n        var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n        Components.Html.wrapper.style.transition = this.compose(property);\n      },\n\n      /**\n       * Removes value of transition from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transition = '';\n      },\n\n      /**\n       * Runs callback after animation.\n       *\n       * @param  {Function} callback\n       * @return {Void}\n       */\n      after: function after(callback) {\n        setTimeout(function () {\n          callback();\n        }, this.duration);\n      },\n\n      /**\n       * Enable transition.\n       *\n       * @return {Void}\n       */\n      enable: function enable() {\n        disabled = false;\n        this.set();\n      },\n\n      /**\n       * Disable transition.\n       *\n       * @return {Void}\n       */\n      disable: function disable() {\n        disabled = true;\n        this.set();\n      }\n    };\n    define(Transition, 'duration', {\n      /**\n       * Gets duration of the transition based\n       * on currently running animation type.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n\n        if (Glide.isType('slider') && Components.Run.offset) {\n          return settings.rewindDuration;\n        }\n\n        return settings.animationDuration;\n      }\n    });\n    /**\n     * Set transition `style` value:\n     * - on each moving, because it may be cleared by offset move\n     */\n\n    Events.on('move', function () {\n      Transition.set();\n    });\n    /**\n     * Disable transition:\n     * - before initial build to avoid transitioning from `0` to `startAt` index\n     * - while resizing window and recalculating dimentions\n     * - on jumping from offset transition at start and end edges in `carousel` type\n     */\n\n    Events.on(['build.before', 'resize', 'translate.jump'], function () {\n      Transition.disable();\n    });\n    /**\n     * Enable transition:\n     * - on each running, because it may be disabled by offset move\n     */\n\n    Events.on('run', function () {\n      Transition.enable();\n    });\n    /**\n     * Remove transition:\n     * - on destroying to bring markup to its inital state\n     */\n\n    Events.on('destroy', function () {\n      Transition.remove();\n    });\n    return Transition;\n  }\n  /**\n   * Test via a getter in the options object to see\n   * if the passive property is accessed.\n   *\n   * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n   */\n\n\n  var supportsPassive = false;\n\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsPassive = true;\n      }\n    });\n    window.addEventListener('testPassive', null, opts);\n    window.removeEventListener('testPassive', null, opts);\n  } catch (e) {}\n\n  var supportsPassive$1 = supportsPassive;\n  var START_EVENTS = ['touchstart', 'mousedown'];\n  var MOVE_EVENTS = ['touchmove', 'mousemove'];\n  var END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];\n  var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];\n\n  function Swipe(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var swipeSin = 0;\n    var swipeStartX = 0;\n    var swipeStartY = 0;\n    var disabled = false;\n    var capture = supportsPassive$1 ? {\n      passive: true\n    } : false;\n    var Swipe = {\n      /**\n       * Initializes swipe bindings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bindSwipeStart();\n      },\n\n      /**\n       * Handler for `swipestart` event. Calculates entry points of the user's tap.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      start: function start(event) {\n        if (!disabled && !Glide.disabled) {\n          this.disable();\n          var swipe = this.touches(event);\n          swipeSin = null;\n          swipeStartX = toInt(swipe.pageX);\n          swipeStartY = toInt(swipe.pageY);\n          this.bindSwipeMove();\n          this.bindSwipeEnd();\n          Events.emit('swipe.start');\n        }\n      },\n\n      /**\n       * Handler for `swipemove` event. Calculates user's tap angle and distance.\n       *\n       * @param {Object} event\n       */\n      move: function move(event) {\n        if (!Glide.disabled) {\n          var _Glide$settings = Glide.settings,\n              touchAngle = _Glide$settings.touchAngle,\n              touchRatio = _Glide$settings.touchRatio,\n              classes = _Glide$settings.classes;\n          var swipe = this.touches(event);\n          var subExSx = toInt(swipe.pageX) - swipeStartX;\n          var subEySy = toInt(swipe.pageY) - swipeStartY;\n          var powEX = Math.abs(subExSx << 2);\n          var powEY = Math.abs(subEySy << 2);\n          var swipeHypotenuse = Math.sqrt(powEX + powEY);\n          var swipeCathetus = Math.sqrt(powEY);\n          swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);\n\n          if (swipeSin * 180 / Math.PI < touchAngle) {\n            event.stopPropagation();\n            Components.Move.make(subExSx * toFloat(touchRatio));\n            Components.Html.root.classList.add(classes.dragging);\n            Events.emit('swipe.move');\n          } else {\n            return false;\n          }\n        }\n      },\n\n      /**\n       * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      end: function end(event) {\n        if (!Glide.disabled) {\n          var _Glide$settings2 = Glide.settings,\n              perSwipe = _Glide$settings2.perSwipe,\n              touchAngle = _Glide$settings2.touchAngle,\n              classes = _Glide$settings2.classes;\n          var swipe = this.touches(event);\n          var threshold = this.threshold(event);\n          var swipeDistance = swipe.pageX - swipeStartX;\n          var swipeDeg = swipeSin * 180 / Math.PI;\n          this.enable();\n\n          if (swipeDistance > threshold && swipeDeg < touchAngle) {\n            Components.Run.make(Components.Direction.resolve(perSwipe + '<'));\n          } else if (swipeDistance < -threshold && swipeDeg < touchAngle) {\n            Components.Run.make(Components.Direction.resolve(perSwipe + '>'));\n          } else {\n            // While swipe don't reach distance apply previous transform.\n            Components.Move.make();\n          }\n\n          Components.Html.root.classList.remove(classes.dragging);\n          this.unbindSwipeMove();\n          this.unbindSwipeEnd();\n          Events.emit('swipe.end');\n        }\n      },\n\n      /**\n       * Binds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      bindSwipeStart: function bindSwipeStart() {\n        var _this = this;\n\n        var _Glide$settings3 = Glide.settings,\n            swipeThreshold = _Glide$settings3.swipeThreshold,\n            dragThreshold = _Glide$settings3.dragThreshold;\n\n        if (swipeThreshold) {\n          Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n\n        if (dragThreshold) {\n          Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n      },\n\n      /**\n       * Unbinds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeStart: function unbindSwipeStart() {\n        Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);\n        Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);\n      },\n\n      /**\n       * Binds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      bindSwipeMove: function bindSwipeMove() {\n        var _this2 = this;\n\n        Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n          _this2.move(event);\n        }, Glide.settings.throttle), capture);\n      },\n\n      /**\n       * Unbinds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeMove: function unbindSwipeMove() {\n        Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);\n      },\n\n      /**\n       * Binds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      bindSwipeEnd: function bindSwipeEnd() {\n        var _this3 = this;\n\n        Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {\n          _this3.end(event);\n        });\n      },\n\n      /**\n       * Unbinds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeEnd: function unbindSwipeEnd() {\n        Binder.off(END_EVENTS, Components.Html.wrapper);\n      },\n\n      /**\n       * Normalizes event touches points accorting to different types.\n       *\n       * @param {Object} event\n       */\n      touches: function touches(event) {\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return event;\n        }\n\n        return event.touches[0] || event.changedTouches[0];\n      },\n\n      /**\n       * Gets value of minimum swipe distance settings based on event type.\n       *\n       * @return {Number}\n       */\n      threshold: function threshold(event) {\n        var settings = Glide.settings;\n\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return settings.dragThreshold;\n        }\n\n        return settings.swipeThreshold;\n      },\n\n      /**\n       * Enables swipe event.\n       *\n       * @return {self}\n       */\n      enable: function enable() {\n        disabled = false;\n        Components.Transition.enable();\n        return this;\n      },\n\n      /**\n       * Disables swipe event.\n       *\n       * @return {self}\n       */\n      disable: function disable() {\n        disabled = true;\n        Components.Transition.disable();\n        return this;\n      }\n    };\n    /**\n     * Add component class:\n     * - after initial building\n     */\n\n    Events.on('build.after', function () {\n      Components.Html.root.classList.add(Glide.settings.classes.swipeable);\n    });\n    /**\n     * Remove swiping bindings:\n     * - on destroying, to remove added EventListeners\n     */\n\n    Events.on('destroy', function () {\n      Swipe.unbindSwipeStart();\n      Swipe.unbindSwipeMove();\n      Swipe.unbindSwipeEnd();\n      Binder.destroy();\n    });\n    return Swipe;\n  }\n\n  function Images(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Images = {\n      /**\n       * Binds listener to glide wrapper.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n      /**\n       * Binds `dragstart` event on wrapper to prevent dragging images.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('dragstart', Components.Html.wrapper, this.dragstart);\n      },\n\n      /**\n       * Unbinds `dragstart` event on wrapper.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('dragstart', Components.Html.wrapper);\n      },\n\n      /**\n       * Event handler. Prevents dragging.\n       *\n       * @return {Void}\n       */\n      dragstart: function dragstart(event) {\n        event.preventDefault();\n      }\n    };\n    /**\n     * Remove bindings from images:\n     * - on destroying, to remove added EventListeners\n     */\n\n    Events.on('destroy', function () {\n      Images.unbind();\n      Binder.destroy();\n    });\n    return Images;\n  }\n\n  function Anchors(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    /**\n     * Holds detaching status of anchors.\n     * Prevents detaching of already detached anchors.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    var detached = false;\n    /**\n     * Holds preventing status of anchors.\n     * If `true` redirection after click will be disabled.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    var prevented = false;\n    var Anchors = {\n      /**\n       * Setups a initial state of anchors component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        /**\n         * Holds collection of anchors elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._a = Components.Html.wrapper.querySelectorAll('a');\n        this.bind();\n      },\n\n      /**\n       * Binds events to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('click', Components.Html.wrapper, this.click);\n      },\n\n      /**\n       * Unbinds events attached to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('click', Components.Html.wrapper);\n      },\n\n      /**\n       * Handler for click event. Prevents clicks when glide is in `prevent` status.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      click: function click(event) {\n        if (prevented) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      },\n\n      /**\n       * Detaches anchors click event inside glide.\n       *\n       * @return {self}\n       */\n      detach: function detach() {\n        prevented = true;\n\n        if (!detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = false;\n            this.items[i].setAttribute('data-href', this.items[i].getAttribute('href'));\n            this.items[i].removeAttribute('href');\n          }\n\n          detached = true;\n        }\n\n        return this;\n      },\n\n      /**\n       * Attaches anchors click events inside glide.\n       *\n       * @return {self}\n       */\n      attach: function attach() {\n        prevented = false;\n\n        if (detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = true;\n            this.items[i].setAttribute('href', this.items[i].getAttribute('data-href'));\n          }\n\n          detached = false;\n        }\n\n        return this;\n      }\n    };\n    define(Anchors, 'items', {\n      /**\n       * Gets collection of the arrows HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Anchors._a;\n      }\n    });\n    /**\n     * Detach anchors inside slides:\n     * - on swiping, so they won't redirect to its `href` attributes\n     */\n\n    Events.on('swipe.move', function () {\n      Anchors.detach();\n    });\n    /**\n     * Attach anchors inside slides:\n     * - after swiping and transitions ends, so they can redirect after click again\n     */\n\n    Events.on('swipe.end', function () {\n      Components.Transition.after(function () {\n        Anchors.attach();\n      });\n    });\n    /**\n     * Unbind anchors inside slides:\n     * - on destroying, to bring anchors to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Anchors.attach();\n      Anchors.unbind();\n      Binder.destroy();\n    });\n    return Anchors;\n  }\n\n  var NAV_SELECTOR = '[data-glide-el=\"controls[nav]\"]';\n  var CONTROLS_SELECTOR = '[data-glide-el^=\"controls\"]';\n\n  function Controls(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var capture = supportsPassive$1 ? {\n      passive: true\n    } : false;\n    var Controls = {\n      /**\n       * Inits arrows. Binds events listeners\n       * to the arrows HTML elements.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        /**\n         * Collection of navigation HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);\n        /**\n         * Collection of controls HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n\n        this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);\n        this.addBindings();\n      },\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      setActive: function setActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.addClass(this._n[i].children);\n        }\n      },\n\n      /**\n       * Removes active class to current slide.\n       *\n       * @return {Void}\n       */\n      removeActive: function removeActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.removeClass(this._n[i].children);\n        }\n      },\n\n      /**\n       * Toggles active class on items inside navigation.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      addClass: function addClass(controls) {\n        var settings = Glide.settings;\n        var item = controls[Glide.index];\n\n        if (item) {\n          item.classList.add(settings.classes.nav.active);\n          siblings(item).forEach(function (sibling) {\n            sibling.classList.remove(settings.classes.nav.active);\n          });\n        }\n      },\n\n      /**\n       * Removes active class from active control.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      removeClass: function removeClass(controls) {\n        var item = controls[Glide.index];\n\n        if (item) {\n          item.classList.remove(Glide.settings.classes.nav.active);\n        }\n      },\n\n      /**\n       * Adds handles to the each group of controls.\n       *\n       * @return {Void}\n       */\n      addBindings: function addBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.bind(this._c[i].children);\n        }\n      },\n\n      /**\n       * Removes handles from the each group of controls.\n       *\n       * @return {Void}\n       */\n      removeBindings: function removeBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.unbind(this._c[i].children);\n        }\n      },\n\n      /**\n       * Binds events to arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      bind: function bind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.on('click', elements[i], this.click);\n          Binder.on('touchstart', elements[i], this.click, capture);\n        }\n      },\n\n      /**\n       * Unbinds events binded to the arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      unbind: function unbind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.off(['click', 'touchstart'], elements[i]);\n        }\n      },\n\n      /**\n       * Handles `click` event on the arrows HTML elements.\n       * Moves slider in driection precised in\n       * `data-glide-dir` attribute.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      click: function click(event) {\n        event.preventDefault();\n        Components.Run.make(Components.Direction.resolve(event.currentTarget.getAttribute('data-glide-dir')));\n      }\n    };\n    define(Controls, 'items', {\n      /**\n       * Gets collection of the controls HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Controls._c;\n      }\n    });\n    /**\n     * Swap active class of current navigation item:\n     * - after mounting to set it to initial index\n     * - after each move to the new index\n     */\n\n    Events.on(['mount.after', 'move.after'], function () {\n      Controls.setActive();\n    });\n    /**\n     * Remove bindings and HTML Classes:\n     * - on destroying, to bring markup to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Controls.removeBindings();\n      Controls.removeActive();\n      Binder.destroy();\n    });\n    return Controls;\n  }\n\n  function Keyboard(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Keyboard = {\n      /**\n       * Binds keyboard events on component mount.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        if (Glide.settings.keyboard) {\n          this.bind();\n        }\n      },\n\n      /**\n       * Adds keyboard press events.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('keyup', document, this.press);\n      },\n\n      /**\n       * Removes keyboard press events.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('keyup', document);\n      },\n\n      /**\n       * Handles keyboard's arrows press and moving glide foward and backward.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      press: function press(event) {\n        if (event.keyCode === 39) {\n          Components.Run.make(Components.Direction.resolve('>'));\n        }\n\n        if (event.keyCode === 37) {\n          Components.Run.make(Components.Direction.resolve('<'));\n        }\n      }\n    };\n    /**\n     * Remove bindings from keyboard:\n     * - on destroying to remove added events\n     * - on updating to remove events before remounting\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Keyboard.unbind();\n    });\n    /**\n     * Remount component\n     * - on updating to reflect potential changes in settings\n     */\n\n    Events.on('update', function () {\n      Keyboard.mount();\n    });\n    /**\n     * Destroy binder:\n     * - on destroying to remove listeners\n     */\n\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n    return Keyboard;\n  }\n\n  function Autoplay(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    var Autoplay = {\n      /**\n       * Initializes autoplaying and events.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.start();\n\n        if (Glide.settings.hoverpause) {\n          this.bind();\n        }\n      },\n\n      /**\n       * Starts autoplaying in configured interval.\n       *\n       * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings\n       * @return {Void}\n       */\n      start: function start() {\n        var _this = this;\n\n        if (Glide.settings.autoplay) {\n          if (isUndefined(this._i)) {\n            this._i = setInterval(function () {\n              _this.stop();\n\n              Components.Run.make('>');\n\n              _this.start();\n            }, this.time);\n          }\n        }\n      },\n\n      /**\n       * Stops autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      stop: function stop() {\n        this._i = clearInterval(this._i);\n      },\n\n      /**\n       * Stops autoplaying while mouse is over glide's area.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        var _this2 = this;\n\n        Binder.on('mouseover', Components.Html.root, function () {\n          _this2.stop();\n        });\n        Binder.on('mouseout', Components.Html.root, function () {\n          _this2.start();\n        });\n      },\n\n      /**\n       * Unbind mouseover events.\n       *\n       * @returns {Void}\n       */\n      unbind: function unbind() {\n        Binder.off(['mouseover', 'mouseout'], Components.Html.root);\n      }\n    };\n    define(Autoplay, 'time', {\n      /**\n       * Gets time period value for the autoplay interval. Prioritizes\n       * times in `data-glide-autoplay` attrubutes over options.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');\n\n        if (autoplay) {\n          return toInt(autoplay);\n        }\n\n        return toInt(Glide.settings.autoplay);\n      }\n    });\n    /**\n     * Stop autoplaying and unbind events:\n     * - on destroying, to clear defined interval\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on(['destroy', 'update'], function () {\n      Autoplay.unbind();\n    });\n    /**\n     * Stop autoplaying:\n     * - before each run, to restart autoplaying\n     * - on pausing via API\n     * - on destroying, to clear defined interval\n     * - while starting a swipe\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on(['run.before', 'pause', 'destroy', 'swipe.start', 'update'], function () {\n      Autoplay.stop();\n    });\n    /**\n     * Start autoplaying:\n     * - after each run, to restart autoplaying\n     * - on playing via API\n     * - while ending a swipe\n     */\n\n    Events.on(['run.after', 'play', 'swipe.end'], function () {\n      Autoplay.start();\n    });\n    /**\n     * Remount autoplaying:\n     * - on updating via API to reset interval that may changed\n     */\n\n    Events.on('update', function () {\n      Autoplay.mount();\n    });\n    /**\n     * Destroy a binder:\n     * - on destroying glide instance to clearup listeners\n     */\n\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n    return Autoplay;\n  }\n  /**\n   * Sorts keys of breakpoint object so they will be ordered from lower to bigger.\n   *\n   * @param {Object} points\n   * @returns {Object}\n   */\n\n\n  function sortBreakpoints(points) {\n    if (isObject(points)) {\n      return sortKeys(points);\n    } else {\n      warn('Breakpoints option must be an object');\n    }\n\n    return {};\n  }\n\n  function Breakpoints(Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n    /**\n     * Holds reference to settings.\n     *\n     * @type {Object}\n     */\n\n    var settings = Glide.settings;\n    /**\n     * Holds reference to breakpoints object in settings. Sorts breakpoints\n     * from smaller to larger. It is required in order to proper\n     * matching currently active breakpoint settings.\n     *\n     * @type {Object}\n     */\n\n    var points = sortBreakpoints(settings.breakpoints);\n    /**\n     * Cache initial settings before overwritting.\n     *\n     * @type {Object}\n     */\n\n    var defaults = _extends({}, settings);\n\n    var Breakpoints = {\n      /**\n       * Matches settings for currectly matching media breakpoint.\n       *\n       * @param {Object} points\n       * @returns {Object}\n       */\n      match: function match(points) {\n        if (typeof window.matchMedia !== 'undefined') {\n          for (var point in points) {\n            if (points.hasOwnProperty(point)) {\n              if (window.matchMedia('(max-width: ' + point + 'px)').matches) {\n                return points[point];\n              }\n            }\n          }\n        }\n\n        return defaults;\n      }\n    };\n    /**\n     * Overwrite instance settings with currently matching breakpoint settings.\n     * This happens right after component initialization.\n     */\n\n    _extends(settings, Breakpoints.match(points));\n    /**\n     * Update glide with settings of matched brekpoint:\n     * - window resize to update slider\n     */\n\n\n    Binder.on('resize', window, throttle(function () {\n      Glide.settings = mergeOptions(settings, Breakpoints.match(points));\n    }, Glide.settings.throttle));\n    /**\n     * Resort and update default settings:\n     * - on reinit via API, so breakpoint matching will be performed with options\n     */\n\n    Events.on('update', function () {\n      points = sortBreakpoints(points);\n      defaults = _extends({}, settings);\n    });\n    /**\n     * Unbind resize listener:\n     * - on destroying, to bring markup to its initial state\n     */\n\n    Events.on('destroy', function () {\n      Binder.off('resize', window);\n    });\n    return Breakpoints;\n  }\n\n  var COMPONENTS = {\n    // Required\n    Html: Html,\n    Translate: Translate,\n    Transition: Transition,\n    Direction: Direction,\n    Peek: Peek,\n    Sizes: Sizes,\n    Gaps: Gaps,\n    Move: Move,\n    Clones: Clones,\n    Resize: Resize,\n    Build: Build,\n    Run: Run,\n    // Optional\n    Swipe: Swipe,\n    Images: Images,\n    Anchors: Anchors,\n    Controls: Controls,\n    Keyboard: Keyboard,\n    Autoplay: Autoplay,\n    Breakpoints: Breakpoints\n  };\n\n  var Glide$1 = function (_Core) {\n    inherits(Glide$$1, _Core);\n\n    function Glide$$1() {\n      classCallCheck(this, Glide$$1);\n      return possibleConstructorReturn(this, (Glide$$1.__proto__ || Object.getPrototypeOf(Glide$$1)).apply(this, arguments));\n    }\n\n    createClass(Glide$$1, [{\n      key: 'mount',\n      value: function mount() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return get(Glide$$1.prototype.__proto__ || Object.getPrototypeOf(Glide$$1.prototype), 'mount', this).call(this, _extends({}, COMPONENTS, extensions));\n      }\n    }]);\n    return Glide$$1;\n  }(Glide);\n\n  return Glide$1;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/glide.js\n");

/***/ }),

/***/ "./resources/js/plugins/headroom.min.js":
/*!**********************************************!*\
  !*** ./resources/js/plugins/headroom.min.js ***!
  \**********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * headroom.js v0.9.4 - Give your page some headroom. Hide your header until you need it\n * Copyright (c) 2017 Nick Williams - http://wicky.nillia.ms/headroom.js\n * License: MIT\n */\n!function (a, b) {\n  \"use strict\";\n\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function a(a) {\n    this.callback = a, this.ticking = !1;\n  }\n\n  function b(a) {\n    return a && \"undefined\" != typeof window && (a === window || a.nodeType);\n  }\n\n  function c(a) {\n    if (arguments.length <= 0) throw new Error(\"Missing arguments in extend function\");\n    var d,\n        e,\n        f = a || {};\n\n    for (e = 1; e < arguments.length; e++) {\n      var g = arguments[e] || {};\n\n      for (d in g) {\n        \"object\" != _typeof(f[d]) || b(f[d]) ? f[d] = f[d] || g[d] : f[d] = c(f[d], g[d]);\n      }\n    }\n\n    return f;\n  }\n\n  function d(a) {\n    return a === Object(a) ? a : {\n      down: a,\n      up: a\n    };\n  }\n\n  function e(a, b) {\n    b = c(b, e.options), this.lastKnownScrollY = 0, this.elem = a, this.tolerance = d(b.tolerance), this.classes = b.classes, this.offset = b.offset, this.scroller = b.scroller, this.initialised = !1, this.onPin = b.onPin, this.onUnpin = b.onUnpin, this.onTop = b.onTop, this.onNotTop = b.onNotTop, this.onBottom = b.onBottom, this.onNotBottom = b.onNotBottom;\n  }\n\n  var f = {\n    bind: !!function () {}.bind,\n    classList: \"classList\" in document.documentElement,\n    rAF: !!(window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame)\n  };\n  return window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame, a.prototype = {\n    constructor: a,\n    update: function update() {\n      this.callback && this.callback(), this.ticking = !1;\n    },\n    requestTick: function requestTick() {\n      this.ticking || (requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this))), this.ticking = !0);\n    },\n    handleEvent: function handleEvent() {\n      this.requestTick();\n    }\n  }, e.prototype = {\n    constructor: e,\n    init: function init() {\n      if (e.cutsTheMustard) return this.debouncer = new a(this.update.bind(this)), this.elem.classList.add(this.classes.initial), setTimeout(this.attachEvent.bind(this), 100), this;\n    },\n    destroy: function destroy() {\n      var a = this.classes;\n      this.initialised = !1;\n\n      for (var b in a) {\n        a.hasOwnProperty(b) && this.elem.classList.remove(a[b]);\n      }\n\n      this.scroller.removeEventListener(\"scroll\", this.debouncer, !1);\n    },\n    attachEvent: function attachEvent() {\n      this.initialised || (this.lastKnownScrollY = this.getScrollY(), this.initialised = !0, this.scroller.addEventListener(\"scroll\", this.debouncer, !1), this.debouncer.handleEvent());\n    },\n    unpin: function unpin() {\n      var a = this.elem.classList,\n          b = this.classes;\n      !a.contains(b.pinned) && a.contains(b.unpinned) || (a.add(b.unpinned), a.remove(b.pinned), this.onUnpin && this.onUnpin.call(this));\n    },\n    pin: function pin() {\n      var a = this.elem.classList,\n          b = this.classes;\n      a.contains(b.unpinned) && (a.remove(b.unpinned), a.add(b.pinned), this.onPin && this.onPin.call(this));\n    },\n    top: function top() {\n      var a = this.elem.classList,\n          b = this.classes;\n      a.contains(b.top) || (a.add(b.top), a.remove(b.notTop), this.onTop && this.onTop.call(this));\n    },\n    notTop: function notTop() {\n      var a = this.elem.classList,\n          b = this.classes;\n      a.contains(b.notTop) || (a.add(b.notTop), a.remove(b.top), this.onNotTop && this.onNotTop.call(this));\n    },\n    bottom: function bottom() {\n      var a = this.elem.classList,\n          b = this.classes;\n      a.contains(b.bottom) || (a.add(b.bottom), a.remove(b.notBottom), this.onBottom && this.onBottom.call(this));\n    },\n    notBottom: function notBottom() {\n      var a = this.elem.classList,\n          b = this.classes;\n      a.contains(b.notBottom) || (a.add(b.notBottom), a.remove(b.bottom), this.onNotBottom && this.onNotBottom.call(this));\n    },\n    getScrollY: function getScrollY() {\n      return void 0 !== this.scroller.pageYOffset ? this.scroller.pageYOffset : void 0 !== this.scroller.scrollTop ? this.scroller.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    },\n    getViewportHeight: function getViewportHeight() {\n      return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    },\n    getElementPhysicalHeight: function getElementPhysicalHeight(a) {\n      return Math.max(a.offsetHeight, a.clientHeight);\n    },\n    getScrollerPhysicalHeight: function getScrollerPhysicalHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getViewportHeight() : this.getElementPhysicalHeight(this.scroller);\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var a = document.body,\n          b = document.documentElement;\n      return Math.max(a.scrollHeight, b.scrollHeight, a.offsetHeight, b.offsetHeight, a.clientHeight, b.clientHeight);\n    },\n    getElementHeight: function getElementHeight(a) {\n      return Math.max(a.scrollHeight, a.offsetHeight, a.clientHeight);\n    },\n    getScrollerHeight: function getScrollerHeight() {\n      return this.scroller === window || this.scroller === document.body ? this.getDocumentHeight() : this.getElementHeight(this.scroller);\n    },\n    isOutOfBounds: function isOutOfBounds(a) {\n      var b = a < 0,\n          c = a + this.getScrollerPhysicalHeight() > this.getScrollerHeight();\n      return b || c;\n    },\n    toleranceExceeded: function toleranceExceeded(a, b) {\n      return Math.abs(a - this.lastKnownScrollY) >= this.tolerance[b];\n    },\n    shouldUnpin: function shouldUnpin(a, b) {\n      var c = a > this.lastKnownScrollY,\n          d = a >= this.offset;\n      return c && d && b;\n    },\n    shouldPin: function shouldPin(a, b) {\n      var c = a < this.lastKnownScrollY,\n          d = a <= this.offset;\n      return c && b || d;\n    },\n    update: function update() {\n      var a = this.getScrollY(),\n          b = a > this.lastKnownScrollY ? \"down\" : \"up\",\n          c = this.toleranceExceeded(a, b);\n      this.isOutOfBounds(a) || (a <= this.offset ? this.top() : this.notTop(), a + this.getViewportHeight() >= this.getScrollerHeight() ? this.bottom() : this.notBottom(), this.shouldUnpin(a, c) ? this.unpin() : this.shouldPin(a, c) && this.pin(), this.lastKnownScrollY = a);\n    }\n  }, e.options = {\n    tolerance: {\n      up: 0,\n      down: 0\n    },\n    offset: 0,\n    scroller: window,\n    classes: {\n      pinned: \"headroom--pinned\",\n      unpinned: \"headroom--unpinned\",\n      top: \"headroom--top\",\n      notTop: \"headroom--not-top\",\n      bottom: \"headroom--bottom\",\n      notBottom: \"headroom--not-bottom\",\n      initial: \"headroom\"\n    }\n  }, e.cutsTheMustard = \"undefined\" != typeof f && f.rAF && f.bind && f.classList, e;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/headroom.min.js\n");

/***/ }),

/***/ "./resources/js/plugins/jasny-bootstrap.min.js":
/*!*****************************************************!*\
  !*** ./resources/js/plugins/jasny-bootstrap.min.js ***!
  \*****************************************************/
/***/ (() => {

eval("/* ===========================================================\n * Bootstrap: fileinput.js v4.0.0\n * http://jasny.github.com/bootstrap/javascript/#fileinput\n * ===========================================================\n * Copyright 2012-2014 Arnold Daniels\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n!function (u) {\n  \"use strict\";\n\n  var i = \"Microsoft Internet Explorer\" == window.navigator.appName,\n      n = function n(e, t) {\n    if (this.$element = u(e), this.options = u.extend({}, n.DEFAULTS, t), this.$input = this.$element.find(\":file\"), 0 !== this.$input.length) {\n      this.name = this.$input.attr(\"name\") || t.name, this.$hidden = this.$element.find('input[type=hidden][name=\"' + this.name + '\"]'), 0 === this.$hidden.length && (this.$hidden = u('<input type=\"hidden\">').insertBefore(this.$input)), this.$preview = this.$element.find(\".fileinput-preview\");\n      var i = this.$preview.css(\"height\");\n      \"inline\" !== this.$preview.css(\"display\") && \"0px\" !== i && \"none\" !== i && this.$preview.css(\"line-height\", i), this.original = {\n        exists: this.$element.hasClass(\"fileinput-exists\"),\n        preview: this.$preview.html(),\n        hiddenVal: this.$hidden.val()\n      }, this.listen(), this.reset();\n    }\n  };\n\n  n.DEFAULTS = {\n    clearName: !0\n  }, n.prototype.listen = function () {\n    this.$input.on(\"change.bs.fileinput\", u.proxy(this.change, this)), u(this.$input[0].form).on(\"reset.bs.fileinput\", u.proxy(this.reset, this)), this.$element.find('[data-trigger=\"fileinput\"]').on(\"click.bs.fileinput\", u.proxy(this.trigger, this)), this.$element.find('[data-dismiss=\"fileinput\"]').on(\"click.bs.fileinput\", u.proxy(this.clear, this));\n  }, n.prototype.verifySizes = function (e) {\n    if (void 0 === this.options.maxSize) return !0;\n    var t = parseFloat(this.options.maxSize);\n    if (t !== this.options.maxSize) return !0;\n\n    for (var i = 0; i < e.length; i++) {\n      var n = void 0 !== e[i].size ? e[i].size : null;\n      if (null !== n && t < (n = n / 1e3 / 1e3)) return !1;\n    }\n\n    return !0;\n  }, n.prototype.change = function (e) {\n    var l = void 0 === e.target.files ? e.target && e.target.value ? [{\n      name: e.target.value.replace(/^.+\\\\/, \"\")\n    }] : [] : e.target.files;\n    if (e.stopPropagation(), 0 === l.length) return this.clear(), void this.$element.trigger(\"clear.bs.fileinput\");\n    if (!this.verifySizes(l)) return this.$element.trigger(\"max_size.bs.fileinput\"), this.clear(), void this.$element.trigger(\"clear.bs.fileinput\");\n    this.$hidden.val(\"\"), this.$hidden.attr(\"name\", \"\"), this.$input.attr(\"name\", this.name);\n    var h = l[0];\n\n    if (0 < this.$preview.length && (void 0 !== h.type ? h.type.match(/^image\\/(gif|png|jpeg|svg\\+xml)$/) : h.name.match(/\\.(gif|png|jpe?g|svg)$/i)) && \"undefined\" != typeof FileReader) {\n      var p = this,\n          t = new FileReader(),\n          f = this.$preview,\n          o = this.$element;\n      t.onload = function (e) {\n        var t = u(\"<img>\");\n\n        if (t[0].src = e.target.result, l[0].result = e.target.result, o.find(\".fileinput-filename\").text(h.name), \"none\" != f.css(\"max-height\")) {\n          var i = parseInt(f.css(\"max-height\"), 10) || 0,\n              n = parseInt(f.css(\"padding-top\"), 10) || 0,\n              s = parseInt(f.css(\"padding-bottom\"), 10) || 0,\n              r = parseInt(f.css(\"border-top\"), 10) || 0,\n              a = parseInt(f.css(\"border-bottom\"), 10) || 0;\n          t.css(\"max-height\", i - n - s - r - a);\n        }\n\n        f.html(t), p.options.exif && p.setImageTransform(t, h), o.addClass(\"fileinput-exists\").removeClass(\"fileinput-new\"), o.trigger(\"change.bs.fileinput\", l);\n      }, t.readAsDataURL(h);\n    } else {\n      var i = h.name,\n          n = this.$element.find(\".fileinput-filename\");\n      1 < l.length && (i = u.map(l, function (e) {\n        return e.name;\n      }).join(\", \")), n.text(i), this.$preview.text(h.name), this.$element.addClass(\"fileinput-exists\").removeClass(\"fileinput-new\"), this.$element.trigger(\"change.bs.fileinput\");\n    }\n  }, n.prototype.setImageTransform = function (n, e) {\n    var s = this,\n        r = new FileReader();\n    r.onload = function (e) {\n      var t = new DataView(r.result),\n          i = s.getImageExif(t);\n      i && s.resetOrientation(n, i);\n    }, r.readAsArrayBuffer(e);\n  }, n.prototype.getImageExif = function (e) {\n    if (65496 != e.getUint16(0, !1)) return -2;\n\n    for (var t = e.byteLength, i = 2; i < t;) {\n      var n = e.getUint16(i, !1);\n\n      if (i += 2, 65505 == n) {\n        if (1165519206 != e.getUint32(i += 2, !1)) return -1;\n        var s = 18761 == e.getUint16(i += 6, !1);\n        i += e.getUint32(i + 4, s);\n        var r = e.getUint16(i, s);\n        i += 2;\n\n        for (var a = 0; a < r; a++) {\n          if (274 == e.getUint16(i + 12 * a, s)) return e.getUint16(i + 12 * a + 8, s);\n        }\n      } else {\n        if (65280 != (65280 & n)) break;\n        i += e.getUint16(i, !1);\n      }\n    }\n\n    return -1;\n  }, n.prototype.resetOrientation = function (s, r) {\n    var a = new Image();\n    a.onload = function () {\n      var e = a.width,\n          t = a.height,\n          i = document.createElement(\"canvas\"),\n          n = i.getContext(\"2d\");\n\n      switch (-1 < [5, 6, 7, 8].indexOf(r) ? (i.width = t, i.height = e) : (i.width = e, i.height = t), r) {\n        case 2:\n          n.transform(-1, 0, 0, 1, e, 0);\n          break;\n\n        case 3:\n          n.transform(-1, 0, 0, -1, e, t);\n          break;\n\n        case 4:\n          n.transform(1, 0, 0, -1, 0, t);\n          break;\n\n        case 5:\n          n.transform(0, 1, 1, 0, 0, 0);\n          break;\n\n        case 6:\n          n.transform(0, 1, -1, 0, t, 0);\n          break;\n\n        case 7:\n          n.transform(0, -1, -1, 0, t, e);\n          break;\n\n        case 8:\n          n.transform(0, -1, 1, 0, 0, e);\n          break;\n\n        default:\n          n.transform(1, 0, 0, 1, 0, 0);\n      }\n\n      n.drawImage(a, 0, 0), s.attr(\"src\", i.toDataURL());\n    }, a.src = s.attr(\"src\");\n  }, n.prototype.clear = function (e) {\n    if (e && e.preventDefault(), this.$hidden.val(\"\"), this.$hidden.attr(\"name\", this.name), this.options.clearName && this.$input.attr(\"name\", \"\"), i) {\n      var t = this.$input.clone(!0);\n      this.$input.after(t), this.$input.remove(), this.$input = t;\n    } else this.$input.val(\"\");\n\n    this.$preview.html(\"\"), this.$element.find(\".fileinput-filename\").text(\"\"), this.$element.addClass(\"fileinput-new\").removeClass(\"fileinput-exists\"), void 0 !== e && (this.$input.trigger(\"change\"), this.$element.trigger(\"clear.bs.fileinput\"));\n  }, n.prototype.reset = function () {\n    this.clear(), this.$hidden.val(this.original.hiddenVal), this.$preview.html(this.original.preview), this.$element.find(\".fileinput-filename\").text(\"\"), this.original.exists ? this.$element.addClass(\"fileinput-exists\").removeClass(\"fileinput-new\") : this.$element.addClass(\"fileinput-new\").removeClass(\"fileinput-exists\"), this.$element.trigger(\"reseted.bs.fileinput\");\n  }, n.prototype.trigger = function (e) {\n    this.$input.trigger(\"click\"), e.preventDefault();\n  };\n  var e = u.fn.fileinput;\n  u.fn.fileinput = function (i) {\n    return this.each(function () {\n      var e = u(this),\n          t = e.data(\"bs.fileinput\");\n      t || e.data(\"bs.fileinput\", t = new n(this, i)), \"string\" == typeof i && t[i]();\n    });\n  }, u.fn.fileinput.Constructor = n, u.fn.fileinput.noConflict = function () {\n    return u.fn.fileinput = e, this;\n  }, u(document).on(\"click.fileinput.data-api\", '[data-provides=\"fileinput\"]', function (e) {\n    var t = u(this);\n\n    if (!t.data(\"bs.fileinput\")) {\n      t.fileinput(t.data());\n      var i = u(e.target).closest('[data-dismiss=\"fileinput\"],[data-trigger=\"fileinput\"]');\n      0 < i.length && (e.preventDefault(), i.trigger(\"click.bs.fileinput\"));\n    }\n  });\n}(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/jasny-bootstrap.min.js\n");

/***/ }),

/***/ "./resources/js/plugins/nouislider.min.js":
/*!************************************************!*\
  !*** ./resources/js/plugins/nouislider.min.js ***!
  \************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! nouislider - 14.0.2 - 6/28/2019 */\n!function (t) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(function () {\n  \"use strict\";\n\n  var lt = \"14.0.2\";\n\n  function ut(t) {\n    t.parentElement.removeChild(t);\n  }\n\n  function s(t) {\n    return null != t;\n  }\n\n  function ct(t) {\n    t.preventDefault();\n  }\n\n  function i(t) {\n    return \"number\" == typeof t && !isNaN(t) && isFinite(t);\n  }\n\n  function pt(t, e, r) {\n    0 < r && (ht(t, e), setTimeout(function () {\n      mt(t, e);\n    }, r));\n  }\n\n  function ft(t) {\n    return Math.max(Math.min(t, 100), 0);\n  }\n\n  function dt(t) {\n    return Array.isArray(t) ? t : [t];\n  }\n\n  function e(t) {\n    var e = (t = String(t)).split(\".\");\n    return 1 < e.length ? e[1].length : 0;\n  }\n\n  function ht(t, e) {\n    t.classList ? t.classList.add(e) : t.className += \" \" + e;\n  }\n\n  function mt(t, e) {\n    t.classList ? t.classList.remove(e) : t.className = t.className.replace(new RegExp(\"(^|\\\\b)\" + e.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \");\n  }\n\n  function gt(t) {\n    var e = void 0 !== window.pageXOffset,\n        r = \"CSS1Compat\" === (t.compatMode || \"\");\n    return {\n      x: e ? window.pageXOffset : r ? t.documentElement.scrollLeft : t.body.scrollLeft,\n      y: e ? window.pageYOffset : r ? t.documentElement.scrollTop : t.body.scrollTop\n    };\n  }\n\n  function c(t, e) {\n    return 100 / (e - t);\n  }\n\n  function p(t, e) {\n    return 100 * e / (t[1] - t[0]);\n  }\n\n  function f(t, e) {\n    for (var r = 1; t >= e[r];) {\n      r += 1;\n    }\n\n    return r;\n  }\n\n  function r(t, e, r) {\n    if (r >= t.slice(-1)[0]) return 100;\n    var n,\n        i,\n        o = f(r, t),\n        a = t[o - 1],\n        s = t[o],\n        l = e[o - 1],\n        u = e[o];\n    return l + (i = r, p(n = [a, s], n[0] < 0 ? i + Math.abs(n[0]) : i - n[0]) / c(l, u));\n  }\n\n  function n(t, e, r, n) {\n    if (100 === n) return n;\n    var i,\n        o,\n        a = f(n, t),\n        s = t[a - 1],\n        l = t[a];\n    return r ? (l - s) / 2 < n - s ? l : s : e[a - 1] ? t[a - 1] + (i = n - t[a - 1], o = e[a - 1], Math.round(i / o) * o) : n;\n  }\n\n  function o(t, e, r) {\n    var n;\n    if (\"number\" == typeof e && (e = [e]), !Array.isArray(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'range' contains invalid value.\");\n    if (!i(n = \"min\" === t ? 0 : \"max\" === t ? 100 : parseFloat(t)) || !i(e[0])) throw new Error(\"noUiSlider (\" + lt + \"): 'range' value isn't numeric.\");\n    r.xPct.push(n), r.xVal.push(e[0]), n ? r.xSteps.push(!isNaN(e[1]) && e[1]) : isNaN(e[1]) || (r.xSteps[0] = e[1]), r.xHighestCompleteStep.push(0);\n  }\n\n  function a(t, e, r) {\n    if (e) if (r.xVal[t] !== r.xVal[t + 1]) {\n      r.xSteps[t] = p([r.xVal[t], r.xVal[t + 1]], e) / c(r.xPct[t], r.xPct[t + 1]);\n      var n = (r.xVal[t + 1] - r.xVal[t]) / r.xNumSteps[t],\n          i = Math.ceil(Number(n.toFixed(3)) - 1),\n          o = r.xVal[t] + r.xNumSteps[t] * i;\n      r.xHighestCompleteStep[t] = o;\n    } else r.xSteps[t] = r.xHighestCompleteStep[t] = r.xVal[t];\n  }\n\n  function l(t, e, r) {\n    var n;\n    this.xPct = [], this.xVal = [], this.xSteps = [r || !1], this.xNumSteps = [!1], this.xHighestCompleteStep = [], this.snap = e;\n    var i = [];\n\n    for (n in t) {\n      t.hasOwnProperty(n) && i.push([t[n], n]);\n    }\n\n    for (i.length && \"object\" == _typeof(i[0][0]) ? i.sort(function (t, e) {\n      return t[0][0] - e[0][0];\n    }) : i.sort(function (t, e) {\n      return t[0] - e[0];\n    }), n = 0; n < i.length; n++) {\n      o(i[n][1], i[n][0], this);\n    }\n\n    for (this.xNumSteps = this.xSteps.slice(0), n = 0; n < this.xNumSteps.length; n++) {\n      a(n, this.xNumSteps[n], this);\n    }\n  }\n\n  l.prototype.getMargin = function (t) {\n    var e = this.xNumSteps[0];\n    if (e && t / e % 1 != 0) throw new Error(\"noUiSlider (\" + lt + \"): 'limit', 'margin' and 'padding' must be divisible by step.\");\n    return 2 === this.xPct.length && p(this.xVal, t);\n  }, l.prototype.toStepping = function (t) {\n    return t = r(this.xVal, this.xPct, t);\n  }, l.prototype.fromStepping = function (t) {\n    return function (t, e, r) {\n      if (100 <= r) return t.slice(-1)[0];\n      var n,\n          i = f(r, e),\n          o = t[i - 1],\n          a = t[i],\n          s = e[i - 1],\n          l = e[i];\n      return n = [o, a], (r - s) * c(s, l) * (n[1] - n[0]) / 100 + n[0];\n    }(this.xVal, this.xPct, t);\n  }, l.prototype.getStep = function (t) {\n    return t = n(this.xPct, this.xSteps, this.snap, t);\n  }, l.prototype.getDefaultStep = function (t, e, r) {\n    var n = f(t, this.xPct);\n    return (100 === t || e && t === this.xPct[n - 1]) && (n = Math.max(n - 1, 1)), (this.xVal[n] - this.xVal[n - 1]) / r;\n  }, l.prototype.getNearbySteps = function (t) {\n    var e = f(t, this.xPct);\n    return {\n      stepBefore: {\n        startValue: this.xVal[e - 2],\n        step: this.xNumSteps[e - 2],\n        highestStep: this.xHighestCompleteStep[e - 2]\n      },\n      thisStep: {\n        startValue: this.xVal[e - 1],\n        step: this.xNumSteps[e - 1],\n        highestStep: this.xHighestCompleteStep[e - 1]\n      },\n      stepAfter: {\n        startValue: this.xVal[e],\n        step: this.xNumSteps[e],\n        highestStep: this.xHighestCompleteStep[e]\n      }\n    };\n  }, l.prototype.countStepDecimals = function () {\n    var t = this.xNumSteps.map(e);\n    return Math.max.apply(null, t);\n  }, l.prototype.convert = function (t) {\n    return this.getStep(this.toStepping(t));\n  };\n  var u = {\n    to: function to(t) {\n      return void 0 !== t && t.toFixed(2);\n    },\n    from: Number\n  };\n\n  function d(t) {\n    if (\"object\" == _typeof(e = t) && \"function\" == typeof e.to && \"function\" == typeof e.from) return !0;\n    var e;\n    throw new Error(\"noUiSlider (\" + lt + \"): 'format' requires 'to' and 'from' methods.\");\n  }\n\n  function h(t, e) {\n    if (!i(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'step' is not numeric.\");\n    t.singleStep = e;\n  }\n\n  function m(t, e) {\n    if (\"object\" != _typeof(e) || Array.isArray(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'range' is not an object.\");\n    if (void 0 === e.min || void 0 === e.max) throw new Error(\"noUiSlider (\" + lt + \"): Missing 'min' or 'max' in 'range'.\");\n    if (e.min === e.max) throw new Error(\"noUiSlider (\" + lt + \"): 'range' 'min' and 'max' cannot be equal.\");\n    t.spectrum = new l(e, t.snap, t.singleStep);\n  }\n\n  function g(t, e) {\n    if (e = dt(e), !Array.isArray(e) || !e.length) throw new Error(\"noUiSlider (\" + lt + \"): 'start' option is incorrect.\");\n    t.handles = e.length, t.start = e;\n  }\n\n  function v(t, e) {\n    if (\"boolean\" != typeof (t.snap = e)) throw new Error(\"noUiSlider (\" + lt + \"): 'snap' option must be a boolean.\");\n  }\n\n  function b(t, e) {\n    if (\"boolean\" != typeof (t.animate = e)) throw new Error(\"noUiSlider (\" + lt + \"): 'animate' option must be a boolean.\");\n  }\n\n  function S(t, e) {\n    if (\"number\" != typeof (t.animationDuration = e)) throw new Error(\"noUiSlider (\" + lt + \"): 'animationDuration' option must be a number.\");\n  }\n\n  function x(t, e) {\n    var r,\n        n = [!1];\n\n    if (\"lower\" === e ? e = [!0, !1] : \"upper\" === e && (e = [!1, !0]), !0 === e || !1 === e) {\n      for (r = 1; r < t.handles; r++) {\n        n.push(e);\n      }\n\n      n.push(!1);\n    } else {\n      if (!Array.isArray(e) || !e.length || e.length !== t.handles + 1) throw new Error(\"noUiSlider (\" + lt + \"): 'connect' option doesn't match handle count.\");\n      n = e;\n    }\n\n    t.connect = n;\n  }\n\n  function w(t, e) {\n    switch (e) {\n      case \"horizontal\":\n        t.ort = 0;\n        break;\n\n      case \"vertical\":\n        t.ort = 1;\n        break;\n\n      default:\n        throw new Error(\"noUiSlider (\" + lt + \"): 'orientation' option is invalid.\");\n    }\n  }\n\n  function y(t, e) {\n    if (!i(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'margin' option must be numeric.\");\n    if (0 !== e && (t.margin = t.spectrum.getMargin(e), !t.margin)) throw new Error(\"noUiSlider (\" + lt + \"): 'margin' option is only supported on linear sliders.\");\n  }\n\n  function E(t, e) {\n    if (!i(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'limit' option must be numeric.\");\n    if (t.limit = t.spectrum.getMargin(e), !t.limit || t.handles < 2) throw new Error(\"noUiSlider (\" + lt + \"): 'limit' option is only supported on linear sliders with 2 or more handles.\");\n  }\n\n  function C(t, e) {\n    if (!i(e) && !Array.isArray(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'padding' option must be numeric or array of exactly 2 numbers.\");\n    if (Array.isArray(e) && 2 !== e.length && !i(e[0]) && !i(e[1])) throw new Error(\"noUiSlider (\" + lt + \"): 'padding' option must be numeric or array of exactly 2 numbers.\");\n\n    if (0 !== e) {\n      if (Array.isArray(e) || (e = [e, e]), !(t.padding = [t.spectrum.getMargin(e[0]), t.spectrum.getMargin(e[1])]) === t.padding[0] || !1 === t.padding[1]) throw new Error(\"noUiSlider (\" + lt + \"): 'padding' option is only supported on linear sliders.\");\n      if (t.padding[0] < 0 || t.padding[1] < 0) throw new Error(\"noUiSlider (\" + lt + \"): 'padding' option must be a positive number(s).\");\n      if (100 < t.padding[0] + t.padding[1]) throw new Error(\"noUiSlider (\" + lt + \"): 'padding' option must not exceed 100% of the range.\");\n    }\n  }\n\n  function N(t, e) {\n    switch (e) {\n      case \"ltr\":\n        t.dir = 0;\n        break;\n\n      case \"rtl\":\n        t.dir = 1;\n        break;\n\n      default:\n        throw new Error(\"noUiSlider (\" + lt + \"): 'direction' option was not recognized.\");\n    }\n  }\n\n  function U(t, e) {\n    if (\"string\" != typeof e) throw new Error(\"noUiSlider (\" + lt + \"): 'behaviour' must be a string containing options.\");\n    var r = 0 <= e.indexOf(\"tap\"),\n        n = 0 <= e.indexOf(\"drag\"),\n        i = 0 <= e.indexOf(\"fixed\"),\n        o = 0 <= e.indexOf(\"snap\"),\n        a = 0 <= e.indexOf(\"hover\"),\n        s = 0 <= e.indexOf(\"unconstrained\");\n\n    if (i) {\n      if (2 !== t.handles) throw new Error(\"noUiSlider (\" + lt + \"): 'fixed' behaviour must be used with 2 handles\");\n      y(t, t.start[1] - t.start[0]);\n    }\n\n    if (s && (t.margin || t.limit)) throw new Error(\"noUiSlider (\" + lt + \"): 'unconstrained' behaviour cannot be used with margin or limit\");\n    t.events = {\n      tap: r || o,\n      drag: n,\n      fixed: i,\n      snap: o,\n      hover: a,\n      unconstrained: s\n    };\n  }\n\n  function k(t, e) {\n    if (!1 !== e) if (!0 === e) {\n      t.tooltips = [];\n\n      for (var r = 0; r < t.handles; r++) {\n        t.tooltips.push(!0);\n      }\n    } else {\n      if (t.tooltips = dt(e), t.tooltips.length !== t.handles) throw new Error(\"noUiSlider (\" + lt + \"): must pass a formatter for all handles.\");\n      t.tooltips.forEach(function (t) {\n        if (\"boolean\" != typeof t && (\"object\" != _typeof(t) || \"function\" != typeof t.to)) throw new Error(\"noUiSlider (\" + lt + \"): 'tooltips' must be passed a formatter or 'false'.\");\n      });\n    }\n  }\n\n  function P(t, e) {\n    d(t.ariaFormat = e);\n  }\n\n  function A(t, e) {\n    d(t.format = e);\n  }\n\n  function V(t, e) {\n    if (\"boolean\" != typeof (t.keyboardSupport = e)) throw new Error(\"noUiSlider (\" + lt + \"): 'keyboardSupport' option must be a boolean.\");\n  }\n\n  function M(t, e) {\n    t.documentElement = e;\n  }\n\n  function O(t, e) {\n    if (\"string\" != typeof e && !1 !== e) throw new Error(\"noUiSlider (\" + lt + \"): 'cssPrefix' must be a string or `false`.\");\n    t.cssPrefix = e;\n  }\n\n  function L(t, e) {\n    if (\"object\" != _typeof(e)) throw new Error(\"noUiSlider (\" + lt + \"): 'cssClasses' must be an object.\");\n    if (\"string\" == typeof t.cssPrefix) for (var r in t.cssClasses = {}, e) {\n      e.hasOwnProperty(r) && (t.cssClasses[r] = t.cssPrefix + e[r]);\n    } else t.cssClasses = e;\n  }\n\n  function vt(e) {\n    var r = {\n      margin: 0,\n      limit: 0,\n      padding: 0,\n      animate: !0,\n      animationDuration: 300,\n      ariaFormat: u,\n      format: u\n    },\n        n = {\n      step: {\n        r: !1,\n        t: h\n      },\n      start: {\n        r: !0,\n        t: g\n      },\n      connect: {\n        r: !0,\n        t: x\n      },\n      direction: {\n        r: !0,\n        t: N\n      },\n      snap: {\n        r: !1,\n        t: v\n      },\n      animate: {\n        r: !1,\n        t: b\n      },\n      animationDuration: {\n        r: !1,\n        t: S\n      },\n      range: {\n        r: !0,\n        t: m\n      },\n      orientation: {\n        r: !1,\n        t: w\n      },\n      margin: {\n        r: !1,\n        t: y\n      },\n      limit: {\n        r: !1,\n        t: E\n      },\n      padding: {\n        r: !1,\n        t: C\n      },\n      behaviour: {\n        r: !0,\n        t: U\n      },\n      ariaFormat: {\n        r: !1,\n        t: P\n      },\n      format: {\n        r: !1,\n        t: A\n      },\n      tooltips: {\n        r: !1,\n        t: k\n      },\n      keyboardSupport: {\n        r: !0,\n        t: V\n      },\n      documentElement: {\n        r: !1,\n        t: M\n      },\n      cssPrefix: {\n        r: !0,\n        t: O\n      },\n      cssClasses: {\n        r: !0,\n        t: L\n      }\n    },\n        i = {\n      connect: !1,\n      direction: \"ltr\",\n      behaviour: \"tap\",\n      orientation: \"horizontal\",\n      keyboardSupport: !0,\n      cssPrefix: \"noUi-\",\n      cssClasses: {\n        target: \"target\",\n        base: \"base\",\n        origin: \"origin\",\n        handle: \"handle\",\n        handleLower: \"handle-lower\",\n        handleUpper: \"handle-upper\",\n        touchArea: \"touch-area\",\n        horizontal: \"horizontal\",\n        vertical: \"vertical\",\n        background: \"background\",\n        connect: \"connect\",\n        connects: \"connects\",\n        ltr: \"ltr\",\n        rtl: \"rtl\",\n        draggable: \"draggable\",\n        drag: \"state-drag\",\n        tap: \"state-tap\",\n        active: \"active\",\n        tooltip: \"tooltip\",\n        pips: \"pips\",\n        pipsHorizontal: \"pips-horizontal\",\n        pipsVertical: \"pips-vertical\",\n        marker: \"marker\",\n        markerHorizontal: \"marker-horizontal\",\n        markerVertical: \"marker-vertical\",\n        markerNormal: \"marker-normal\",\n        markerLarge: \"marker-large\",\n        markerSub: \"marker-sub\",\n        value: \"value\",\n        valueHorizontal: \"value-horizontal\",\n        valueVertical: \"value-vertical\",\n        valueNormal: \"value-normal\",\n        valueLarge: \"value-large\",\n        valueSub: \"value-sub\"\n      }\n    };\n    e.format && !e.ariaFormat && (e.ariaFormat = e.format), Object.keys(n).forEach(function (t) {\n      if (!s(e[t]) && void 0 === i[t]) {\n        if (n[t].r) throw new Error(\"noUiSlider (\" + lt + \"): '\" + t + \"' is required.\");\n        return !0;\n      }\n\n      n[t].t(r, s(e[t]) ? e[t] : i[t]);\n    }), r.pips = e.pips;\n    var t = document.createElement(\"div\"),\n        o = void 0 !== t.style.msTransform,\n        a = void 0 !== t.style.transform;\n    r.transformRule = a ? \"transform\" : o ? \"msTransform\" : \"webkitTransform\";\n    return r.style = [[\"left\", \"top\"], [\"right\", \"bottom\"]][r.dir][r.ort], r;\n  }\n\n  function z(t, f, o) {\n    var l,\n        u,\n        a,\n        c,\n        i,\n        s,\n        e,\n        p,\n        d = window.navigator.pointerEnabled ? {\n      start: \"pointerdown\",\n      move: \"pointermove\",\n      end: \"pointerup\"\n    } : window.navigator.msPointerEnabled ? {\n      start: \"MSPointerDown\",\n      move: \"MSPointerMove\",\n      end: \"MSPointerUp\"\n    } : {\n      start: \"mousedown touchstart\",\n      move: \"mousemove touchmove\",\n      end: \"mouseup touchend\"\n    },\n        h = window.CSS && CSS.supports && CSS.supports(\"touch-action\", \"none\") && function () {\n      var t = !1;\n\n      try {\n        var e = Object.defineProperty({}, \"passive\", {\n          get: function get() {\n            t = !0;\n          }\n        });\n        window.addEventListener(\"test\", null, e);\n      } catch (t) {}\n\n      return t;\n    }(),\n        y = t,\n        E = f.spectrum,\n        m = [],\n        g = [],\n        v = [],\n        b = 0,\n        S = {},\n        x = t.ownerDocument,\n        w = f.documentElement || x.documentElement,\n        C = x.body,\n        N = -1,\n        U = 0,\n        k = 1,\n        P = 2,\n        A = \"rtl\" === x.dir || 1 === f.ort ? 0 : 100;\n\n    function V(t, e) {\n      var r = x.createElement(\"div\");\n      return e && ht(r, e), t.appendChild(r), r;\n    }\n\n    function M(t, e) {\n      var r = V(t, f.cssClasses.origin),\n          n = V(r, f.cssClasses.handle);\n      return V(n, f.cssClasses.touchArea), n.setAttribute(\"data-handle\", e), f.keyboardSupport && (n.setAttribute(\"tabindex\", \"0\"), n.addEventListener(\"keydown\", function (t) {\n        return function (t, e) {\n          if (L() || z(e)) return !1;\n          var r = [\"Left\", \"Right\"],\n              n = [\"Down\", \"Up\"];\n          f.dir && !f.ort ? r.reverse() : f.ort && !f.dir && n.reverse();\n          var i = t.key.replace(\"Arrow\", \"\"),\n              o = i === n[0] || i === r[0],\n              a = i === n[1] || i === r[1];\n          if (!o && !a) return !0;\n          t.preventDefault();\n          var s = o ? 0 : 1,\n              l = st(e)[s];\n          if (null === l) return !1;\n          !1 === l && (l = E.getDefaultStep(g[e], o, 10));\n          return l = Math.max(l, 1e-7), l *= o ? -1 : 1, rt(e, E.toStepping(m[e] + l), !0, !0), J(\"slide\", e), J(\"update\", e), J(\"change\", e), J(\"set\", e), !1;\n        }(t, e);\n      })), n.setAttribute(\"role\", \"slider\"), n.setAttribute(\"aria-orientation\", f.ort ? \"vertical\" : \"horizontal\"), 0 === e ? ht(n, f.cssClasses.handleLower) : e === f.handles - 1 && ht(n, f.cssClasses.handleUpper), r;\n    }\n\n    function O(t, e) {\n      return !!e && V(t, f.cssClasses.connect);\n    }\n\n    function r(t, e) {\n      return !!f.tooltips[e] && V(t.firstChild, f.cssClasses.tooltip);\n    }\n\n    function L() {\n      return y.hasAttribute(\"disabled\");\n    }\n\n    function z(t) {\n      return u[t].hasAttribute(\"disabled\");\n    }\n\n    function j() {\n      i && (G(\"update.tooltips\"), i.forEach(function (t) {\n        t && ut(t);\n      }), i = null);\n    }\n\n    function H() {\n      j(), i = u.map(r), $(\"update.tooltips\", function (t, e, r) {\n        if (i[e]) {\n          var n = t[e];\n          !0 !== f.tooltips[e] && (n = f.tooltips[e].to(r[e])), i[e].innerHTML = n;\n        }\n      });\n    }\n\n    function F(e, i, o) {\n      var a = x.createElement(\"div\"),\n          s = [];\n      s[U] = f.cssClasses.valueNormal, s[k] = f.cssClasses.valueLarge, s[P] = f.cssClasses.valueSub;\n      var l = [];\n      l[U] = f.cssClasses.markerNormal, l[k] = f.cssClasses.markerLarge, l[P] = f.cssClasses.markerSub;\n      var u = [f.cssClasses.valueHorizontal, f.cssClasses.valueVertical],\n          c = [f.cssClasses.markerHorizontal, f.cssClasses.markerVertical];\n\n      function p(t, e) {\n        var r = e === f.cssClasses.value,\n            n = r ? s : l;\n        return e + \" \" + (r ? u : c)[f.ort] + \" \" + n[t];\n      }\n\n      return ht(a, f.cssClasses.pips), ht(a, 0 === f.ort ? f.cssClasses.pipsHorizontal : f.cssClasses.pipsVertical), Object.keys(e).forEach(function (t) {\n        !function (t, e, r) {\n          if ((r = i ? i(e, r) : r) !== N) {\n            var n = V(a, !1);\n            n.className = p(r, f.cssClasses.marker), n.style[f.style] = t + \"%\", U < r && ((n = V(a, !1)).className = p(r, f.cssClasses.value), n.setAttribute(\"data-value\", e), n.style[f.style] = t + \"%\", n.innerHTML = o.to(e));\n          }\n        }(t, e[t][0], e[t][1]);\n      }), a;\n    }\n\n    function D() {\n      c && (ut(c), c = null);\n    }\n\n    function T(t) {\n      D();\n\n      var m,\n          g,\n          v,\n          b,\n          e,\n          r,\n          S,\n          x,\n          w,\n          n = t.mode,\n          i = t.density || 1,\n          o = t.filter || !1,\n          a = function (t, e, r) {\n        if (\"range\" === t || \"steps\" === t) return E.xVal;\n\n        if (\"count\" === t) {\n          if (e < 2) throw new Error(\"noUiSlider (\" + lt + \"): 'values' (>= 2) required for mode 'count'.\");\n          var n = e - 1,\n              i = 100 / n;\n\n          for (e = []; n--;) {\n            e[n] = n * i;\n          }\n\n          e.push(100), t = \"positions\";\n        }\n\n        return \"positions\" === t ? e.map(function (t) {\n          return E.fromStepping(r ? E.getStep(t) : t);\n        }) : \"values\" === t ? r ? e.map(function (t) {\n          return E.fromStepping(E.getStep(E.toStepping(t)));\n        }) : e : void 0;\n      }(n, t.values || !1, t.stepped || !1),\n          s = (m = i, g = n, v = a, b = {}, e = E.xVal[0], r = E.xVal[E.xVal.length - 1], x = S = !1, w = 0, (v = v.slice().sort(function (t, e) {\n        return t - e;\n      }).filter(function (t) {\n        return !this[t] && (this[t] = !0);\n      }, {}))[0] !== e && (v.unshift(e), S = !0), v[v.length - 1] !== r && (v.push(r), x = !0), v.forEach(function (t, e) {\n        var r,\n            n,\n            i,\n            o,\n            a,\n            s,\n            l,\n            u,\n            c,\n            p,\n            f = t,\n            d = v[e + 1],\n            h = \"steps\" === g;\n        if (h && (r = E.xNumSteps[e]), r || (r = d - f), !1 !== f && void 0 !== d) for (r = Math.max(r, 1e-7), n = f; n <= d; n = (n + r).toFixed(7) / 1) {\n          for (u = (a = (o = E.toStepping(n)) - w) / m, p = a / (c = Math.round(u)), i = 1; i <= c; i += 1) {\n            b[(s = w + i * p).toFixed(5)] = [E.fromStepping(s), 0];\n          }\n\n          l = -1 < v.indexOf(n) ? k : h ? P : U, !e && S && (l = 0), n === d && x || (b[o.toFixed(5)] = [n, l]), w = o;\n        }\n      }), b),\n          l = t.format || {\n        to: Math.round\n      };\n\n      return c = y.appendChild(F(s, o, l));\n    }\n\n    function R() {\n      var t = l.getBoundingClientRect(),\n          e = \"offset\" + [\"Width\", \"Height\"][f.ort];\n      return 0 === f.ort ? t.width || l[e] : t.height || l[e];\n    }\n\n    function B(n, i, o, a) {\n      var e = function e(t) {\n        return !!(t = function (t, e, r) {\n          var n,\n              i,\n              o = 0 === t.type.indexOf(\"touch\"),\n              a = 0 === t.type.indexOf(\"mouse\"),\n              s = 0 === t.type.indexOf(\"pointer\");\n          0 === t.type.indexOf(\"MSPointer\") && (s = !0);\n\n          if (o) {\n            var l = function l(t) {\n              return t.target === r || r.contains(t.target);\n            };\n\n            if (\"touchstart\" === t.type) {\n              var u = Array.prototype.filter.call(t.touches, l);\n              if (1 < u.length) return !1;\n              n = u[0].pageX, i = u[0].pageY;\n            } else {\n              var c = Array.prototype.find.call(t.changedTouches, l);\n              if (!c) return !1;\n              n = c.pageX, i = c.pageY;\n            }\n          }\n\n          e = e || gt(x), (a || s) && (n = t.clientX + e.x, i = t.clientY + e.y);\n          return t.pageOffset = e, t.points = [n, i], t.cursor = a || s, t;\n        }(t, a.pageOffset, a.target || i)) && !(L() && !a.doNotReject) && (e = y, r = f.cssClasses.tap, !((e.classList ? e.classList.contains(r) : new RegExp(\"\\\\b\" + r + \"\\\\b\").test(e.className)) && !a.doNotReject) && !(n === d.start && void 0 !== t.buttons && 1 < t.buttons) && (!a.hover || !t.buttons) && (h || t.preventDefault(), t.calcPoint = t.points[f.ort], void o(t, a)));\n        var e, r;\n      },\n          r = [];\n\n      return n.split(\" \").forEach(function (t) {\n        i.addEventListener(t, e, !!h && {\n          passive: !0\n        }), r.push([t, e]);\n      }), r;\n    }\n\n    function q(t) {\n      var e,\n          r,\n          n,\n          i,\n          o,\n          a,\n          s = 100 * (t - (e = l, r = f.ort, n = e.getBoundingClientRect(), i = e.ownerDocument, o = i.documentElement, a = gt(i), /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) && (a.x = 0), r ? n.top + a.y - o.clientTop : n.left + a.x - o.clientLeft)) / R();\n      return s = ft(s), f.dir ? 100 - s : s;\n    }\n\n    function X(t, e) {\n      \"mouseout\" === t.type && \"HTML\" === t.target.nodeName && null === t.relatedTarget && _(t, e);\n    }\n\n    function Y(t, e) {\n      if (-1 === navigator.appVersion.indexOf(\"MSIE 9\") && 0 === t.buttons && 0 !== e.buttonsProperty) return _(t, e);\n      var r = (f.dir ? -1 : 1) * (t.calcPoint - e.startCalcPoint);\n      Z(0 < r, 100 * r / e.baseSize, e.locations, e.handleNumbers);\n    }\n\n    function _(t, e) {\n      e.handle && (mt(e.handle, f.cssClasses.active), b -= 1), e.listeners.forEach(function (t) {\n        w.removeEventListener(t[0], t[1]);\n      }), 0 === b && (mt(y, f.cssClasses.drag), et(), t.cursor && (C.style.cursor = \"\", C.removeEventListener(\"selectstart\", ct))), e.handleNumbers.forEach(function (t) {\n        J(\"change\", t), J(\"set\", t), J(\"end\", t);\n      });\n    }\n\n    function I(t, e) {\n      if (e.handleNumbers.some(z)) return !1;\n      var r;\n      1 === e.handleNumbers.length && (r = u[e.handleNumbers[0]].children[0], b += 1, ht(r, f.cssClasses.active));\n      t.stopPropagation();\n      var n = [],\n          i = B(d.move, w, Y, {\n        target: t.target,\n        handle: r,\n        listeners: n,\n        startCalcPoint: t.calcPoint,\n        baseSize: R(),\n        pageOffset: t.pageOffset,\n        handleNumbers: e.handleNumbers,\n        buttonsProperty: t.buttons,\n        locations: g.slice()\n      }),\n          o = B(d.end, w, _, {\n        target: t.target,\n        handle: r,\n        listeners: n,\n        doNotReject: !0,\n        handleNumbers: e.handleNumbers\n      }),\n          a = B(\"mouseout\", w, X, {\n        target: t.target,\n        handle: r,\n        listeners: n,\n        doNotReject: !0,\n        handleNumbers: e.handleNumbers\n      });\n      n.push.apply(n, i.concat(o, a)), t.cursor && (C.style.cursor = getComputedStyle(t.target).cursor, 1 < u.length && ht(y, f.cssClasses.drag), C.addEventListener(\"selectstart\", ct, !1)), e.handleNumbers.forEach(function (t) {\n        J(\"start\", t);\n      });\n    }\n\n    function n(t) {\n      t.stopPropagation();\n      var i,\n          o,\n          a,\n          e = q(t.calcPoint),\n          r = (i = e, a = !(o = 100), u.forEach(function (t, e) {\n        if (!z(e)) {\n          var r = g[e],\n              n = Math.abs(r - i);\n          (n < o || n <= o && r < i || 100 === n && 100 === o) && (a = e, o = n);\n        }\n      }), a);\n      if (!1 === r) return !1;\n      f.events.snap || pt(y, f.cssClasses.tap, f.animationDuration), rt(r, e, !0, !0), et(), J(\"slide\", r, !0), J(\"update\", r, !0), J(\"change\", r, !0), J(\"set\", r, !0), f.events.snap && I(t, {\n        handleNumbers: [r]\n      });\n    }\n\n    function W(t) {\n      var e = q(t.calcPoint),\n          r = E.getStep(e),\n          n = E.fromStepping(r);\n      Object.keys(S).forEach(function (t) {\n        \"hover\" === t.split(\".\")[0] && S[t].forEach(function (t) {\n          t.call(s, n);\n        });\n      });\n    }\n\n    function $(t, e) {\n      S[t] = S[t] || [], S[t].push(e), \"update\" === t.split(\".\")[0] && u.forEach(function (t, e) {\n        J(\"update\", e);\n      });\n    }\n\n    function G(t) {\n      var n = t && t.split(\".\")[0],\n          i = n && t.substring(n.length);\n      Object.keys(S).forEach(function (t) {\n        var e = t.split(\".\")[0],\n            r = t.substring(e.length);\n        n && n !== e || i && i !== r || delete S[t];\n      });\n    }\n\n    function J(r, n, i) {\n      Object.keys(S).forEach(function (t) {\n        var e = t.split(\".\")[0];\n        r === e && S[t].forEach(function (t) {\n          t.call(s, m.map(f.format.to), n, m.slice(), i || !1, g.slice());\n        });\n      });\n    }\n\n    function K(t, e, r, n, i, o) {\n      return 1 < u.length && !f.events.unconstrained && (n && 0 < e && (r = Math.max(r, t[e - 1] + f.margin)), i && e < u.length - 1 && (r = Math.min(r, t[e + 1] - f.margin))), 1 < u.length && f.limit && (n && 0 < e && (r = Math.min(r, t[e - 1] + f.limit)), i && e < u.length - 1 && (r = Math.max(r, t[e + 1] - f.limit))), f.padding && (0 === e && (r = Math.max(r, f.padding[0])), e === u.length - 1 && (r = Math.min(r, 100 - f.padding[1]))), !((r = ft(r = E.getStep(r))) === t[e] && !o) && r;\n    }\n\n    function Q(t, e) {\n      var r = f.ort;\n      return (r ? e : t) + \", \" + (r ? t : e);\n    }\n\n    function Z(t, n, r, e) {\n      var i = r.slice(),\n          o = [!t, t],\n          a = [t, !t];\n      e = e.slice(), t && e.reverse(), 1 < e.length ? e.forEach(function (t, e) {\n        var r = K(i, t, i[t] + n, o[e], a[e], !1);\n        !1 === r ? n = 0 : (n = r - i[t], i[t] = r);\n      }) : o = a = [!0];\n      var s = !1;\n      e.forEach(function (t, e) {\n        s = rt(t, r[t] + n, o[e], a[e]) || s;\n      }), s && e.forEach(function (t) {\n        J(\"update\", t), J(\"slide\", t);\n      });\n    }\n\n    function tt(t, e) {\n      return f.dir ? 100 - t - e : t;\n    }\n\n    function et() {\n      v.forEach(function (t) {\n        var e = 50 < g[t] ? -1 : 1,\n            r = 3 + (u.length + e * t);\n        u[t].style.zIndex = r;\n      });\n    }\n\n    function rt(t, e, r, n) {\n      return !1 !== (e = K(g, t, e, r, n, !1)) && (function (t, e) {\n        g[t] = e, m[t] = E.fromStepping(e);\n        var r = \"translate(\" + Q(10 * (tt(e, 0) - A) + \"%\", \"0\") + \")\";\n        u[t].style[f.transformRule] = r, nt(t), nt(t + 1);\n      }(t, e), !0);\n    }\n\n    function nt(t) {\n      if (a[t]) {\n        var e = 0,\n            r = 100;\n        0 !== t && (e = g[t - 1]), t !== a.length - 1 && (r = g[t]);\n        var n = r - e,\n            i = \"translate(\" + Q(tt(e, n) + \"%\", \"0\") + \")\",\n            o = \"scale(\" + Q(n / 100, \"1\") + \")\";\n        a[t].style[f.transformRule] = i + \" \" + o;\n      }\n    }\n\n    function it(t, e) {\n      return null === t || !1 === t || void 0 === t ? g[e] : (\"number\" == typeof t && (t = String(t)), t = f.format.from(t), !1 === (t = E.toStepping(t)) || isNaN(t) ? g[e] : t);\n    }\n\n    function ot(t, e) {\n      var r = dt(t),\n          n = void 0 === g[0];\n      e = void 0 === e || !!e, f.animate && !n && pt(y, f.cssClasses.tap, f.animationDuration), v.forEach(function (t) {\n        rt(t, it(r[t], t), !0, !1);\n      }), v.forEach(function (t) {\n        rt(t, g[t], !0, !0);\n      }), et(), v.forEach(function (t) {\n        J(\"update\", t), null !== r[t] && e && J(\"set\", t);\n      });\n    }\n\n    function at() {\n      var t = m.map(f.format.to);\n      return 1 === t.length ? t[0] : t;\n    }\n\n    function st(t) {\n      var e = g[t],\n          r = E.getNearbySteps(e),\n          n = m[t],\n          i = r.thisStep.step,\n          o = null;\n      if (f.snap) return [n - r.stepBefore.startValue || null, r.stepAfter.startValue - n || null];\n      !1 !== i && n + i > r.stepAfter.startValue && (i = r.stepAfter.startValue - n), o = n > r.thisStep.startValue ? r.thisStep.step : !1 !== r.stepBefore.step && n - r.stepBefore.highestStep, 100 === e ? i = null : 0 === e && (o = null);\n      var a = E.countStepDecimals();\n      return null !== i && !1 !== i && (i = Number(i.toFixed(a))), null !== o && !1 !== o && (o = Number(o.toFixed(a))), [o, i];\n    }\n\n    return ht(e = y, f.cssClasses.target), 0 === f.dir ? ht(e, f.cssClasses.ltr) : ht(e, f.cssClasses.rtl), 0 === f.ort ? ht(e, f.cssClasses.horizontal) : ht(e, f.cssClasses.vertical), l = V(e, f.cssClasses.base), function (t, e) {\n      var r = V(e, f.cssClasses.connects);\n      u = [], (a = []).push(O(r, t[0]));\n\n      for (var n = 0; n < f.handles; n++) {\n        u.push(M(e, n)), v[n] = n, a.push(O(r, t[n + 1]));\n      }\n    }(f.connect, l), (p = f.events).fixed || u.forEach(function (t, e) {\n      B(d.start, t.children[0], I, {\n        handleNumbers: [e]\n      });\n    }), p.tap && B(d.start, l, n, {}), p.hover && B(d.move, l, W, {\n      hover: !0\n    }), p.drag && a.forEach(function (t, e) {\n      if (!1 !== t && 0 !== e && e !== a.length - 1) {\n        var r = u[e - 1],\n            n = u[e],\n            i = [t];\n        ht(t, f.cssClasses.draggable), p.fixed && (i.push(r.children[0]), i.push(n.children[0])), i.forEach(function (t) {\n          B(d.start, t, I, {\n            handles: [r, n],\n            handleNumbers: [e - 1, e]\n          });\n        });\n      }\n    }), ot(f.start), f.pips && T(f.pips), f.tooltips && H(), $(\"update\", function (t, e, a, r, s) {\n      v.forEach(function (t) {\n        var e = u[t],\n            r = K(g, t, 0, !0, !0, !0),\n            n = K(g, t, 100, !0, !0, !0),\n            i = s[t],\n            o = f.ariaFormat.to(a[t]);\n        r = E.fromStepping(r).toFixed(1), n = E.fromStepping(n).toFixed(1), i = E.fromStepping(i).toFixed(1), e.children[0].setAttribute(\"aria-valuemin\", r), e.children[0].setAttribute(\"aria-valuemax\", n), e.children[0].setAttribute(\"aria-valuenow\", i), e.children[0].setAttribute(\"aria-valuetext\", o);\n      });\n    }), s = {\n      destroy: function destroy() {\n        for (var t in f.cssClasses) {\n          f.cssClasses.hasOwnProperty(t) && mt(y, f.cssClasses[t]);\n        }\n\n        for (; y.firstChild;) {\n          y.removeChild(y.firstChild);\n        }\n\n        delete y.noUiSlider;\n      },\n      steps: function steps() {\n        return v.map(st);\n      },\n      on: $,\n      off: G,\n      get: at,\n      set: ot,\n      setHandle: function setHandle(t, e, r) {\n        if (!(0 <= (t = Number(t)) && t < v.length)) throw new Error(\"noUiSlider (\" + lt + \"): invalid handle number, got: \" + t);\n        rt(t, it(e, t), !0, !0), J(\"update\", t), r && J(\"set\", t);\n      },\n      reset: function reset(t) {\n        ot(f.start, t);\n      },\n      __moveHandles: function __moveHandles(t, e, r) {\n        Z(t, e, g, r);\n      },\n      options: o,\n      updateOptions: function updateOptions(e, t) {\n        var r = at(),\n            n = [\"margin\", \"limit\", \"padding\", \"range\", \"animate\", \"snap\", \"step\", \"format\", \"pips\", \"tooltips\"];\n        n.forEach(function (t) {\n          void 0 !== e[t] && (o[t] = e[t]);\n        });\n        var i = vt(o);\n        n.forEach(function (t) {\n          void 0 !== e[t] && (f[t] = i[t]);\n        }), E = i.spectrum, f.margin = i.margin, f.limit = i.limit, f.padding = i.padding, f.pips ? T(f.pips) : D(), f.tooltips ? H() : j(), g = [], ot(e.start || r, t);\n      },\n      target: y,\n      removePips: D,\n      removeTooltips: j,\n      pips: T\n    };\n  }\n\n  return {\n    __spectrum: l,\n    version: lt,\n    create: function create(t, e) {\n      if (!t || !t.nodeName) throw new Error(\"noUiSlider (\" + lt + \"): create requires a single element, got: \" + t);\n      if (t.noUiSlider) throw new Error(\"noUiSlider (\" + lt + \"): Slider was already initialized.\");\n      var r = z(t, vt(e), e);\n      return t.noUiSlider = r;\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/nouislider.min.js\n");

/***/ }),

/***/ "./resources/js/plugins/perfect-scrollbar.jquery.min.js":
/*!**************************************************************!*\
  !*** ./resources/js/plugins/perfect-scrollbar.jquery.min.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * perfect-scrollbar v1.4.0\n * (c) 2018 Hyunje Jun\n * @license MIT\n * https://github.com/utatti/perfect-scrollbar\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function t(t) {\n    return getComputedStyle(t);\n  }\n\n  function e(t, e) {\n    for (var i in e) {\n      var r = e[i];\n      \"number\" == typeof r && (r += \"px\"), t.style[i] = r;\n    }\n\n    return t;\n  }\n\n  function i(t) {\n    var e = document.createElement(\"div\");\n    return e.className = t, e;\n  }\n\n  function r(t, e) {\n    if (!v) throw new Error(\"No element matching method supported\");\n    return v.call(t, e);\n  }\n\n  function l(t) {\n    t.remove ? t.remove() : t.parentNode && t.parentNode.removeChild(t);\n  }\n\n  function n(t, e) {\n    return Array.prototype.filter.call(t.children, function (t) {\n      return r(t, e);\n    });\n  }\n\n  function o(t, e) {\n    var i = t.element.classList,\n        r = m.state.scrolling(e);\n    i.contains(r) ? clearTimeout(Y[e]) : i.add(r);\n  }\n\n  function s(t, e) {\n    Y[e] = setTimeout(function () {\n      return t.isAlive && t.element.classList.remove(m.state.scrolling(e));\n    }, t.settings.scrollingThreshold);\n  }\n\n  function a(t, e) {\n    o(t, e), s(t, e);\n  }\n\n  function c(t) {\n    if (\"function\" == typeof window.CustomEvent) return new CustomEvent(t);\n    var e = document.createEvent(\"CustomEvent\");\n    return e.initCustomEvent(t, !1, !1, void 0), e;\n  }\n\n  function h(t, e, i, r, l) {\n    var n = i[0],\n        o = i[1],\n        s = i[2],\n        h = i[3],\n        u = i[4],\n        d = i[5];\n    void 0 === r && (r = !0), void 0 === l && (l = !1);\n    var f = t.element;\n    t.reach[h] = null, f[s] < 1 && (t.reach[h] = \"start\"), f[s] > t[n] - t[o] - 1 && (t.reach[h] = \"end\"), e && (f.dispatchEvent(c(\"ps-scroll-\" + h)), e < 0 ? f.dispatchEvent(c(\"ps-scroll-\" + u)) : e > 0 && f.dispatchEvent(c(\"ps-scroll-\" + d)), r && a(t, h)), t.reach[h] && (e || l) && f.dispatchEvent(c(\"ps-\" + h + \"-reach-\" + t.reach[h]));\n  }\n\n  function u(t) {\n    return parseInt(t, 10) || 0;\n  }\n\n  function d(t) {\n    return r(t, \"input,[contenteditable]\") || r(t, \"select,[contenteditable]\") || r(t, \"textarea,[contenteditable]\") || r(t, \"button,[contenteditable]\");\n  }\n\n  function f(e) {\n    var i = t(e);\n    return u(i.width) + u(i.paddingLeft) + u(i.paddingRight) + u(i.borderLeftWidth) + u(i.borderRightWidth);\n  }\n\n  function p(t, e) {\n    return t.settings.minScrollbarLength && (e = Math.max(e, t.settings.minScrollbarLength)), t.settings.maxScrollbarLength && (e = Math.min(e, t.settings.maxScrollbarLength)), e;\n  }\n\n  function b(t, i) {\n    var r = {\n      width: i.railXWidth\n    },\n        l = Math.floor(t.scrollTop);\n    i.isRtl ? r.left = i.negativeScrollAdjustment + t.scrollLeft + i.containerWidth - i.contentWidth : r.left = t.scrollLeft, i.isScrollbarXUsingBottom ? r.bottom = i.scrollbarXBottom - l : r.top = i.scrollbarXTop + l, e(i.scrollbarXRail, r);\n    var n = {\n      top: l,\n      height: i.railYHeight\n    };\n    i.isScrollbarYUsingRight ? i.isRtl ? n.right = i.contentWidth - (i.negativeScrollAdjustment + t.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth : n.right = i.scrollbarYRight - t.scrollLeft : i.isRtl ? n.left = i.negativeScrollAdjustment + t.scrollLeft + 2 * i.containerWidth - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth : n.left = i.scrollbarYLeft + t.scrollLeft, e(i.scrollbarYRail, n), e(i.scrollbarX, {\n      left: i.scrollbarXLeft,\n      width: i.scrollbarXWidth - i.railBorderXWidth\n    }), e(i.scrollbarY, {\n      top: i.scrollbarYTop,\n      height: i.scrollbarYHeight - i.railBorderYWidth\n    });\n  }\n\n  function g(t, e) {\n    function i(e) {\n      b[d] = g + Y * (e[a] - v), o(t, f), R(t), e.stopPropagation(), e.preventDefault();\n    }\n\n    function r() {\n      s(t, f), t[p].classList.remove(m.state.clicking), t.event.unbind(t.ownerDocument, \"mousemove\", i);\n    }\n\n    var l = e[0],\n        n = e[1],\n        a = e[2],\n        c = e[3],\n        h = e[4],\n        u = e[5],\n        d = e[6],\n        f = e[7],\n        p = e[8],\n        b = t.element,\n        g = null,\n        v = null,\n        Y = null;\n    t.event.bind(t[h], \"mousedown\", function (e) {\n      g = b[d], v = e[a], Y = (t[n] - t[l]) / (t[c] - t[u]), t.event.bind(t.ownerDocument, \"mousemove\", i), t.event.once(t.ownerDocument, \"mouseup\", r), t[p].classList.add(m.state.clicking), e.stopPropagation(), e.preventDefault();\n    });\n  }\n\n  var v = \"undefined\" != typeof Element && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector),\n      m = {\n    main: \"ps\",\n    element: {\n      thumb: function thumb(t) {\n        return \"ps__thumb-\" + t;\n      },\n      rail: function rail(t) {\n        return \"ps__rail-\" + t;\n      },\n      consuming: \"ps__child--consume\"\n    },\n    state: {\n      focus: \"ps--focus\",\n      clicking: \"ps--clicking\",\n      active: function active(t) {\n        return \"ps--active-\" + t;\n      },\n      scrolling: function scrolling(t) {\n        return \"ps--scrolling-\" + t;\n      }\n    }\n  },\n      Y = {\n    x: null,\n    y: null\n  },\n      X = function X(t) {\n    this.element = t, this.handlers = {};\n  },\n      w = {\n    isEmpty: {\n      configurable: !0\n    }\n  };\n\n  X.prototype.bind = function (t, e) {\n    void 0 === this.handlers[t] && (this.handlers[t] = []), this.handlers[t].push(e), this.element.addEventListener(t, e, !1);\n  }, X.prototype.unbind = function (t, e) {\n    var i = this;\n    this.handlers[t] = this.handlers[t].filter(function (r) {\n      return !(!e || r === e) || (i.element.removeEventListener(t, r, !1), !1);\n    });\n  }, X.prototype.unbindAll = function () {\n    var t = this;\n\n    for (var e in t.handlers) {\n      t.unbind(e);\n    }\n  }, w.isEmpty.get = function () {\n    var t = this;\n    return Object.keys(this.handlers).every(function (e) {\n      return 0 === t.handlers[e].length;\n    });\n  }, Object.defineProperties(X.prototype, w);\n\n  var y = function y() {\n    this.eventElements = [];\n  };\n\n  y.prototype.eventElement = function (t) {\n    var e = this.eventElements.filter(function (e) {\n      return e.element === t;\n    })[0];\n    return e || (e = new X(t), this.eventElements.push(e)), e;\n  }, y.prototype.bind = function (t, e, i) {\n    this.eventElement(t).bind(e, i);\n  }, y.prototype.unbind = function (t, e, i) {\n    var r = this.eventElement(t);\n    r.unbind(e, i), r.isEmpty && this.eventElements.splice(this.eventElements.indexOf(r), 1);\n  }, y.prototype.unbindAll = function () {\n    this.eventElements.forEach(function (t) {\n      return t.unbindAll();\n    }), this.eventElements = [];\n  }, y.prototype.once = function (t, e, i) {\n    var r = this.eventElement(t),\n        l = function l(t) {\n      r.unbind(e, l), i(t);\n    };\n\n    r.bind(e, l);\n  };\n\n  var W = function W(t, e, i, r, l) {\n    void 0 === r && (r = !0), void 0 === l && (l = !1);\n    var n;\n    if (\"top\" === e) n = [\"contentHeight\", \"containerHeight\", \"scrollTop\", \"y\", \"up\", \"down\"];else {\n      if (\"left\" !== e) throw new Error(\"A proper axis should be provided\");\n      n = [\"contentWidth\", \"containerWidth\", \"scrollLeft\", \"x\", \"left\", \"right\"];\n    }\n    h(t, i, n, r, l);\n  },\n      L = {\n    isWebKit: \"undefined\" != typeof document && \"WebkitAppearance\" in document.documentElement.style,\n    supportsTouch: \"undefined\" != typeof window && (\"ontouchstart\" in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    supportsIePointer: \"undefined\" != typeof navigator && navigator.msMaxTouchPoints,\n    isChrome: \"undefined\" != typeof navigator && /Chrome/i.test(navigator && navigator.userAgent)\n  },\n      R = function R(t) {\n    var e = t.element,\n        i = Math.floor(e.scrollTop);\n    t.containerWidth = e.clientWidth, t.containerHeight = e.clientHeight, t.contentWidth = e.scrollWidth, t.contentHeight = e.scrollHeight, e.contains(t.scrollbarXRail) || (n(e, m.element.rail(\"x\")).forEach(function (t) {\n      return l(t);\n    }), e.appendChild(t.scrollbarXRail)), e.contains(t.scrollbarYRail) || (n(e, m.element.rail(\"y\")).forEach(function (t) {\n      return l(t);\n    }), e.appendChild(t.scrollbarYRail)), !t.settings.suppressScrollX && t.containerWidth + t.settings.scrollXMarginOffset < t.contentWidth ? (t.scrollbarXActive = !0, t.railXWidth = t.containerWidth - t.railXMarginWidth, t.railXRatio = t.containerWidth / t.railXWidth, t.scrollbarXWidth = p(t, u(t.railXWidth * t.containerWidth / t.contentWidth)), t.scrollbarXLeft = u((t.negativeScrollAdjustment + e.scrollLeft) * (t.railXWidth - t.scrollbarXWidth) / (t.contentWidth - t.containerWidth))) : t.scrollbarXActive = !1, !t.settings.suppressScrollY && t.containerHeight + t.settings.scrollYMarginOffset < t.contentHeight ? (t.scrollbarYActive = !0, t.railYHeight = t.containerHeight - t.railYMarginHeight, t.railYRatio = t.containerHeight / t.railYHeight, t.scrollbarYHeight = p(t, u(t.railYHeight * t.containerHeight / t.contentHeight)), t.scrollbarYTop = u(i * (t.railYHeight - t.scrollbarYHeight) / (t.contentHeight - t.containerHeight))) : t.scrollbarYActive = !1, t.scrollbarXLeft >= t.railXWidth - t.scrollbarXWidth && (t.scrollbarXLeft = t.railXWidth - t.scrollbarXWidth), t.scrollbarYTop >= t.railYHeight - t.scrollbarYHeight && (t.scrollbarYTop = t.railYHeight - t.scrollbarYHeight), b(e, t), t.scrollbarXActive ? e.classList.add(m.state.active(\"x\")) : (e.classList.remove(m.state.active(\"x\")), t.scrollbarXWidth = 0, t.scrollbarXLeft = 0, e.scrollLeft = 0), t.scrollbarYActive ? e.classList.add(m.state.active(\"y\")) : (e.classList.remove(m.state.active(\"y\")), t.scrollbarYHeight = 0, t.scrollbarYTop = 0, e.scrollTop = 0);\n  },\n      T = {\n    \"click-rail\": function clickRail(t) {\n      t.event.bind(t.scrollbarY, \"mousedown\", function (t) {\n        return t.stopPropagation();\n      }), t.event.bind(t.scrollbarYRail, \"mousedown\", function (e) {\n        var i = e.pageY - window.pageYOffset - t.scrollbarYRail.getBoundingClientRect().top > t.scrollbarYTop ? 1 : -1;\n        t.element.scrollTop += i * t.containerHeight, R(t), e.stopPropagation();\n      }), t.event.bind(t.scrollbarX, \"mousedown\", function (t) {\n        return t.stopPropagation();\n      }), t.event.bind(t.scrollbarXRail, \"mousedown\", function (e) {\n        var i = e.pageX - window.pageXOffset - t.scrollbarXRail.getBoundingClientRect().left > t.scrollbarXLeft ? 1 : -1;\n        t.element.scrollLeft += i * t.containerWidth, R(t), e.stopPropagation();\n      });\n    },\n    \"drag-thumb\": function dragThumb(t) {\n      g(t, [\"containerWidth\", \"contentWidth\", \"pageX\", \"railXWidth\", \"scrollbarX\", \"scrollbarXWidth\", \"scrollLeft\", \"x\", \"scrollbarXRail\"]), g(t, [\"containerHeight\", \"contentHeight\", \"pageY\", \"railYHeight\", \"scrollbarY\", \"scrollbarYHeight\", \"scrollTop\", \"y\", \"scrollbarYRail\"]);\n    },\n    keyboard: function keyboard(t) {\n      function e(e, r) {\n        var l = Math.floor(i.scrollTop);\n\n        if (0 === e) {\n          if (!t.scrollbarYActive) return !1;\n          if (0 === l && r > 0 || l >= t.contentHeight - t.containerHeight && r < 0) return !t.settings.wheelPropagation;\n        }\n\n        var n = i.scrollLeft;\n\n        if (0 === r) {\n          if (!t.scrollbarXActive) return !1;\n          if (0 === n && e < 0 || n >= t.contentWidth - t.containerWidth && e > 0) return !t.settings.wheelPropagation;\n        }\n\n        return !0;\n      }\n\n      var i = t.element,\n          l = function l() {\n        return r(i, \":hover\");\n      },\n          n = function n() {\n        return r(t.scrollbarX, \":focus\") || r(t.scrollbarY, \":focus\");\n      };\n\n      t.event.bind(t.ownerDocument, \"keydown\", function (r) {\n        if (!(r.isDefaultPrevented && r.isDefaultPrevented() || r.defaultPrevented) && (l() || n())) {\n          var o = document.activeElement ? document.activeElement : t.ownerDocument.activeElement;\n\n          if (o) {\n            if (\"IFRAME\" === o.tagName) o = o.contentDocument.activeElement;else for (; o.shadowRoot;) {\n              o = o.shadowRoot.activeElement;\n            }\n            if (d(o)) return;\n          }\n\n          var s = 0,\n              a = 0;\n\n          switch (r.which) {\n            case 37:\n              s = r.metaKey ? -t.contentWidth : r.altKey ? -t.containerWidth : -30;\n              break;\n\n            case 38:\n              a = r.metaKey ? t.contentHeight : r.altKey ? t.containerHeight : 30;\n              break;\n\n            case 39:\n              s = r.metaKey ? t.contentWidth : r.altKey ? t.containerWidth : 30;\n              break;\n\n            case 40:\n              a = r.metaKey ? -t.contentHeight : r.altKey ? -t.containerHeight : -30;\n              break;\n\n            case 32:\n              a = r.shiftKey ? t.containerHeight : -t.containerHeight;\n              break;\n\n            case 33:\n              a = t.containerHeight;\n              break;\n\n            case 34:\n              a = -t.containerHeight;\n              break;\n\n            case 36:\n              a = t.contentHeight;\n              break;\n\n            case 35:\n              a = -t.contentHeight;\n              break;\n\n            default:\n              return;\n          }\n\n          t.settings.suppressScrollX && 0 !== s || t.settings.suppressScrollY && 0 !== a || (i.scrollTop -= a, i.scrollLeft += s, R(t), e(s, a) && r.preventDefault());\n        }\n      });\n    },\n    wheel: function wheel(e) {\n      function i(t, i) {\n        var r = Math.floor(o.scrollTop),\n            l = 0 === o.scrollTop,\n            n = r + o.offsetHeight === o.scrollHeight,\n            s = 0 === o.scrollLeft,\n            a = o.scrollLeft + o.offsetWidth === o.scrollWidth;\n        return !(Math.abs(i) > Math.abs(t) ? l || n : s || a) || !e.settings.wheelPropagation;\n      }\n\n      function r(t) {\n        var e = t.deltaX,\n            i = -1 * t.deltaY;\n        return void 0 !== e && void 0 !== i || (e = -1 * t.wheelDeltaX / 6, i = t.wheelDeltaY / 6), t.deltaMode && 1 === t.deltaMode && (e *= 10, i *= 10), e !== e && i !== i && (e = 0, i = t.wheelDelta), t.shiftKey ? [-i, -e] : [e, i];\n      }\n\n      function l(e, i, r) {\n        if (!L.isWebKit && o.querySelector(\"select:focus\")) return !0;\n        if (!o.contains(e)) return !1;\n\n        for (var l = e; l && l !== o;) {\n          if (l.classList.contains(m.element.consuming)) return !0;\n          var n = t(l);\n\n          if ([n.overflow, n.overflowX, n.overflowY].join(\"\").match(/(scroll|auto)/)) {\n            var s = l.scrollHeight - l.clientHeight;\n            if (s > 0 && !(0 === l.scrollTop && r > 0 || l.scrollTop === s && r < 0)) return !0;\n            var a = l.scrollWidth - l.clientWidth;\n            if (a > 0 && !(0 === l.scrollLeft && i < 0 || l.scrollLeft === a && i > 0)) return !0;\n          }\n\n          l = l.parentNode;\n        }\n\n        return !1;\n      }\n\n      function n(t) {\n        var n = r(t),\n            s = n[0],\n            a = n[1];\n\n        if (!l(t.target, s, a)) {\n          var c = !1;\n          e.settings.useBothWheelAxes ? e.scrollbarYActive && !e.scrollbarXActive ? (a ? o.scrollTop -= a * e.settings.wheelSpeed : o.scrollTop += s * e.settings.wheelSpeed, c = !0) : e.scrollbarXActive && !e.scrollbarYActive && (s ? o.scrollLeft += s * e.settings.wheelSpeed : o.scrollLeft -= a * e.settings.wheelSpeed, c = !0) : (o.scrollTop -= a * e.settings.wheelSpeed, o.scrollLeft += s * e.settings.wheelSpeed), R(e), (c = c || i(s, a)) && !t.ctrlKey && (t.stopPropagation(), t.preventDefault());\n        }\n      }\n\n      var o = e.element;\n      void 0 !== window.onwheel ? e.event.bind(o, \"wheel\", n) : void 0 !== window.onmousewheel && e.event.bind(o, \"mousewheel\", n);\n    },\n    touch: function touch(e) {\n      function i(t, i) {\n        var r = Math.floor(h.scrollTop),\n            l = h.scrollLeft,\n            n = Math.abs(t),\n            o = Math.abs(i);\n\n        if (o > n) {\n          if (i < 0 && r === e.contentHeight - e.containerHeight || i > 0 && 0 === r) return 0 === window.scrollY && i > 0 && L.isChrome;\n        } else if (n > o && (t < 0 && l === e.contentWidth - e.containerWidth || t > 0 && 0 === l)) return !0;\n\n        return !0;\n      }\n\n      function r(t, i) {\n        h.scrollTop -= i, h.scrollLeft -= t, R(e);\n      }\n\n      function l(t) {\n        return t.targetTouches ? t.targetTouches[0] : t;\n      }\n\n      function n(t) {\n        return !(t.pointerType && \"pen\" === t.pointerType && 0 === t.buttons || (!t.targetTouches || 1 !== t.targetTouches.length) && (!t.pointerType || \"mouse\" === t.pointerType || t.pointerType === t.MSPOINTER_TYPE_MOUSE));\n      }\n\n      function o(t) {\n        if (n(t)) {\n          var e = l(t);\n          u.pageX = e.pageX, u.pageY = e.pageY, d = new Date().getTime(), null !== p && clearInterval(p);\n        }\n      }\n\n      function s(e, i, r) {\n        if (!h.contains(e)) return !1;\n\n        for (var l = e; l && l !== h;) {\n          if (l.classList.contains(m.element.consuming)) return !0;\n          var n = t(l);\n\n          if ([n.overflow, n.overflowX, n.overflowY].join(\"\").match(/(scroll|auto)/)) {\n            var o = l.scrollHeight - l.clientHeight;\n            if (o > 0 && !(0 === l.scrollTop && r > 0 || l.scrollTop === o && r < 0)) return !0;\n            var s = l.scrollLeft - l.clientWidth;\n            if (s > 0 && !(0 === l.scrollLeft && i < 0 || l.scrollLeft === s && i > 0)) return !0;\n          }\n\n          l = l.parentNode;\n        }\n\n        return !1;\n      }\n\n      function a(t) {\n        if (n(t)) {\n          var e = l(t),\n              o = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          },\n              a = o.pageX - u.pageX,\n              c = o.pageY - u.pageY;\n          if (s(t.target, a, c)) return;\n          r(a, c), u = o;\n          var h = new Date().getTime(),\n              p = h - d;\n          p > 0 && (f.x = a / p, f.y = c / p, d = h), i(a, c) && t.preventDefault();\n        }\n      }\n\n      function c() {\n        e.settings.swipeEasing && (clearInterval(p), p = setInterval(function () {\n          e.isInitialized ? clearInterval(p) : f.x || f.y ? Math.abs(f.x) < .01 && Math.abs(f.y) < .01 ? clearInterval(p) : (r(30 * f.x, 30 * f.y), f.x *= .8, f.y *= .8) : clearInterval(p);\n        }, 10));\n      }\n\n      if (L.supportsTouch || L.supportsIePointer) {\n        var h = e.element,\n            u = {},\n            d = 0,\n            f = {},\n            p = null;\n        L.supportsTouch ? (e.event.bind(h, \"touchstart\", o), e.event.bind(h, \"touchmove\", a), e.event.bind(h, \"touchend\", c)) : L.supportsIePointer && (window.PointerEvent ? (e.event.bind(h, \"pointerdown\", o), e.event.bind(h, \"pointermove\", a), e.event.bind(h, \"pointerup\", c)) : window.MSPointerEvent && (e.event.bind(h, \"MSPointerDown\", o), e.event.bind(h, \"MSPointerMove\", a), e.event.bind(h, \"MSPointerUp\", c)));\n      }\n    }\n  },\n      H = function H(r, l) {\n    var n = this;\n    if (void 0 === l && (l = {}), \"string\" == typeof r && (r = document.querySelector(r)), !r || !r.nodeName) throw new Error(\"no element is specified to initialize PerfectScrollbar\");\n    this.element = r, r.classList.add(m.main), this.settings = {\n      handlers: [\"click-rail\", \"drag-thumb\", \"keyboard\", \"wheel\", \"touch\"],\n      maxScrollbarLength: null,\n      minScrollbarLength: null,\n      scrollingThreshold: 1e3,\n      scrollXMarginOffset: 0,\n      scrollYMarginOffset: 0,\n      suppressScrollX: !1,\n      suppressScrollY: !1,\n      swipeEasing: !0,\n      useBothWheelAxes: !1,\n      wheelPropagation: !0,\n      wheelSpeed: 1\n    };\n\n    for (var o in l) {\n      n.settings[o] = l[o];\n    }\n\n    this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;\n\n    var s = function s() {\n      return r.classList.add(m.state.focus);\n    },\n        a = function a() {\n      return r.classList.remove(m.state.focus);\n    };\n\n    this.isRtl = \"rtl\" === t(r).direction, this.isNegativeScroll = function () {\n      var t = r.scrollLeft,\n          e = null;\n      return r.scrollLeft = -1, e = r.scrollLeft < 0, r.scrollLeft = t, e;\n    }(), this.negativeScrollAdjustment = this.isNegativeScroll ? r.scrollWidth - r.clientWidth : 0, this.event = new y(), this.ownerDocument = r.ownerDocument || document, this.scrollbarXRail = i(m.element.rail(\"x\")), r.appendChild(this.scrollbarXRail), this.scrollbarX = i(m.element.thumb(\"x\")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarX, \"focus\", s), this.event.bind(this.scrollbarX, \"blur\", a), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;\n    var c = t(this.scrollbarXRail);\n    this.scrollbarXBottom = parseInt(c.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = u(c.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = u(c.borderLeftWidth) + u(c.borderRightWidth), e(this.scrollbarXRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = u(c.marginLeft) + u(c.marginRight), e(this.scrollbarXRail, {\n      display: \"\"\n    }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = i(m.element.rail(\"y\")), r.appendChild(this.scrollbarYRail), this.scrollbarY = i(m.element.thumb(\"y\")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarY, \"focus\", s), this.event.bind(this.scrollbarY, \"blur\", a), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;\n    var h = t(this.scrollbarYRail);\n    this.scrollbarYRight = parseInt(h.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = u(h.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? f(this.scrollbarY) : null, this.railBorderYWidth = u(h.borderTopWidth) + u(h.borderBottomWidth), e(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railYMarginHeight = u(h.marginTop) + u(h.marginBottom), e(this.scrollbarYRail, {\n      display: \"\"\n    }), this.railYHeight = null, this.railYRatio = null, this.reach = {\n      x: r.scrollLeft <= 0 ? \"start\" : r.scrollLeft >= this.contentWidth - this.containerWidth ? \"end\" : null,\n      y: r.scrollTop <= 0 ? \"start\" : r.scrollTop >= this.contentHeight - this.containerHeight ? \"end\" : null\n    }, this.isAlive = !0, this.settings.handlers.forEach(function (t) {\n      return T[t](n);\n    }), this.lastScrollTop = Math.floor(r.scrollTop), this.lastScrollLeft = r.scrollLeft, this.event.bind(this.element, \"scroll\", function (t) {\n      return n.onScroll(t);\n    }), R(this);\n  };\n\n  return H.prototype.update = function () {\n    this.isAlive && (this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, e(this.scrollbarXRail, {\n      display: \"block\"\n    }), e(this.scrollbarYRail, {\n      display: \"block\"\n    }), this.railXMarginWidth = u(t(this.scrollbarXRail).marginLeft) + u(t(this.scrollbarXRail).marginRight), this.railYMarginHeight = u(t(this.scrollbarYRail).marginTop) + u(t(this.scrollbarYRail).marginBottom), e(this.scrollbarXRail, {\n      display: \"none\"\n    }), e(this.scrollbarYRail, {\n      display: \"none\"\n    }), R(this), W(this, \"top\", 0, !1, !0), W(this, \"left\", 0, !1, !0), e(this.scrollbarXRail, {\n      display: \"\"\n    }), e(this.scrollbarYRail, {\n      display: \"\"\n    }));\n  }, H.prototype.onScroll = function (t) {\n    this.isAlive && (R(this), W(this, \"top\", this.element.scrollTop - this.lastScrollTop), W(this, \"left\", this.element.scrollLeft - this.lastScrollLeft), this.lastScrollTop = Math.floor(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);\n  }, H.prototype.destroy = function () {\n    this.isAlive && (this.event.unbindAll(), l(this.scrollbarX), l(this.scrollbarY), l(this.scrollbarXRail), l(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);\n  }, H.prototype.removePsClasses = function () {\n    this.element.className = this.element.className.split(\" \").filter(function (t) {\n      return !t.match(/^ps([-_].+|)$/);\n    }).join(\" \");\n  }, H;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/perfect-scrollbar.jquery.min.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.0\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur as it's already being fired\n\t\t// in leverageNative.\n\t\t_default: function() {\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;